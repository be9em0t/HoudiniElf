{
  "module": "Houdini",
  "type": "Functions",
  "version": "20.5",
  "functions": [
    {
      "name": "append",
      "description": "Adds an item to an array or string.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/append.html",
      "usage": [
        "void  append(string &array, string value)",
        "void  append(<type>&array[], <type>value)",
        "void  append(<type>&array[], <type>values[])"
      ]
    },
    {
      "name": "argsort",
      "description": "Returns the indices of a sorted version of an array.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/argsort.html",
      "usage": [
        "int [] argsort(<type>value[])"
      ]
    },
    {
      "name": "array",
      "description": "Efficiently creates an array from its arguments.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/array.html",
      "usage": [
        "<type>[] array(...)"
      ]
    },
    {
      "name": "findlowerbound",
      "description": "Finds the largest item smaller than a target value in an array.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/findlowerbound.html",
      "usage": [
        "int  findlowerbound(<type>array[], <type>target)",
        "int  findlowerbound(<type>array[], <type>target, int start)",
        "int  findlowerbound(<type>array[], <type>target, int start, int end)"
      ]
    },
    {
      "name": "findsorted",
      "description": "Finds an item in a sorted array.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/findsorted.html",
      "usage": [
        "int  findsorted(<type>array[], <type>target)",
        "int  findsorted(<type>array[], <type>target, int start)",
        "int  findsorted(<type>array[], <type>target, int start, int end)"
      ]
    },
    {
      "name": "foreach",
      "description": "Loops over the items in an array, with optional enumeration.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/foreach.html",
      "usage": []
    },
    {
      "name": "findlowerboundsorted",
      "description": "Finds the largest item smaller than a target value in a sorted array.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/findlowerboundsorted.html",
      "usage": [
        "int  findlowerboundsorted(<type>array[], <type>target)",
        "int  findlowerboundsorted(<type>array[], <type>target, int start)",
        "int  findlowerboundsorted(<type>array[], <type>target, int start, int end)"
      ]
    },
    {
      "name": "insert",
      "description": "Inserts an item, array, or string into an array or string.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/insert.html",
      "usage": [
        "void  insert(string &str, int index, string value)",
        "void  insert(<type>&array[], int index, <type>value)",
        "void  insert(<type>&array[], int index, <type>values[])",
        "int  insert(dict &dstdict, string dstkey, dict srcdict, string srckey)",
        "void  insert(dict &dstdict, dict srcdict)"
      ]
    },
    {
      "name": "len",
      "description": "Returns the length of an array.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/len.html",
      "usage": [
        "int  len(<vector>v)",
        "int  len(<matrix>m)",
        "int  len(<type>array[])",
        "int  len(string s)",
        "int  len(dict d)"
      ]
    },
    {
      "name": "isvalidindex",
      "description": "Checks if the index given is valid for the array or string given.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isvalidindex.html",
      "usage": [
        "int  isvalidindex(<type>&array[], int index)",
        "int  isvalidindex(string str, int index)",
        "int  isvalidindex(dict d, string key)"
      ]
    },
    {
      "name": "pop",
      "description": "Removes the last element of an array and returns it.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pop.html",
      "usage": [
        "<type> pop(<type>&array[])",
        "<type> pop(<type>&array[], int index)",
        "pop(array, -2)"
      ]
    },
    {
      "name": "push",
      "description": "Adds an item to an array.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/push.html",
      "usage": [
        "void  push(<type>&array[], <type>value)",
        "void  push(<type>&array[], <type>values[])"
      ]
    },
    {
      "name": "removevalue",
      "description": "Removes an item from an array.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removevalue.html",
      "usage": [
        "int  removevalue(<type>&array[], <type>value)"
      ]
    },
    {
      "name": "removeindex",
      "description": "Removes an item at the given index from an array.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removeindex.html",
      "usage": [
        "<type> removeindex(<type>&array[], int index)",
        "removeindex(array, -2)",
        "int  removeindex(dict &dictionary, string index)"
      ]
    },
    {
      "name": "reorder",
      "description": "Reorders items in an array or string.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/reorder.html",
      "usage": [
        "string  reorder(string value, int indices[])",
        "<type>[] reorder(<type>values[], int indices[])"
      ]
    },
    {
      "name": "resize",
      "description": "Sets the length of an array.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/resize.html",
      "usage": [
        "void  resize(<type>&array[], int size)",
        "void  resize(<type>&array[], int size, <type>val)"
      ]
    },
    {
      "name": "reverse",
      "description": "Returns an array or string in reverse order.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/reverse.html",
      "usage": [
        "string  reverse(string str)",
        "<type>[] reverse(<type>values[])"
      ]
    },
    {
      "name": "slice",
      "description": "Slices a sub-string or sub-array of a string or array.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/slice.html",
      "usage": [
        "string  slice(string s, int start, int end)",
        "string  slice(string s, int start, int end, int step)",
        "<type>[] slice(<type>s[], int start, int end)",
        "<type>[] slice(<type>s[], int start, int end, int step)",
        "string  slice(string s, int hasstart, int start, int hasend, int end, int hasstep, int step)",
        "<type>[] slice(<type>array[], int hasstart, int start, int hasend, int end, int hasstep, int step)"
      ]
    },
    {
      "name": "addattrib",
      "description": "Adds an attribute to a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/addattrib.html",
      "usage": [
        "int  addattrib(int geohandle, string attribclass, string name, <type>defvalue)",
        "int  addattrib(int geohandle, string attribclass, string name, <type>defvalue[])"
      ]
    },
    {
      "name": "upush",
      "description": "Adds a uniform item to an array.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/upush.html",
      "usage": [
        "void  upush(<type>&array[], <type>value)"
      ]
    },
    {
      "name": "sort",
      "description": "Returns the array sorted in increasing order.",
      "category": "Arrays",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sort.html",
      "usage": [
        "int [] sort(int values[])",
        "float [] sort(float values[])",
        "string [] sort(string values[])"
      ]
    },
    {
      "name": "adddetailattrib",
      "description": "Adds a detail attribute to a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/adddetailattrib.html",
      "usage": [
        "int  adddetailattrib(int geohandle, string name, <type>defvalue)",
        "int  adddetailattrib(int geohandle, string name, <type>defvalue[])",
        "int  adddetailattrib(int geohandle, string name, <type>defvalue, string typeinfo)",
        "int  adddetailattrib(int geohandle, string name, <type>defvalue[], string typeinfo)"
      ]
    },
    {
      "name": "addpointattrib",
      "description": "Adds a point attribute to a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/addpointattrib.html",
      "usage": [
        "int  addpointattrib(int geohandle, string name, <type>defvalue)",
        "int  addpointattrib(int geohandle, string name, <type>defvalue[])",
        "int  addpointattrib(int geohandle, string name, <type>defvalue, string typeinfo)",
        "int  addpointattrib(int geohandle, string name, <type>defvalue[], string typeinfo)"
      ]
    },
    {
      "name": "addprimattrib",
      "description": "Adds a primitive attribute to a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/addprimattrib.html",
      "usage": [
        "int  addprimattrib(int geohandle, string name, <type>defvalue)",
        "int  addprimattrib(int geohandle, string name, <type>defvalue[])",
        "int  addprimattrib(int geohandle, string name, <type>defvalue, string typeinfo)",
        "int  addprimattrib(int geohandle, string name, <type>defvalue[], string typeinfo)"
      ]
    },
    {
      "name": "addvisualizer",
      "description": "Appends to a geometry\u2019s visualizer detail attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/addvisualizer.html",
      "usage": [
        "int  addvisualizer(int geohandle, string op_url)"
      ]
    },
    {
      "name": "addvertexattrib",
      "description": "Adds a vertex attribute to a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/addvertexattrib.html",
      "usage": [
        "int  addvertexattrib(int geohandle, string name, <type>defvalue)",
        "int  addvertexattrib(int geohandle, string name, <type>defvalue[])",
        "int  addvertexattrib(int geohandle, string name, <type>defvalue, string typeinfo)",
        "int  addvertexattrib(int geohandle, string name, <type>defvalue[], string typeinfo)"
      ]
    },
    {
      "name": "attribclass",
      "description": "Returns the class of a geometry attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/attribclass.html",
      "usage": [
        "string  attribclass(<geometry>geometry, string attribute_name)",
        "attribclass(0, \"foo\")"
      ]
    },
    {
      "name": "attrib",
      "description": "Reads the value of an attribute from geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/attrib.html",
      "usage": [
        "<type> attrib(<geometry>geometry, string attribclass, string name, int elemnum)",
        "<type>[] attrib(<geometry>geometry, string attribclass, string name, int elemnum)"
      ]
    },
    {
      "name": "attribtype",
      "description": "Returns the type of a geometry attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/attribtype.html",
      "usage": [
        "int  attribtype(<geometry>geometry, string attribclass, string attribute_name)"
      ]
    },
    {
      "name": "attribsize",
      "description": "Returns the size of a geometry attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/attribsize.html",
      "usage": [
        "int  attribsize(<geometry>geometry, string attribclass, string attribute_name)"
      ]
    },
    {
      "name": "attribdataid",
      "description": "Returns the data id of a geometry attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/attribdataid.html",
      "usage": [
        "int [] attribdataid(<geometry>geometry, string attribclass, string attribute_name)"
      ]
    },
    {
      "name": "attribtypeinfo",
      "description": "Returns the transformation metadata of a geometry attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/attribtypeinfo.html",
      "usage": [
        "string  attribtypeinfo(<geometry>geometry, string attribclass, string attribute_name)"
      ]
    },
    {
      "name": "curvearclen",
      "description": "Evaluates the length of an arc on a primitive defined by an array of points using parametric uv coordinates.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/curvearclen.html",
      "usage": [
        "float  curvearclen(vector positions[], float uv1, float uv2, int closedflag, int fmt, int order)",
        "float  curvearclen(vector positions[], float uv1, float uv2, int closedflag, int fmt, int order, int divs)",
        "float  curvearclen(vector positions[], float uv1, float uv2, int closedflag, int fmt, int order, int divs, int primuvmode)",
        "float  curvearclen(vector positions[], float uv1, float uv2, int closedflag, int fmt, int order, int divs, int primuvmode, float primuvtol)"
      ]
    },
    {
      "name": "detail",
      "description": "Reads the value of a detail attribute value from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/detail.html",
      "usage": [
        "<type> detail(<geometry>geometry, string attribute_name, int ignored=0)",
        "<type>[] detail(<geometry>geometry, string attribute_name, int ignored=0)"
      ]
    },
    {
      "name": "detailattribsize",
      "description": "Returns the size of a geometry detail attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/detailattribsize.html",
      "usage": [
        "int  detailattribsize(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "detailattrib",
      "description": "Reads a detail attribute value from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/detailattrib.html",
      "usage": [
        "<type> detailattrib(<geometry>geometry, string attribute_name, int ignored, int &success)",
        "<type>[] detailattrib(<geometry>geometry, string attribute_name, int ignored, int &success)"
      ]
    },
    {
      "name": "detailattribtypeinfo",
      "description": "Returns the type info of a geometry attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/detailattribtypeinfo.html",
      "usage": [
        "string  detailattribtypeinfo(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "detailattribtype",
      "description": "Returns the type of a geometry detail attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/detailattribtype.html",
      "usage": [
        "int  detailattribtype(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "detailintrinsic",
      "description": "Reads the value of a detail intrinsic from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/detailintrinsic.html",
      "usage": [
        "<type> detailintrinsic(<geometry>geometry, string intrinsic_name)",
        "<type>[] detailintrinsic(<geometry>geometry, string intrinsic_name)"
      ]
    },
    {
      "name": "findattribval",
      "description": "Finds a primitive/point/vertex that has a certain attribute value.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/findattribval.html",
      "usage": [
        "int  findattribval(<geometry>geometry, string attribclass, string attribute_name, int|stringvalue, int which=0)",
        "int [] findattribval(<geometry>geometry, string attribclass, string attribute_name, int|stringvalue)"
      ]
    },
    {
      "name": "findattribvalcount",
      "description": "Returns number of elements where an integer or string attribute has a certain value.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/findattribvalcount.html",
      "usage": [
        "int  findattribvalcount(<geometry>geometry, string attribclass, string attribute_name, int|stringvalue)"
      ]
    },
    {
      "name": "getattrib",
      "description": "Reads an attribute value from geometry, with validity check.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getattrib.html",
      "usage": [
        "<type> getattrib(<geometry>geometry, string attribclass, string attribute_name, int elemnum, int &success)",
        "<type>[] getattrib(<geometry>geometry, string attribclass, string attribute_name, int elemnum, int &success)"
      ]
    },
    {
      "name": "getattribute",
      "description": "Copies the value of a geometry attribute into a variable and returns a success flag.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getattribute.html",
      "usage": [
        "int  getattribute(string geometry, <type>&value, string attribclass, string attribute_name, int element_number, int vertex_number)",
        "int  getattribute(string geometry, <type>&value[], string attribclass, string attribute_name, int element_number, int vertex_number)"
      ]
    },
    {
      "name": "hasattrib",
      "description": "Checks whether a geometry attribute exists.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hasattrib.html",
      "usage": [
        "int  hasattrib(<geometry>geometry, string attribclass, string attribute_name)"
      ]
    },
    {
      "name": "hasdetailattrib",
      "description": "Returns if a geometry detail attribute exists.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hasdetailattrib.html",
      "usage": [
        "int  hasdetailattrib(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "haspointattrib",
      "description": "Returns if a geometry point attribute exists.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/haspointattrib.html",
      "usage": [
        "int  haspointattrib(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "idtopoint",
      "description": "Finds a point by its id attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/idtopoint.html",
      "usage": [
        "int  idtopoint(<geometry>geometry, int id)"
      ]
    },
    {
      "name": "hasvertexattrib",
      "description": "Returns if a geometry vertex attribute exists.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hasvertexattrib.html",
      "usage": [
        "int  hasvertexattrib(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "hasprimattrib",
      "description": "Returns if a geometry prim attribute exists.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hasprimattrib.html",
      "usage": [
        "int  hasprimattrib(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "idtoprim",
      "description": "Finds a primitive by its id attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/idtoprim.html",
      "usage": [
        "int  idtoprim(<geometry>geometry, int id)"
      ]
    },
    {
      "name": "nuniqueval",
      "description": "Returns the number of unique values from an integer or string attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nuniqueval.html",
      "usage": [
        "int  nuniqueval(<geometry>geometry, string attribclass, string attribute_name)"
      ]
    },
    {
      "name": "nametoprim",
      "description": "Finds a primitive by its name attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nametoprim.html",
      "usage": [
        "int  nametoprim(<geometry>geometry, string name)"
      ]
    },
    {
      "name": "nametopoint",
      "description": "Finds a point by its name attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nametopoint.html",
      "usage": [
        "int  nametopoint(<geometry>geometry, string name)"
      ]
    },
    {
      "name": "pointattribsize",
      "description": "Returns the size of a geometry point attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointattribsize.html",
      "usage": [
        "int  pointattribsize(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "point",
      "description": "Reads a point attribute value from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/point.html",
      "usage": [
        "<type> point(<geometry>geometry, string attribute_name, int pointnumber)",
        "<type>[] point(<geometry>geometry, string attribute_name, int pointnumber)"
      ]
    },
    {
      "name": "pointattrib",
      "description": "Reads a point attribute value from a geometry and outputs a success/fail flag.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointattrib.html",
      "usage": [
        "<type> pointattrib(<geometry>geometry, string attribute_name, int pointnumber, int &success)",
        "<type>[] pointattrib(<geometry>geometry, string attribute_name, int pointnumber, int &success)"
      ]
    },
    {
      "name": "pointattribtypeinfo",
      "description": "Returns the type info of a geometry attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointattribtypeinfo.html",
      "usage": [
        "string  pointattribtypeinfo(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "pointattribtype",
      "description": "Returns the type of a geometry point attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointattribtype.html",
      "usage": [
        "int  pointattribtype(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "pointlocaltransforms",
      "description": "Returns an array of point localtransforms from an array of point indices.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointlocaltransforms.html",
      "usage": [
        "matrix [] pointlocaltransforms(<geometry>geometry, int pnts[])"
      ]
    },
    {
      "name": "pointtransformrigid",
      "description": "Returns a rigid point transform from a point index.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointtransformrigid.html",
      "usage": [
        "matrix  pointtransformrigid(<geometry>geometry, int pnt)"
      ]
    },
    {
      "name": "pointtransform",
      "description": "Returns a point transform from a point index.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointtransform.html",
      "usage": [
        "matrix  pointtransform(<geometry>geometry, int pnt)"
      ]
    },
    {
      "name": "pointtransforms",
      "description": "Returns an array of point transforms from an array of point indices.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointtransforms.html",
      "usage": [
        "matrix [] pointtransforms(<geometry>geometry, int pnts[])",
        "matrix [] pointtransforms(<geometry>geometry)"
      ]
    },
    {
      "name": "pointtransformsrigid",
      "description": "Returns an array of rigid point transforms from an array of point indices.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointtransformsrigid.html",
      "usage": [
        "matrix [] pointtransformsrigid(<geometry>geometry, int pnts[])",
        "matrix [] pointtransformsrigid(<geometry>geometry)"
      ]
    },
    {
      "name": "prim",
      "description": "Reads a primitive attribute value from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/prim.html",
      "usage": [
        "<type> prim(<geometry>geometry, string attribute_name, int primnumber)",
        "<type>[] prim(<geometry>geometry, string attribute_name, int primnumber)"
      ]
    },
    {
      "name": "primarclen",
      "description": "Evaluates the length of an arc on a primitive using parametric uv coordinates.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primarclen.html",
      "usage": [
        "float  primarclen(<geometry>geometry, vector2 uv1, vector2 uv2, int prim_num)",
        "float  primarclen(<geometry>geometry, vector2 uv1, vector2 uv2, int prim_num, int divs)",
        "float  primarclen(<geometry>geometry, vector2 uv1, vector2 uv2, int prim_num, int divs, int primuvmode)",
        "float  primarclen(<geometry>geometry, vector2 uv1, vector2 uv2, int prim_num, int divs, int primuvmode, float primuvtol)"
      ]
    },
    {
      "name": "prim_attribute",
      "description": "Interpolates the value of an attribute at a certain parametric (u, v) position and copies it into a variable.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/prim_attribute.html",
      "usage": [
        "int  prim_attribute(<geometry>geometry, <type>&value, string attribute_name, int prim_number, float u, float v)",
        "int  prim_attribute(<geometry>geometry, <type>&value[], string attribute_name, int prim_number, float u, float v)",
        "int  prim_attribute(<geometry>geometry, <type>&value, string attribute_name, int prim_number, vector uvw)",
        "int  prim_attribute(<geometry>geometry, <type>&value[], string attribute_name, int prim_number, vector uvw)"
      ]
    },
    {
      "name": "primattribsize",
      "description": "Returns the size of a geometry prim attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primattribsize.html",
      "usage": [
        "int  primattribsize(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "primattrib",
      "description": "Reads a primitive attribute value from a geometry, outputting a success flag.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primattrib.html",
      "usage": [
        "<type> primattrib(<geometry>geometry, string attribute_name, int prim, int &success)",
        "<type>[] primattrib(<geometry>geometry, string attribute_name, int prim, int &success)"
      ]
    },
    {
      "name": "primattribtype",
      "description": "Returns the type of a geometry prim attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primattribtype.html",
      "usage": [
        "int  primattribtype(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "primattribtypeinfo",
      "description": "Returns the type info of a geometry attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primattribtypeinfo.html",
      "usage": [
        "string  primattribtypeinfo(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "priminteriorweights",
      "description": "Finds the indices and weightings of the vertices that will compute an\ninterior point given the UVW coordinates.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/priminteriorweights.html",
      "usage": [
        "int  priminteriorweights(<geometry>geometry, int prim_num, vector uvw, int &verts[], float &weights[])"
      ]
    },
    {
      "name": "primduv",
      "description": "Returns position derivative on a primitive at a certain parametric (u, v) position.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primduv.html",
      "usage": [
        "vector  primduv(<geometry>geometry, int prim_number, vector2 uv, int du, int dv)"
      ]
    },
    {
      "name": "primuv",
      "description": "Interpolates the value of an attribute at a certain parametric (uvw) position.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primuv.html",
      "usage": [
        "<type> primuv(<geometry>geometry, string attribute_name, int prim_num, vector uvw)",
        "<type>[] primuv(<geometry>geometry, string attribute_name, int prim_num, vector uvw)"
      ]
    },
    {
      "name": "primintrinsic",
      "description": "Reads a primitive intrinsic from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primintrinsic.html",
      "usage": [
        "<type> primintrinsic(<geometry>geometry, string intrinsic_name, int prim_num)",
        "<type>[] primintrinsic(<geometry>geometry, string intrinsic_name, int prim_num)"
      ]
    },
    {
      "name": "primuvconvert",
      "description": "Convert parametric UV locations on curve primitives between different spaces.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primuvconvert.html",
      "usage": [
        "vector2  primuvconvert(<geometry>geometry, vector2 uv, int prim_num, int mode)",
        "vector2  primuvconvert(<geometry>geometry, vector2 uv, int prim_num, int mode, float tolerance)",
        "float  primuvconvert(<geometry>geometry, float uv, int prim_num, int mode)",
        "float  primuvconvert(<geometry>geometry, float uv, int prim_num, int mode, float tolerance)"
      ]
    },
    {
      "name": "removedetailattrib",
      "description": "Removes a detail attribute from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removedetailattrib.html",
      "usage": [
        "int  removedetailattrib(int geohandle, string name)"
      ]
    },
    {
      "name": "removepointgroup",
      "description": "Removes a point group from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removepointgroup.html",
      "usage": [
        "int  removepointgroup(int geohandle, string name)"
      ]
    },
    {
      "name": "removeprimattrib",
      "description": "Removes a primitive attribute from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removeprimattrib.html",
      "usage": [
        "int  removeprimattrib(int geohandle, string name)"
      ]
    },
    {
      "name": "removepointattrib",
      "description": "Removes a point attribute from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removepointattrib.html",
      "usage": [
        "int  removepointattrib(int geohandle, string name)"
      ]
    },
    {
      "name": "removeprimgroup",
      "description": "Removes a primitive group from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removeprimgroup.html",
      "usage": [
        "int  removeprimgroup(int geohandle, string name)"
      ]
    },
    {
      "name": "setattrib",
      "description": "Writes an attribute value to geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setattrib.html",
      "usage": [
        "int  setattrib(int geohandle, string attribclass, string attribute_name, int element_num, int vertex_num, <type>value, string mode=\"set\")",
        "int  setattrib(int geohandle, string attribclass, string attribute_name, int element_num, int vertex_num, <type>value[], string mode=\"set\")"
      ]
    },
    {
      "name": "removevertexattrib",
      "description": "Removes a vertex attribute from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removevertexattrib.html",
      "usage": [
        "int  removevertexattrib(int geohandle, string name)"
      ]
    },
    {
      "name": "removevertexgroup",
      "description": "Removes a vertex group from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removevertexgroup.html",
      "usage": [
        "int  removevertexgroup(int geohandle, string name)"
      ]
    },
    {
      "name": "setattribtypeinfo",
      "description": "Sets the meaning of an attribute in geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setattribtypeinfo.html",
      "usage": [
        "int  setattribtypeinfo(int geohandle, string attribclass, string name, string typeinfo)"
      ]
    },
    {
      "name": "setpointattrib",
      "description": "Sets a point attribute in a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setpointattrib.html",
      "usage": [
        "int  setpointattrib(int geohandle, string name, int point_num, <type>value, string mode=\"set\")",
        "int  setpointattrib(int geohandle, string name, int point_num, <type>value[], string mode=\"set\")"
      ]
    },
    {
      "name": "setpointlocaltransforms",
      "description": "Sets an array of point local transforms at the given point indices.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setpointlocaltransforms.html",
      "usage": [
        "int  setpointlocaltransforms(int geohandle, int pnts[], matrix transforms[])"
      ]
    },
    {
      "name": "setdetailintrinsic",
      "description": "Sets the value of a writeable detail intrinsic attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setdetailintrinsic.html",
      "usage": [
        "int  setdetailintrinsic(int geohandle, string name, <type>value, string mode=\"set\")",
        "int  setdetailintrinsic(int geohandle, string name, <type>value[], string mode=\"set\")"
      ]
    },
    {
      "name": "setpointtransform",
      "description": "Sets the world space transform of a given point",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setpointtransform.html",
      "usage": [
        "int  setpointtransform(int geohandle, int pt, matrix transform)",
        "int  setpointtransform(int geohandle, int pt, matrix transform, int constrain)"
      ]
    },
    {
      "name": "setdetailattrib",
      "description": "Sets a detail attribute in a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setdetailattrib.html",
      "usage": [
        "int  setdetailattrib(int geohandle, string name, <type>value, string mode=\"set\")",
        "int  setdetailattrib(int geohandle, string name, <type>value[], string mode=\"set\")"
      ]
    },
    {
      "name": "setpointtransforms",
      "description": "Sets an array of point transforms at the given point indices.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setpointtransforms.html",
      "usage": [
        "int  setpointtransforms(int geohandle, int pnts[], matrix transforms[])",
        "int  setpointtransforms(int geohandle, int pnts[], matrix transforms[], int constrain)"
      ]
    },
    {
      "name": "setprimattrib",
      "description": "Sets a primitive attribute in a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setprimattrib.html",
      "usage": [
        "int  setprimattrib(int geohandle, string name, int prim_num, <type>value, string mode=\"set\")",
        "int  setprimattrib(int geohandle, string name, int prim_num, <type>value[], string mode=\"set\")"
      ]
    },
    {
      "name": "setprimintrinsic",
      "description": "Sets the value of a writeable primitive intrinsic attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setprimintrinsic.html",
      "usage": [
        "int  setprimintrinsic(int geohandle, string name, int prim_num, <type>value, string mode=\"set\")",
        "int  setprimintrinsic(int geohandle, string name, int prim_num, <type>value[], string mode=\"set\")"
      ]
    },
    {
      "name": "uniqueval",
      "description": "Returns one of the set of unique values across all values for an int or string attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/uniqueval.html",
      "usage": [
        "int|string uniqueval(<geometry>geometry, string attribclass, string attribute_name, int which)"
      ]
    },
    {
      "name": "setvertexattrib",
      "description": "Sets a vertex attribute in a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setvertexattrib.html",
      "usage": [
        "int  setvertexattrib(int geohandle, string name, int prim_num, int vertex_num, <type>value, string mode=\"set\")",
        "int  setvertexattrib(int geohandle, string name, int prim_num, int vertex_num, <type>value[], string mode=\"set\")"
      ]
    },
    {
      "name": "uniquevals",
      "description": "Returns the set of unique values across all values for an int or string attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/uniquevals.html",
      "usage": [
        "int [] uniquevals(<geometry>geometry, string attribclass, string attribute_name)",
        "string [] uniquevals(<geometry>geometry, string attribclass, string attribute_name)"
      ]
    },
    {
      "name": "vertexattrib",
      "description": "Reads a vertex attribute value from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexattrib.html",
      "usage": [
        "<type> vertexattrib(<geometry>geometry, string attribute_name, int linear_vertex_index, int &success)",
        "<type>[] vertexattrib(<geometry>geometry, string attribute_name, int linear_vertex_index, int &success)"
      ]
    },
    {
      "name": "vertexattribsize",
      "description": "Returns the size of a geometry vertex attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexattribsize.html",
      "usage": [
        "int  vertexattribsize(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "vertexattribtype",
      "description": "Returns the type of a geometry vertex attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexattribtype.html",
      "usage": [
        "int  vertexattribtype(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "vertex",
      "description": "Reads a vertex attribute value from a geometry.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertex.html",
      "usage": [
        "<type> vertex(<geometry>geometry, string attribute_name, int linear_vertex_index)",
        "<type>[] vertex(<geometry>geometry, string attribute_name, int linear_vertex_index)",
        "<type> vertex(<geometry>geometry, string attribute_name, int prim_num, int vertex_num)",
        "<type>[] vertex(<geometry>geometry, string attribute_name, int prim_num, int vertex_num)"
      ]
    },
    {
      "name": "uvsample",
      "description": "Interpolates the value of an attribute at certain UV coordinates using a UV attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/uvsample.html",
      "usage": [
        "<type> uvsample(<geometry>geometry, string attr_name, string uv_attr_name, vector uvw)",
        "<type>[] uvsample(<geometry>geometry, string attr_name, string uv_attr_name, vector uvw)",
        "<type> uvsample(<geometry>geometry, string primgroup, string attr_name, string uv_attr_name, vector uvw)",
        "<type>[] uvsample(<geometry>geometry, string primgroup, string attr_name, string uv_attr_name, vector uvw)"
      ]
    },
    {
      "name": "vertexattribtypeinfo",
      "description": "Returns the type info of a geometry attribute.",
      "category": "Attributes and Intrinsics",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexattribtypeinfo.html",
      "usage": [
        "string  vertexattribtypeinfo(<geometry>geometry, string attribute_name)"
      ]
    },
    {
      "name": "albedo",
      "description": "Returns the albedo (percentage of reflected light) for a bsdf given the outgoing light direction.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/albedo.html",
      "usage": [
        "vector  albedo(bsdf b, ...)",
        "vector  albedo(bsdf b, int mask, ...)",
        "vector  albedo(bsdf b, vector viewer, ...)",
        "vector  albedo(bsdf b, vector viewer, int mask, ...)"
      ]
    },
    {
      "name": "ashikhmin",
      "description": "Returns a specular BSDF using the Ashikhmin shading model.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ashikhmin.html",
      "usage": [
        "bsdf  ashikhmin(float exponentx, float exponenty, vector framex, vector framey, ...)",
        "bsdf  ashikhmin(vector nml, float exponentx, float exponenty, vector framex, vector framey, ...)"
      ]
    },
    {
      "name": "blinn",
      "description": "Returns a Blinn BSDF or computes Blinn shading.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/blinn.html",
      "usage": [
        "bsdf  blinn(float exponent, ...)",
        "bsdf  blinn(vector nml, float exponent, ...)",
        "vector  blinn(vector nml, vector V, float roughness, ...)"
      ]
    },
    {
      "name": "chiang_fur",
      "description": "Returns a chiang_fur BSDF.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chiang_fur.html",
      "usage": [
        "bsdf  chiang_fur(vector nn, vector tanV, float mask, float cuticle, float R_v, float R_s, float TT_v, float TT_s, float TRT_v, float TRT_s, float shift, vector absorption_coeff, float ior, float R2_v, float R2_s, vector R2_color, ...)"
      ]
    },
    {
      "name": "cone",
      "description": "Returns a cone reflection BSDF.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cone.html",
      "usage": [
        "bsdf  cone(vector normal, vector dir, float angle, ...)",
        "bsdf  cone(vector dir, float angle, ...)"
      ]
    },
    {
      "name": "chiang",
      "description": "Returns a chiang BSDF.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chiang.html",
      "usage": [
        "bsdf  chiang(vector nn, vector tanV, float R_v, float R_s, float TT_v, float TT_s, float TRT_v, float TRT_s, float shift, vector absorption_coeff, float ior, ...)"
      ]
    },
    {
      "name": "eval_bsdf",
      "description": "Evaluates a bsdf given two vectors.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/eval_bsdf.html",
      "usage": [
        "vector  eval_bsdf(bsdf b, vector viewer, vector light, ...)",
        "vector  eval_bsdf(bsdf b, vector viewer, vector light, int mask, ...)",
        "vector  eval_bsdf(bsdf b, vector viewer, vector light, float &pdf, int mask, ...)",
        "vector  eval_bsdf(bsdf b, vector viewer, vector light, vector normal, ...)",
        "vector  eval_bsdf(bsdf b, vector viewer, vector light, vector normal, int mask, ...)",
        "vector  eval_bsdf(bsdf b, vector viewer, vector light, vector normal, float &pdf, int mask, ...)"
      ]
    },
    {
      "name": "cvex_bsdf",
      "description": "Creates a bsdf object from two CVEX shader strings.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cvex_bsdf.html",
      "usage": [
        "bsdf  cvex_bsdf(string eval_cvex_shader, string sampler_cvex_shader, ...)",
        "cvex_bsdf()",
        "cvex_bsdf()"
      ]
    },
    {
      "name": "diffuse",
      "description": "Returns a diffuse BSDF or computes diffuse shading.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/diffuse.html",
      "usage": [
        "bsdf  diffuse(...)",
        "bsdf  diffuse(float roughness, ...)",
        "bsdf  diffuse(vector nml, ...)",
        "bsdf  diffuse(vector nml, float roughness, ...)",
        "bsdf  diffuse(vector nml, vector geo_normal, ...)",
        "bsdf  diffuse(vector nml, vector geo_normal, float roughness, ...)",
        "diffuse(vector nml)",
        "vector  diffuse(vector nml, ...)",
        "vector  diffuse(vector nml, vector V, float roughness, ...)"
      ]
    },
    {
      "name": "getbounces",
      "description": "",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getbounces.html",
      "usage": [
        "int  getbounces(bsdf b)"
      ]
    },
    {
      "name": "henyeygreenstein",
      "description": "Returns an anisotropic volumetric BSDF, which can scatter light forward or backward.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/henyeygreenstein.html",
      "usage": [
        "bsdf  henyeygreenstein(float anisotropic_bias, ...)"
      ]
    },
    {
      "name": "isotropic",
      "description": "Returns an isotropic BSDF, which scatters light equally in all directions.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isotropic.html",
      "usage": [
        "bsdf  isotropic(...)"
      ]
    },
    {
      "name": "ggx",
      "description": "Returns a ggx BSDF.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ggx.html",
      "usage": [
        "bsdf  ggx(vector ng, vector nn, vector xg, vector yg, vector F0, vector F90, float alphax, float alphay, int masking, int fresblend, float eta, float reflect, float refract, int reflectmask, int refractmask, float dispersion, ...)"
      ]
    },
    {
      "name": "hair",
      "description": "Returns a BSDF for shading hair.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hair.html",
      "usage": [
        "bsdf  hair(vector N, vector tip, float lobe_shift, float lobe_width_lon, ...)",
        "bsdf  hair(vector N, vector tip, float lobe_shift, float lobe_width_lon, float lobe_with_azi, ...)",
        "bsdf  hair(vector N, vector tip, float lobe_shift, float lobe_width_lon, float lobe_with_azi, float glint_shift, float glint_intensity, ...)"
      ]
    },
    {
      "name": "mask_bsdf",
      "description": "Returns new BSDF that only includes the components specified by the mask.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/mask_bsdf.html",
      "usage": [
        "bsdf  mask_bsdf(bsdf b, int mask)"
      ]
    },
    {
      "name": "phong",
      "description": "Returns a Phong BSDF or computes Phong shading.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/phong.html",
      "usage": [
        "bsdf  phong(float exponent, ...)",
        "bsdf  phong(vector nml, float exponent, ...)",
        "vector  phong(vector nml, vector V, float shinyness, ...)"
      ]
    },
    {
      "name": "normal_bsdf",
      "description": "Returns the normal for the diffuse component of a BSDF.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/normal_bsdf.html",
      "usage": [
        "vector  normal_bsdf(bsdf b)"
      ]
    },
    {
      "name": "phonglobe",
      "description": "",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/phonglobe.html",
      "usage": [
        "bsdf  phonglobe(vector dir, float exponent, ...)",
        "bsdf  phonglobe(vector nml, vector dir, float exponent, ...)",
        "bsdf  phonglobe(vector dir, float exponentx, float exponenty, vector framex, vector framey, ...)",
        "bsdf  phonglobe(vector nml, vector dir, float exponentx, float exponenty, vector framex, vector framey, ...)"
      ]
    },
    {
      "name": "sample_bsdf",
      "description": "Samples a BSDF.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_bsdf.html",
      "usage": [
        "void  sample_bsdf(bsdf F, vector viewer_u, vector &dir, vector &eval, int &type, float sx, float sy, ...)",
        "void  sample_bsdf(bsdf F, vector viewer_u, vector &dir, vector &eval, int &type, float sx, float sy, int mask, ...)",
        "void  sample_bsdf(bsdf F, vector viewer_u, vector &dir, vector &eval, float &pdf, int &type, float sx, float sy, ...)",
        "void  sample_bsdf(bsdf F, vector viewer_u, vector &dir, vector &eval, float &pdf, int &type, float sx, float sy, int mask, ...)",
        "void  sample_bsdf(bsdf b, vector viewer_u, vector normal_v, int &flags, vector &dir, vector &eval, float &pdf, int &type, float sx, float sy, int mask, ...)"
      ]
    },
    {
      "name": "solid_angle",
      "description": "Computes the solid angle (in steradians) a BSDF function subtends.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/solid_angle.html",
      "usage": [
        "float  solid_angle(bsdf b, int mask)"
      ]
    },
    {
      "name": "sssapprox",
      "description": "Creates an approximate SSS BSDF.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sssapprox.html",
      "usage": [
        "bsdf  sssapprox(vector albedo, float meanFreePath, float roughness, float scale, ...)"
      ]
    },
    {
      "name": "split_bsdf",
      "description": "Splits a bsdf into its component lobes.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/split_bsdf.html",
      "usage": [
        "void  split_bsdf(bsdf &lobes[], bsdf source, float &weights[])",
        "void  split_bsdf(bsdf &lobes[], bsdf source, float &weights[], int mask)",
        "void  split_bsdf(bsdf &lobes[], bsdf source, float &weights[], int mask, int type)",
        "void  split_bsdf(bsdf &lobes[], bsdf source, float &weights[], int mask, int type, float u)",
        "void  split_bsdf(bsdf &lobes[], bsdf source, float &weights[], int mask, int type, float u, float cdf[])"
      ]
    },
    {
      "name": "specular",
      "description": "Returns a specular BSDF or computes specular shading.",
      "category": "BSDFs",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/specular.html",
      "usage": [
        "bsdf  specular(vector dir, ...)",
        "vector  specular(vector nml, vector V, float roughness, ...)"
      ]
    },
    {
      "name": "chadd",
      "description": "Adds new channels to a CHOP node.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chadd.html",
      "usage": [
        "int  chadd(string channel_names)",
        "int  chadd(string channel_names[])"
      ]
    },
    {
      "name": "chattr",
      "description": "Reads from a CHOP attribute.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chattr.html",
      "usage": [
        "<type> chattr(string attrname, int &success)",
        "<type> chattr(int opinput, string attrname, int &success)",
        "<type> chattr(string attrname, int channel, int &success)",
        "<type> chattr(int opinput, string attrname, int channel, int &success)",
        "<type> chattr(string attrname, int channel, int sample, int &success)",
        "<type> chattr(int opinput, string attrname, int channel, int sample, int &success)",
        "<type> chattr(string attrclass, string attrname, int channel, int sample, int &success)",
        "<type> chattr(int opinput, string attribclass, string attrname, int channel, int sample, int &success)"
      ]
    },
    {
      "name": "chattrnames",
      "description": "Reads CHOP attribute names of a given attribute class from a CHOP input.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chattrnames.html",
      "usage": [
        "string [] chattrnames(int opinput, string attribclass)",
        "string [] chattrnames(string attrclass)"
      ]
    },
    {
      "name": "chend",
      "description": "Returns the sample number of the last sample in a given CHOP input.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chend.html",
      "usage": [
        "int  chend(int opinput=0)"
      ]
    },
    {
      "name": "chendf",
      "description": "Returns the frame corresponding to the last sample of the input specified.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chendf.html",
      "usage": [
        "float  chendf(int opinput=0)"
      ]
    },
    {
      "name": "chendt",
      "description": "Returns the time corresponding to the last sample of the input\nspecified.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chendt.html",
      "usage": [
        "float  chendt(int opinput=0)"
      ]
    },
    {
      "name": "chinput",
      "description": "Returns the value of a channel at the specified sample.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chinput.html",
      "usage": [
        "<type> chinput(int channel_index, float|intsample)",
        "<type> chinput(int opinput, int channel_index, float|intsample)",
        "<type> chinput(string channel_name, float|intsample)",
        "<type> chinput(int opinput, string channel_name, float|intsample)",
        "int  chinput(int channel_index, float|intsample, vector &t, vector &r, vector &s)",
        "int  chinput(int opinput, int channel_index, float|intsample, vector &t, vector &r, vector &s)",
        "int  chinput(string channel_name, float|intsample, vector &t, vector &r, vector &s)",
        "int  chinput(int opinput, string channel_name, float|intsample, vector &t, vector &r, vector &s)"
      ]
    },
    {
      "name": "chindex",
      "description": "Returns the channel index from a input given a channel name.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chindex.html",
      "usage": [
        "int  chindex(int opinput, string name)",
        "int  chindex(string name)",
        "int [] chindex(string names[])"
      ]
    },
    {
      "name": "chnumchan",
      "description": "Returns the number of channels in the input specified.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chnumchan.html",
      "usage": [
        "int  chnumchan()",
        "int  chnumchan(int opinput)"
      ]
    },
    {
      "name": "chinputlimits",
      "description": "Computes the minimum and maximum value of samples in an input channel.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chinputlimits.html",
      "usage": [
        "int  chinputlimits(int opinput, int channel, float &channel_min, float &channel_max)"
      ]
    },
    {
      "name": "chnames",
      "description": "Returns all the CHOP channel names of a given CHOP input.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chnames.html",
      "usage": [
        "string [] chnames()",
        "string [] chnames(int opinput)"
      ]
    },
    {
      "name": "chop",
      "description": "Returns the value of a CHOP channel at the specified sample.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chop.html",
      "usage": [
        "float  chop(string filename, int|stringchannel, float|intsample)",
        "vector2  chop(string filename, int|stringchannel, float|intsample)",
        "vector  chop(string filename, int|stringchannel, float|intsample)",
        "vector4  chop(string filename, int|stringchannel, float|intsample)",
        "matrix  chop(string filename, int|stringchannel, float|intsample)"
      ]
    },
    {
      "name": "choplocal",
      "description": "Returns the value of a CHOP local transform channel at the specified sample.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/choplocal.html",
      "usage": [
        "matrix  choplocal(string filename, int|stringchannel, float|intsample)"
      ]
    },
    {
      "name": "choplocalt",
      "description": "Returns the value of a CHOP local transform channel at the specified sample and evaluation time.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/choplocalt.html",
      "usage": [
        "matrix  choplocalt(string filename, int|stringchannel, float|intsample, float time)"
      ]
    },
    {
      "name": "chrate",
      "description": "Returns the sample rate of the input specified.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chrate.html",
      "usage": [
        "float  chrate()",
        "float  chrate(int opinput)"
      ]
    },
    {
      "name": "chreadbuf",
      "description": "Returns the value of CHOP context temporary buffer at the specified index.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chreadbuf.html",
      "usage": [
        "float  chreadbuf(int index)"
      ]
    },
    {
      "name": "chopt",
      "description": "Returns the value of a CHOP channel at the specified sample and evaluation time.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chopt.html",
      "usage": [
        "float  chopt(string filename, int|stringchannel, float|intsample, float time)",
        "vector2  chopt(string filename, int|stringchannel, float|intsample, float time)",
        "vector  chopt(string filename, int|stringchannel, float|intsample, float time)",
        "vector4  chopt(string filename, int|stringchannel, float|intsample, float time)",
        "matrix  chopt(string filename, int|stringchannel, float|intsample, float time)"
      ]
    },
    {
      "name": "chremove",
      "description": "Removes channels from a CHOP node.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chremove.html",
      "usage": [
        "int  chremove(int channel_index)",
        "int  chremove(int channel_indices[])",
        "int  chremove(string channel_name)",
        "int  chremove(string channel_names[])"
      ]
    },
    {
      "name": "chrename",
      "description": "Renames a CHOP channel.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chrename.html",
      "usage": [
        "int  chrename(int channel_index, string new_name)",
        "int  chrename(string channel_name, string new_name)"
      ]
    },
    {
      "name": "chremoveattr",
      "description": "Removes a CHOP attribute.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chremoveattr.html",
      "usage": [
        "int  chremoveattr(string attrclass, string attrname)",
        "int  chremoveattr(string attrclass, string attrnames[])",
        "int  chremoveattr(string attrname)",
        "int  chremoveattr(string attrnames[])"
      ]
    },
    {
      "name": "chsetlength",
      "description": "Sets the length of the CHOP channel data.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chsetlength.html",
      "usage": [
        "int  chsetlength(int clip_length)"
      ]
    },
    {
      "name": "chresizebuf",
      "description": "Resize the CHOP context temporary buffer",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chresizebuf.html",
      "usage": [
        "int  chresizebuf(int size)"
      ]
    },
    {
      "name": "chsetattr",
      "description": "Sets the value of a CHOP attribute.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chsetattr.html",
      "usage": [
        "int  chsetattr(string attrclass, string attrname, int channel, int sample, <type>value)",
        "int  chsetattr(string attrname, int channel, int sample, <type>value)"
      ]
    },
    {
      "name": "chsetrate",
      "description": "Sets the sampling rate of the CHOP channel data.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chsetrate.html",
      "usage": [
        "int  chsetrate(int clip_rate)",
        "int  chsetrate(float clip_rate)"
      ]
    },
    {
      "name": "chsetstart",
      "description": "Sets the CHOP start sample in the channel data.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chsetstart.html",
      "usage": [
        "int  chsetstart(int start)",
        "int  chsetstart(float start)"
      ]
    },
    {
      "name": "chstartf",
      "description": "Returns the frame corresponding to the first sample of the input\nspecified.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chstartf.html",
      "usage": [
        "float  chstartf()",
        "float  chstartf(int opinput)"
      ]
    },
    {
      "name": "chstart",
      "description": "Returns the start sample of the input specified.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chstart.html",
      "usage": [
        "int  chstart()",
        "int  chstart(int opinput)"
      ]
    },
    {
      "name": "chstartt",
      "description": "Returns the time corresponding to the first sample of the input\nspecified.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chstartt.html",
      "usage": [
        "float  chstartt()",
        "float  chstartt(int opinput)"
      ]
    },
    {
      "name": "chwritebuf",
      "description": "Writes a value of CHOP context temporary buffer at the specified index.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chwritebuf.html",
      "usage": [
        "int  chwritebuf(int index, float value)",
        "int  chwritebuf(int index, vector t, vector r, vector s)"
      ]
    },
    {
      "name": "isframes",
      "description": "Returns 1 if the Vex CHOP\u2019s Unit Menu is currently set to 'frames', 0\notherwise.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isframes.html",
      "usage": [
        "int  isframes()"
      ]
    },
    {
      "name": "issamples",
      "description": "Returns 1 if the Vex CHOP\u2019s Unit Menu is currently set to 'samples',\n0 otherwise.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/issamples.html",
      "usage": [
        "int  issamples()"
      ]
    },
    {
      "name": "isseconds",
      "description": "Returns 1 if the Vex CHOP\u2019s Unit Menu is currently set to 'seconds',\n0 otherwise.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isseconds.html",
      "usage": [
        "int  isseconds()"
      ]
    },
    {
      "name": "chprim_clear",
      "description": "Clears a channel primitive, removing all keys.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_clear.html",
      "usage": [
        "int  chprim_clear(int geohandle, int prim)"
      ]
    },
    {
      "name": "ninputs",
      "description": "Returns the number of inputs.",
      "category": "CHOP",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ninputs.html",
      "usage": [
        "int  ninputs()"
      ]
    },
    {
      "name": "chprim_destroykey",
      "description": "Destroy an existing key from a channel primitive.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_destroykey.html",
      "usage": [
        "int  chprim_destroykey(int geohandle, int prim, float time)"
      ]
    },
    {
      "name": "chprim_insertkey",
      "description": "Insert a key into a channel primitive.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_insertkey.html",
      "usage": [
        "int  chprim_insertkey(int geohandle, int prim, float time)"
      ]
    },
    {
      "name": "chprim_eval",
      "description": "Evaluate a channel primitive at the given time.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_eval.html",
      "usage": [
        "float  chprim_eval(<geometry>geometry, int prim, float time)"
      ]
    },
    {
      "name": "chprim_end",
      "description": "Get the end time of a channel primitive.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_end.html",
      "usage": [
        "float  chprim_end(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "chprim_keycount",
      "description": "Get the number of keys in a channel primitive.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_keycount.html",
      "usage": [
        "int  chprim_keycount(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "chprim_length",
      "description": "Get the length of a channel primitive.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_length.html",
      "usage": [
        "float  chprim_length(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "chprim_keyvalues",
      "description": "Get the key values of a channel primitive.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_keyvalues.html",
      "usage": [
        "float [] chprim_keyvalues(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "chprim_keytimes",
      "description": "Get the key times of a channel primitive.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_keytimes.html",
      "usage": [
        "float [] chprim_keytimes(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "chprim_setkeyslope",
      "description": "Set the slope of a channel primitive key.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_setkeyslope.html",
      "usage": [
        "int  chprim_setkeyslope(int geohandle, int prim, float time, float slope)",
        "int  chprim_setkeyslope(int geohandle, int prim, float time, float slope, int half)"
      ]
    },
    {
      "name": "chprim_setkeyaccel",
      "description": "Set the acceleration of a channel primitive key.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_setkeyaccel.html",
      "usage": [
        "int  chprim_setkeyaccel(int geohandle, int prim, float time, float accel)",
        "int  chprim_setkeyaccel(int geohandle, int prim, float time, float accel, int half)"
      ]
    },
    {
      "name": "chprim_start",
      "description": "Get the start time of a channel primitive.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_start.html",
      "usage": [
        "float  chprim_start(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "chprim_setkeyvalue",
      "description": "Set the value of a channel primitive key.",
      "category": "Channel Primitives",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chprim_setkeyvalue.html",
      "usage": [
        "int  chprim_setkeyvalue(int geohandle, int prim, float time, float value)",
        "int  chprim_setkeyvalue(int geohandle, int prim, float time, float value, int half)"
      ]
    },
    {
      "name": "blackbody",
      "description": "Compute the color value of an incandescent black body.",
      "category": "color",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/blackbody.html",
      "usage": [
        "vector  blackbody(float temperature, float luminance)"
      ]
    },
    {
      "name": "ctransform",
      "description": "Transforms between color spaces.",
      "category": "color",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ctransform.html",
      "usage": [
        "vector  ctransform(string fromspace, string tospace, vector clr)",
        "vector  ctransform(string tospace, vector clr)"
      ]
    },
    {
      "name": "atof",
      "description": "Converts a string to a float.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/atof.html",
      "usage": [
        "float  atof(string str)"
      ]
    },
    {
      "name": "luminance",
      "description": "Compute the luminance of the RGB color specified by the parameters.",
      "category": "color",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/luminance.html",
      "usage": [
        "float  luminance(vector rgb)",
        "float  luminance(vector4 rgb)",
        "float  luminance(float r, float g, float b)"
      ]
    },
    {
      "name": "atoi",
      "description": "Converts a string to an integer.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/atoi.html",
      "usage": [
        "int  atoi(string str)",
        "int  atoi(string str, int base)"
      ]
    },
    {
      "name": "hsvtorgb",
      "description": "Convert HSV color space into RGB color space.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hsvtorgb.html",
      "usage": [
        "vector  hsvtorgb(vector hsv)",
        "vector  hsvtorgb(float hue, float sat, float val)"
      ]
    },
    {
      "name": "quaterniontoeuler",
      "description": "Creates a euler angle representing a quaternion.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/quaterniontoeuler.html",
      "usage": [
        "vector  quaterniontoeuler(vector4 orient, int order)"
      ]
    },
    {
      "name": "qconvert",
      "description": "Converts a quaternion represented by a vector4 to a matrix3 representation.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/qconvert.html",
      "usage": [
        "matrix3  qconvert(vector4 quaternion)",
        "matrix  qconvert(vector4 quaternion, vector offset)",
        "vector  qconvert(vector4 quaternion)"
      ]
    },
    {
      "name": "eulertoquaternion",
      "description": "Creates a vector4 representing a quaternion from euler angles.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/eulertoquaternion.html",
      "usage": [
        "vector4  eulertoquaternion(vector rotations, int order)"
      ]
    },
    {
      "name": "cracktransform",
      "description": "Depending on the value of c, returns the translate (c=0), rotate\n(c=1), scale (c=2), or shears (c=3)  component of the transform (xform).",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cracktransform.html",
      "usage": [
        "vector  cracktransform(int trs, int xyz, int c, vector pivot, vector pivot_rotate, matrix xform)",
        "vector  cracktransform(int trs, int xyz, int c, vector pivot, matrix xform)",
        "vector angles = radians(cracktransform(XFORM_TRS, XFORM_XYZ, 1, {0,0,0}, M));",
        "void  cracktransform(int trs, int xyz, vector pivot, vector pivot_rotate, matrix xform, vector &t, vector &r, vector &s, vector &shears)",
        "void  cracktransform(int trs, int xyz, vector pivot, matrix xform, vector &t, vector &r, vector &s)"
      ]
    },
    {
      "name": "degrees",
      "description": "Converts the argument from radians into degrees.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/degrees.html",
      "usage": [
        "float  degrees(float num_in_rads)",
        "vector2  degrees(vector2 nums_in_rads)",
        "vector  degrees(vector nums_in_rads)",
        "vector4  degrees(vector4 nums_in_rads)"
      ]
    },
    {
      "name": "rgbtohsv",
      "description": "Convert RGB color space to HSV color space.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/rgbtohsv.html",
      "usage": [
        "vector  rgbtohsv(vector rgb)",
        "vector  rgbtohsv(float r, float g, float b)"
      ]
    },
    {
      "name": "radians",
      "description": "Converts the argument from degrees into radians.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/radians.html",
      "usage": [
        "float  radians(float angle_in_degrees)",
        "<vector> radians(<vector>nums_in_degs)",
        "radians()"
      ]
    },
    {
      "name": "rgbtoxyz",
      "description": "Convert a linear sRGB triplet to CIE XYZ tristimulus values.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/rgbtoxyz.html",
      "usage": [
        "vector  rgbtoxyz(vector rgb)"
      ]
    },
    {
      "name": "serialize",
      "description": "Flattens an array of vector or matrix types into an array of floats.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/serialize.html",
      "usage": [
        "float [] serialize(<vector>vectors[])",
        "float [] serialize(<matrix>matrices[])"
      ]
    },
    {
      "name": "xyztorgb",
      "description": "Convert CIE XYZ tristimulus values to a linear sRGB triplet.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/xyztorgb.html",
      "usage": [
        "vector  xyztorgb(vector xyz)"
      ]
    },
    {
      "name": "unserialize",
      "description": "Turns a flat array of floats into an array of vectors or matrices.",
      "category": "Conversion",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/unserialize.html",
      "usage": [
        "<vector>[] unserialize(float values[])",
        "<matrix>[] unserialize(float values[])"
      ]
    },
    {
      "name": "agentaddclip",
      "description": "Add a clip into an agent\u2019s definition.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentaddclip.html",
      "usage": []
    },
    {
      "name": "agentchannelvalue",
      "description": "Returns the current value of an agent primitive\u2019s channel.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentchannelvalue.html",
      "usage": [
        "float  agentchannelvalue(<geometry>geometry, int prim, int channel)"
      ]
    },
    {
      "name": "agentchannelnames",
      "description": "Returns the names of the channels in an agent primitive\u2019s rig.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentchannelnames.html",
      "usage": [
        "string [] agentchannelnames(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentchannelcount",
      "description": "Returns the number of channels in an agent primitive\u2019s rig.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentchannelcount.html",
      "usage": [
        "int  agentchannelcount(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentchannelvalues",
      "description": "Returns the current values of an agent primitive\u2019s channels.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentchannelvalues.html",
      "usage": [
        "float [] agentchannelvalues(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentclipcatalog",
      "description": "Returns all of the animation clips that have been loaded for an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentclipcatalog.html",
      "usage": [
        "string [] agentclipcatalog(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentclipchannel",
      "description": "Finds the index of a channel in an agent\u2019s animation clip.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentclipchannel.html",
      "usage": [
        "int  agentclipchannel(<geometry>geometry, int prim, string clipname, string channel)",
        "int  agentclipchannel(<geometry>geometry, int prim, int clipindex, string channel)"
      ]
    },
    {
      "name": "agentclipchannelnames",
      "description": "Returns the names of the channels in an agent\u2019s animation clip.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentclipchannelnames.html",
      "usage": [
        "string [] agentclipchannelnames(<geometry>geometry, int prim, string clipname)",
        "string [] agentclipchannelnames(<geometry>geometry, int prim, int clipindex)"
      ]
    },
    {
      "name": "agentcliplayerblend",
      "description": "Blends values according to an agent\u2019s animation layers.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentcliplayerblend.html",
      "usage": [
        "float  agentcliplayerblend(float values[], float value_weights[], int value_layer_ids[], int layer_blend_modes[], float layer_weights[], int layer_parent_ids[])",
        "matrix  agentcliplayerblend(matrix values[], float value_weights[], int value_layer_ids[], int layer_blend_modes[], float layer_weights[], int layer_parent_ids[])"
      ]
    },
    {
      "name": "agentclipnames",
      "description": "Returns an agent primitive\u2019s current animation clips.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentclipnames.html",
      "usage": [
        "string [] agentclipnames(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentclipsamplelocal",
      "description": "Samples an agent\u2019s animation clip at a specific time.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentclipsamplelocal.html",
      "usage": [
        "matrix [] agentclipsamplelocal(<geometry>geometry, int prim, string clipname, float time)",
        "matrix [] agentclipsamplelocal(<geometry>geometry, int prim, int clipindex, float time)",
        "matrix  agentclipsamplelocal(<geometry>geometry, int prim, string clipname, float time, int transform)",
        "matrix  agentclipsamplelocal(<geometry>geometry, int prim, int clipindex, float time, int transform)"
      ]
    },
    {
      "name": "agentclipsample",
      "description": "Samples a channel of an agent\u2019s clip at a specific time.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentclipsample.html",
      "usage": [
        "float  agentclipsample(<geometry>geometry, int prim, string clipname, float time, int channel_index)",
        "float  agentclipsample(<geometry>geometry, int prim, string clipname, float time, string channel)",
        "float  agentclipsample(<geometry>geometry, int prim, int clipindex, float time, int channel_index)",
        "float  agentclipsample(<geometry>geometry, int prim, int clipindex, float time, string channel)"
      ]
    },
    {
      "name": "agentcliplength",
      "description": "Returns the length (in seconds) of an agent\u2019s animation clip.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentcliplength.html",
      "usage": [
        "float  agentcliplength(<geometry>geometry, int prim, string clipname)",
        "float  agentcliplength(<geometry>geometry, int prim, int clipindex)"
      ]
    },
    {
      "name": "agentclipsampleworld",
      "description": "Samples an agent\u2019s animation clip at a specific time.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentclipsampleworld.html",
      "usage": [
        "matrix [] agentclipsampleworld(<geometry>geometry, int prim, string clipname, float time)",
        "matrix [] agentclipsampleworld(<geometry>geometry, int prim, int clipindex, float time)",
        "matrix  agentclipsampleworld(<geometry>geometry, int prim, string clipname, float time, int transform)",
        "matrix  agentclipsampleworld(<geometry>geometry, int prim, int clipindex, float time, int transform)"
      ]
    },
    {
      "name": "agentclipstarttime",
      "description": "Returns the start time (in seconds) of an agent\u2019s animation clip.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentclipstarttime.html",
      "usage": [
        "float  agentclipstarttime(<geometry>geometry, int prim, string clipname)",
        "float  agentclipstarttime(<geometry>geometry, int prim, int clipindex)"
      ]
    },
    {
      "name": "agentclipsamplerate",
      "description": "Returns the sample rate of an agent\u2019s animation clip.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentclipsamplerate.html",
      "usage": [
        "float  agentclipsamplerate(<geometry>geometry, int prim, string clipname)",
        "float  agentclipsamplerate(<geometry>geometry, int prim, int clipindex)"
      ]
    },
    {
      "name": "agentcliptimes",
      "description": "Returns the current times for an agent primitive\u2019s animation clips.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentcliptimes.html",
      "usage": [
        "float [] agentcliptimes(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentcliptransformgroups",
      "description": "Returns the transform groups for an agent primitive\u2019s current animation clips.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentcliptransformgroups.html",
      "usage": [
        "string [] agentcliptransformgroups(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentclipweights",
      "description": "Returns the blend weights for an agent primitive\u2019s animation clips.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentclipweights.html",
      "usage": [
        "float [] agentclipweights(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentcollisionlayer",
      "description": "Returns the name of the collision layer of an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentcollisionlayer.html",
      "usage": []
    },
    {
      "name": "agentcollisionlayers",
      "description": "Returns the names of an agent primitive\u2019s collision layers.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentcollisionlayers.html",
      "usage": [
        "string [] agentcollisionlayers(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentcurrentlayer",
      "description": "Returns the name of the current layer of an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentcurrentlayer.html",
      "usage": []
    },
    {
      "name": "agentcurrentlayers",
      "description": "Returns the names of an agent primitive\u2019s current layers.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentcurrentlayers.html",
      "usage": [
        "string [] agentcurrentlayers(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentfindlayer",
      "description": "Finds the index of a layer in an agent\u2019s definition.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentfindlayer.html",
      "usage": [
        "int  agentfindlayer(<geometry>geometry, int prim, string layername)"
      ]
    },
    {
      "name": "agentfindclip",
      "description": "Finds the index of a clip in an agent\u2019s definition.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentfindclip.html",
      "usage": [
        "int  agentfindclip(<geometry>geometry, int prim, string clipname)"
      ]
    },
    {
      "name": "agentfindtransformgroup",
      "description": "Finds the index of a transform group in an agent\u2019s definition.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentfindtransformgroup.html",
      "usage": [
        "int  agentfindtransformgroup(<geometry>geometry, int prim, string transformgroup)"
      ]
    },
    {
      "name": "agentlayerbindings",
      "description": "Returns the transform that each shape in an agent\u2019s layer is bound to.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentlayerbindings.html",
      "usage": [
        "int [] agentlayerbindings(<geometry>geometry, int prim, string layername, string shapetype)",
        "int [] agentlayerbindings(<geometry>geometry, int prim, int layerindex, string shapetype)"
      ]
    },
    {
      "name": "agentlayers",
      "description": "Returns all of the layers that have been loaded for an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentlayers.html",
      "usage": [
        "string [] agentlayers(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentlocaltransform",
      "description": "Returns the current local space transform of an agent primitive\u2019s bone.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentlocaltransform.html",
      "usage": [
        "matrix  agentlocaltransform(<geometry>geometry, int prim, int transform)"
      ]
    },
    {
      "name": "agentlayershapes",
      "description": "Returns the names of the shapes referenced by an agent primitive\u2019s layer.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentlayershapes.html",
      "usage": [
        "string [] agentlayershapes(<geometry>geometry, int prim, string layername, string shapetype)",
        "string [] agentlayershapes(<geometry>geometry, int prim, int layerindex, string shapetype)",
        "string [] agentlayershapes(<geometry>geometry, int prim, string layername, int transform)",
        "string [] agentlayershapes(<geometry>geometry, int prim, int layerindex, int transform)"
      ]
    },
    {
      "name": "agentlocaltransforms",
      "description": "Returns the current local space transforms of an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentlocaltransforms.html",
      "usage": [
        "matrix [] agentlocaltransforms(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentmetadata",
      "description": "Returns the agent definition\u2019s metadata dictionary.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentmetadata.html",
      "usage": [
        "dict  agentmetadata(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agentrestworldtransform",
      "description": "Returns the world space rest transform for an agent primitive\u2019s joint.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentrestworldtransform.html",
      "usage": [
        "matrix  agentrestworldtransform(<geometry>geometry, int prim, int transform)"
      ]
    },
    {
      "name": "agentrigchildren",
      "description": "Returns the child transforms of a transform in an agent primitive\u2019s rig.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentrigchildren.html",
      "usage": [
        "int [] agentrigchildren(<geometry>geometry, int prim, int transform)"
      ]
    },
    {
      "name": "agentrigfind",
      "description": "Finds the index of a transform in an agent primitive\u2019s rig.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentrigfind.html",
      "usage": [
        "int  agentrigfind(<geometry>geometry, int prim, string transformname)"
      ]
    },
    {
      "name": "agentrestlocaltransform",
      "description": "Returns the local space rest transform for an agent primitive\u2019s joint.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentrestlocaltransform.html",
      "usage": [
        "matrix  agentrestlocaltransform(<geometry>geometry, int prim, int transform)"
      ]
    },
    {
      "name": "agentrigfindchannel",
      "description": "Finds the index of a channel in an agent primitive\u2019s rig.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentrigfindchannel.html",
      "usage": [
        "int  agentrigfindchannel(<geometry>geometry, int prim, string channelname)"
      ]
    },
    {
      "name": "agentrigparent",
      "description": "Returns the parent transform of a transform in an agent primitive\u2019s rig.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentrigparent.html",
      "usage": [
        "int  agentrigparent(<geometry>geometry, int prim, int transform)"
      ]
    },
    {
      "name": "agentsolvefbik",
      "description": "Applies a full-body inverse kinematics algorithm to an agent\u2019s skeleton.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentsolvefbik.html",
      "usage": [
        "int  agentsolvefbik(<geometry>geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters)",
        "int  agentsolvefbik(<geometry>geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters, float tolerance, int pinroot)",
        "int  agentsolvefbik(<geometry>geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[])",
        "int  agentsolvefbik(<geometry>geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], int targettypes[], matrix targetoffsets[])",
        "int  agentsolvefbik(<geometry>geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], string goalxformattrib, string constrainedxformattrib, string jointlimitsattrib)",
        "int  agentsolvefbik(<geometry>geometry, int outgeo, int prim, int targets[], matrix targetxforms[], int xformgroup, int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], int targettypes[], matrix targetoffsets[], string goalxformattrib, string constrainedxformattrib, string jointlimitsattrib)"
      ]
    },
    {
      "name": "agenttransformgroupmember",
      "description": "Returns whether a transform is a member of the specified transform group.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agenttransformgroupmember.html",
      "usage": [
        "int  agenttransformgroupmember(<geometry>geometry, int prim, string transformgroup, int transform)",
        "int  agenttransformgroupmember(<geometry>geometry, int prim, int transformgroupidx, int transform)"
      ]
    },
    {
      "name": "agenttransformcount",
      "description": "Returns the number of transforms in an agent primitive\u2019s rig.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agenttransformcount.html",
      "usage": [
        "int  agenttransformcount(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agenttransformgroupmemberchannel",
      "description": "Returns whether a channel is a member of the specified transform group.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agenttransformgroupmemberchannel.html",
      "usage": [
        "int  agenttransformgroupmemberchannel(<geometry>geometry, int prim, int transformgroupidx, int channel)"
      ]
    },
    {
      "name": "agenttransformgroupweight",
      "description": "Returns the weight of a member of the specified transform group.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agenttransformgroupweight.html",
      "usage": [
        "float  agenttransformgroupweight(<geometry>geometry, int prim, int transformgroup, int transform)"
      ]
    },
    {
      "name": "agenttransformgroups",
      "description": "Returns the names of the transform groups in an agent\u2019s definition.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agenttransformgroups.html",
      "usage": [
        "string [] agenttransformgroups(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agenttransformnames",
      "description": "Returns the name of each transform in an agent primitive\u2019s rig.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agenttransformnames.html",
      "usage": [
        "string [] agenttransformnames(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "agenttransformtoworld",
      "description": "Converts transforms from local space to world space for an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agenttransformtoworld.html",
      "usage": [
        "int  agenttransformtoworld(<geometry>geometry, int prim, matrix &transforms[])"
      ]
    },
    {
      "name": "agenttransformtolocal",
      "description": "Converts transforms from world space to local space for an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agenttransformtolocal.html",
      "usage": [
        "int  agenttransformtolocal(<geometry>geometry, int prim, matrix &transforms[])"
      ]
    },
    {
      "name": "agentworldtransform",
      "description": "Returns the current world space transform of an agent primitive\u2019s bone.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentworldtransform.html",
      "usage": [
        "matrix  agentworldtransform(<geometry>geometry, int prim, int transform)"
      ]
    },
    {
      "name": "agentworldtransforms",
      "description": "Returns the current world space transforms of an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/agentworldtransforms.html",
      "usage": [
        "matrix [] agentworldtransforms(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "setagentclipnames",
      "description": "Sets the current animation clips for an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentclipnames.html",
      "usage": [
        "void  setagentclipnames(int geohandle, int prim, string clipnames[])"
      ]
    },
    {
      "name": "setagentchannelvalues",
      "description": "Overrides the values of an agent primitive\u2019s channels.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentchannelvalues.html",
      "usage": [
        "void  setagentchannelvalues(int geohandle, int prim, float values[])"
      ]
    },
    {
      "name": "setagentchannelvalue",
      "description": "Overrides the value of an agent primitive\u2019s channel.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentchannelvalue.html",
      "usage": [
        "int  setagentchannelvalue(int geohandle, int prim, float value, int channel)"
      ]
    },
    {
      "name": "setagentclips",
      "description": "Sets the animation clips that an agent should use to compute its transforms.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentclips.html",
      "usage": [
        "int  setagentclips(int geohandle, int prim, string clip_names[], float clip_times[], float clip_weights[], string clip_transform_groups[], int clip_layer_ids[], int layer_blend_modes[], float layer_weights[], int layer_parent_ids[])",
        "int  setagentclips(int geohandle, int prim, int clip_ids[], float clip_times[], float clip_weights[], int clip_transform_group_ids[], int clip_layer_ids[], int layer_blend_modes[], float layer_weights[], int layer_parent_ids[])"
      ]
    },
    {
      "name": "setagentcliptimes",
      "description": "Sets the current times for an agent primitive\u2019s animation clips.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentcliptimes.html",
      "usage": [
        "void  setagentcliptimes(int geohandle, int prim, float cliptimes[])"
      ]
    },
    {
      "name": "setagentcollisionlayer",
      "description": "Sets the collision layer of an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentcollisionlayer.html",
      "usage": []
    },
    {
      "name": "setagentcollisionlayers",
      "description": "Sets the collision layers of an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentcollisionlayers.html",
      "usage": [
        "int  setagentcollisionlayers(int geohandle, int prim, string layernames[])",
        "int  setagentcollisionlayers(int geohandle, int prim, int layer_ids[])"
      ]
    },
    {
      "name": "setagentclipweights",
      "description": "Sets the blend weights for an agent primitive\u2019s animation clips.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentclipweights.html",
      "usage": [
        "void  setagentclipweights(int geohandle, int prim, float clipweights[])"
      ]
    },
    {
      "name": "setagentcurrentlayer",
      "description": "Sets the current layer of an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentcurrentlayer.html",
      "usage": []
    },
    {
      "name": "setagentcurrentlayers",
      "description": "Sets the current display layers of an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentcurrentlayers.html",
      "usage": [
        "int  setagentcurrentlayers(int geohandle, int prim, string layernames[])",
        "int  setagentcurrentlayers(int geohandle, int prim, int layer_ids[])"
      ]
    },
    {
      "name": "setagentlocaltransform",
      "description": "Overrides the local space transform of an agent primitive\u2019s bone.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentlocaltransform.html",
      "usage": [
        "int  setagentlocaltransform(int geohandle, int prim, matrix transform, int index)"
      ]
    },
    {
      "name": "setagentlocaltransforms",
      "description": "Overrides the local space transforms of an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentlocaltransforms.html",
      "usage": [
        "void  setagentlocaltransforms(int geohandle, int prim, matrix transforms[])"
      ]
    },
    {
      "name": "setagentworldtransforms",
      "description": "Overrides the world space transforms of an agent primitive.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentworldtransforms.html",
      "usage": [
        "void  setagentworldtransforms(int geohandle, int prim, matrix transforms[])"
      ]
    },
    {
      "name": "setagentworldtransform",
      "description": "Overrides the world space transform of an agent primitive\u2019s bone.",
      "category": "Crowds",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setagentworldtransform.html",
      "usage": [
        "int  setagentworldtransform(int geohandle, int prim, matrix transform, int index)"
      ]
    },
    {
      "name": "json_loads",
      "description": "Converts a JSON string into a VEX dictionary.",
      "category": "dict",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/json_loads.html",
      "usage": [
        "dict  json_loads(string json, int flags)"
      ]
    },
    {
      "name": "keys",
      "description": "Returns all the keys in a dictionary.",
      "category": "dict",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/keys.html",
      "usage": [
        "string [] keys(dict d)"
      ]
    },
    {
      "name": "typeid",
      "description": "Returns a numeric code identifying a VEX data type.",
      "category": "dict",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/typeid.html",
      "usage": [
        "int  typeid(<type>value)",
        "int  typeid(<type>value[])",
        "int  typeid(dict dictionary, string key)",
        "typeid()"
      ]
    },
    {
      "name": "json_dumps",
      "description": "Converts a VEX dictionary into a JSON string.",
      "category": "dict",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/json_dumps.html",
      "usage": [
        "string  json_dumps(dict d, int flags)"
      ]
    },
    {
      "name": "dimport",
      "description": "Reads a variable from the displacement shader for the surface.",
      "category": "displace",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/dimport.html",
      "usage": [
        "int  dimport(string name, <type>&out)"
      ]
    },
    {
      "name": "file_stat",
      "description": "Returns file system status for a given file.",
      "category": "File I/O",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/file_stat.html",
      "usage": [
        "int  file_stat(string filename, int &stat_data[], ...)"
      ]
    },
    {
      "name": "fuzzy_defuzz_centroid",
      "description": "",
      "category": "Fuzzy Logic",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fuzzy_defuzz_centroid.html",
      "usage": [
        "float  fuzzy_defuzz_centroid(float aggregated_membership[], float min_value, float max_value)"
      ]
    },
    {
      "name": "fuzzify",
      "description": "",
      "category": "Fuzzy Logic",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fuzzify.html",
      "usage": [
        "float  fuzzify(string ramp_basis[], float ramp_values[], float ramp_positions[], float crisp_value, float min_value, float max_value)"
      ]
    },
    {
      "name": "filter_remap",
      "description": "Computes an importance sample based on the given filter type and input uv.",
      "category": "filter",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/filter_remap.html",
      "usage": [
        "vector  filter_remap(vector2 uv, string filter, float width, ...)"
      ]
    },
    {
      "name": "fuzzy_and",
      "description": "",
      "category": "Fuzzy Logic",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fuzzy_and.html",
      "usage": [
        "int  fuzzy_and(int a, int b, ...)",
        "float  fuzzy_and(float a, float b, ...)"
      ]
    },
    {
      "name": "fuzzy_nand",
      "description": "",
      "category": "Fuzzy Logic",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fuzzy_nand.html",
      "usage": [
        "int  fuzzy_nand(int a, int b, ...)",
        "float  fuzzy_nand(float a, float b, ...)"
      ]
    },
    {
      "name": "fuzzy_not",
      "description": "",
      "category": "Fuzzy Logic",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fuzzy_not.html",
      "usage": [
        "int  fuzzy_not(int n)",
        "float  fuzzy_not(float n)"
      ]
    },
    {
      "name": "fuzzy_nor",
      "description": "",
      "category": "Fuzzy Logic",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fuzzy_nor.html",
      "usage": [
        "int  fuzzy_nor(int a, int b, ...)",
        "float  fuzzy_nor(float a, float b, ...)"
      ]
    },
    {
      "name": "fuzzy_nxor",
      "description": "",
      "category": "Fuzzy Logic",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fuzzy_nxor.html",
      "usage": [
        "int  fuzzy_nxor(int a, int b, ...)",
        "float  fuzzy_nxor(float a, float b, ...)"
      ]
    },
    {
      "name": "fuzzy_or",
      "description": "",
      "category": "Fuzzy Logic",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fuzzy_or.html",
      "usage": [
        "int  fuzzy_or(int a, int b, ...)",
        "float  fuzzy_or(float a, float b, ...)"
      ]
    },
    {
      "name": "fuzzy_xor",
      "description": "",
      "category": "Fuzzy Logic",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fuzzy_xor.html",
      "usage": [
        "int  fuzzy_xor(int a, int b, ...)",
        "float  fuzzy_xor(float a, float b, ...)"
      ]
    },
    {
      "name": "addpoint",
      "description": "Adds a point to the geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/addpoint.html",
      "usage": [
        "int  addpoint(int geohandle, int point_number)",
        "int  addpoint(int geohandle, vector pos)"
      ]
    },
    {
      "name": "addvertex",
      "description": "Adds a vertex to a primitive in a geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/addvertex.html",
      "usage": [
        "int  addvertex(int geohandle, int prim_num, int point_num)"
      ]
    },
    {
      "name": "addprim",
      "description": "Adds a primitive to the geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/addprim.html",
      "usage": [
        "int  addprim(int geohandle, string type)",
        "int  addprim(int geohandle, string type, int pt0)",
        "int  addprim(int geohandle, string type, int pt0, int pt1)",
        "int  addprim(int geohandle, string type, int pt0, int pt1, int pt2)",
        "int  addprim(int geohandle, string type, int pt0, int pt1, int pt2, int pt3)",
        "int  addprim(int geohandle, string type, int pt0, int pt1, int pt2, int pt3, int pt4, int pt5, int pt6, int pt7)",
        "int  addprim(int geohandle, string type, int points[])",
        "void  addprim(int &prim_num, int geohandle, string type, int pt0, int &vertices[])",
        "void  addprim(int &prim_num, int geohandle, string type, int pt0, int pt1, int &vertices[])",
        "void  addprim(int &prim_num, int geohandle, string type, int pt0, int pt1, int pt2, int &vertices[])",
        "void  addprim(int &prim_num, int geohandle, string type, int pt0, int pt1, int pt2, int pt3, int &vertices[])",
        "void  addprim(int &prim_num, int geohandle, string type, int pt0, int pt1, int pt2, int pt3, int pt4, int pt5, int pt6, int pt7, int &vertices[])",
        "void  addprim(int &prim_num, int geohandle, string type, int points[], int &vertices[])"
      ]
    },
    {
      "name": "geoself",
      "description": "Returns a handle to the current geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/geoself.html",
      "usage": [
        "int  geoself()"
      ]
    },
    {
      "name": "clip",
      "description": "Clip the line segment between p0 and p1.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/clip.html",
      "usage": [
        "void  clip(int &result, vector &p0, vector &p1, vector4 plane)",
        "void  clip(int &result, vector &p0, vector &p1, vector min, vector max)"
      ]
    },
    {
      "name": "geounwrap",
      "description": "Returns an oppath: string to unwrap the geometry in-place.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/geounwrap.html",
      "usage": [
        "string  geounwrap(<geometry>geometry, string unwrap_attribute)"
      ]
    },
    {
      "name": "intersect",
      "description": "This function computes the first intersection of a ray with geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/intersect.html",
      "usage": [
        "int  intersect(<geometry>geometry, vector orig, vector dir, vector &p, float &u, float &v)",
        "int  intersect(<geometry>geometry, vector orig, vector dir, vector &p, float &u, float &v, ...)",
        "int  intersect(<geometry>geometry, vector orig, vector dir, vector &p, vector &uvw)",
        "int  intersect(<geometry>geometry, string group, vector orig, vector dir, vector &p, vector &uvw)"
      ]
    },
    {
      "name": "inedgegroup",
      "description": "Returns 1 if the edge specified by the point pair is in the group specified by the string.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/inedgegroup.html",
      "usage": [
        "int  inedgegroup(string filename, string groupname, int pointnum0, int pointnum1)",
        "int  inedgegroup(int input, string groupname, int pointnum0, int pointnum1)"
      ]
    },
    {
      "name": "intersect_all",
      "description": "Computes all intersections of the specified ray with geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/intersect_all.html",
      "usage": [
        "int  intersect_all(<geometry>geometry, string group, vector orig, vector dir, vector &pos[], int &prim[], vector &uvw[], float tol=0.01, float ttol=0.01 )"
      ]
    },
    {
      "name": "nearpoint",
      "description": "Finds the closest point in a geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nearpoint.html",
      "usage": [
        "int  nearpoint(<geometry>geometry, vector pt)",
        "int  nearpoint(<geometry>geometry, vector pt, float maxdist)",
        "int  nearpoint(<geometry>geometry, string ptgroup, vector pt)",
        "int  nearpoint(<geometry>geometry, string ptgroup, vector pt, float maxdist)"
      ]
    },
    {
      "name": "minpos",
      "description": "Given a position in world space, returns the position of the closest point on a given geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/minpos.html",
      "usage": [
        "vector  minpos(<geometry>geometry, vector point)",
        "vector  minpos(<geometry>geometry, vector point, float maxdist)",
        "vector  minpos(<geometry>geometry, string primgroup, vector point)",
        "vector  minpos(<geometry>geometry, string primgroup, vector point, float maxdist)"
      ]
    },
    {
      "name": "nearpoints",
      "description": "Finds the all the closest point in a geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nearpoints.html",
      "usage": [
        "int [] nearpoints(<geometry>geometry, vector pt, float maxdist)",
        "int [] nearpoints(<geometry>geometry, vector pt, float maxdist, int maxpts)",
        "int [] nearpoints(<geometry>geometry, string ptgroup, vector pt, float maxdist)",
        "int [] nearpoints(<geometry>geometry, string ptgroup, vector pt, float maxdist, int maxpts)"
      ]
    },
    {
      "name": "neighbourcount",
      "description": "Returns the number of points that are connected to the specified point.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/neighbourcount.html",
      "usage": [
        "int  neighbourcount(<geometry>geometry, int point_num)"
      ]
    },
    {
      "name": "neighbour",
      "description": "Returns the point number of the next point connected to a given point.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/neighbour.html",
      "usage": [
        "int  neighbour(<geometry>geometry, int point_num, int neighbour_num)"
      ]
    },
    {
      "name": "neighbours",
      "description": "Returns an array of the point numbers of the neighbours of a point.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/neighbours.html",
      "usage": [
        "int [] neighbours(<geometry>geometry, int ptnum)"
      ]
    },
    {
      "name": "nedgesgroup",
      "description": "Returns the number of edges in the group.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nedgesgroup.html",
      "usage": [
        "int  nedgesgroup(<geometry>geometry, string groupname)"
      ]
    },
    {
      "name": "nprimitives",
      "description": "Returns the number of primitives in the input or geometry file.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nprimitives.html",
      "usage": [
        "int  nprimitives(<geometry>geometry)"
      ]
    },
    {
      "name": "nvertices",
      "description": "Returns the number of vertices in the input or geometry file.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nvertices.html",
      "usage": [
        "int  nvertices(<geometry>geometry)"
      ]
    },
    {
      "name": "nverticesgroup",
      "description": "Returns the number of vertices in the group.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nverticesgroup.html",
      "usage": [
        "int  nverticesgroup(<geometry>geometry, string groupname)"
      ]
    },
    {
      "name": "pointprims",
      "description": "Returns the list of primitives containing a point.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointprims.html",
      "usage": [
        "int [] pointprims(<geometry>geometry, int ptnum)"
      ]
    },
    {
      "name": "npoints",
      "description": "Returns the number of points in the input or geometry file.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/npoints.html",
      "usage": [
        "int  npoints(<geometry>geometry)"
      ]
    },
    {
      "name": "polyneighbours",
      "description": "Returns an array of the primitive numbers of the edge-neighbours of a polygon.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/polyneighbours.html",
      "usage": [
        "int [] polyneighbours(<geometry>geometry, int primnum)"
      ]
    },
    {
      "name": "pointvertices",
      "description": "Returns the list of vertices connected to a point.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointvertices.html",
      "usage": [
        "int [] pointvertices(<geometry>geometry, int ptnum)"
      ]
    },
    {
      "name": "pointvertex",
      "description": "Returns a linear vertex number of a point in a geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointvertex.html",
      "usage": [
        "int  pointvertex(<geometry>geometry, int point_num)"
      ]
    },
    {
      "name": "primfind",
      "description": "Returns a list of primitives potentially intersecting a given bounding box.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primfind.html",
      "usage": [
        "int [] primfind(<geometry>geometry, vector min, vector max)",
        "int [] primfind(<geometry>geometry, string group, vector min, vector max)"
      ]
    },
    {
      "name": "primvertex",
      "description": "Converts a primitive/vertex pair into a linear vertex.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primvertex.html",
      "usage": [
        "int  primvertex(<geometry>geometry, int primnum, int vertex)"
      ]
    },
    {
      "name": "primpoints",
      "description": "Returns the list of points on a primitive.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primpoints.html",
      "usage": [
        "int [] primpoints(<geometry>geometry, int primnum)"
      ]
    },
    {
      "name": "primvertexcount",
      "description": "Returns number of vertices in a primitive in a geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primvertexcount.html",
      "usage": [
        "int  primvertexcount(<geometry>geometry, int prim_num)"
      ]
    },
    {
      "name": "primpoint",
      "description": "Converts a primitive/vertex pair into a point number.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primpoint.html",
      "usage": [
        "int  primpoint(<geometry>geometry, int primnum, int vertex)"
      ]
    },
    {
      "name": "primvertices",
      "description": "Returns the list of vertices on a primitive.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primvertices.html",
      "usage": [
        "int [] primvertices(<geometry>geometry, int primnum)"
      ]
    },
    {
      "name": "removeattrib",
      "description": "Removes an attribute or group from the geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removeattrib.html",
      "usage": [
        "int  removeattrib(int geohandle, string attribclass, string name)"
      ]
    },
    {
      "name": "removeprim",
      "description": "Removes a primitive from the geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removeprim.html",
      "usage": [
        "int  removeprim(int geohandle, int prim_number, int andpoints)"
      ]
    },
    {
      "name": "removepoint",
      "description": "Removes a point from the geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removepoint.html",
      "usage": [
        "int  removepoint(int geohandle, int point_number)",
        "int  removepoint(int geohandle, int point_number, int and_prims)"
      ]
    },
    {
      "name": "removevertex",
      "description": "Removes a vertex from the geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/removevertex.html",
      "usage": [
        "int  removevertex(int geohandle, int linear_vertex_index)"
      ]
    },
    {
      "name": "setedgegroup",
      "description": "Sets edge group membership in a geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setedgegroup.html",
      "usage": [
        "int  setedgegroup(int geohandle, string name, int pt0, int pt1, int value)"
      ]
    },
    {
      "name": "setprimvertex",
      "description": "Rewires a vertex in the geometry to a different point.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setprimvertex.html",
      "usage": [
        "int  setprimvertex(int geohandle, int prim, int vtxofprim, int pt)"
      ]
    },
    {
      "name": "setvertexpoint",
      "description": "Rewires a vertex in the geometry to a different point.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setvertexpoint.html",
      "usage": [
        "int  setvertexpoint(int geohandle, int prim, int vtxofprim, int pt)"
      ]
    },
    {
      "name": "uvintersect",
      "description": "This function computes the intersection of the specified ray with the geometry in uv space.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/uvintersect.html",
      "usage": [
        "int  uvintersect(<geometry>geometry, string uvname, vector orig, vector dir, vector &pos, vector &primuv)",
        "int  uvintersect(<geometry>geometry, string primgroup, string uvname, vector orig, vector dir, vector &pos, vector &primuv)"
      ]
    },
    {
      "name": "vertexcurveparam",
      "description": "Returns the parametric coordinate of a vertex along the perimeter of\nits primitive.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexcurveparam.html",
      "usage": [
        "float  vertexcurveparam(<geometry>geometry, int linearindex)"
      ]
    },
    {
      "name": "vertexnext",
      "description": "Returns the linear vertex number of the next vertex sharing a point with a given vertex.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexnext.html",
      "usage": [
        "int  vertexnext(<geometry>geometry, int linearvertex)"
      ]
    },
    {
      "name": "vertexprev",
      "description": "Returns the linear vertex number of the previous vertex sharing a point with a given vertex.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexprev.html",
      "usage": [
        "int  vertexprev(<geometry>geometry, int linearvertex)"
      ]
    },
    {
      "name": "vertexindex",
      "description": "Converts a primitive/vertex pair into a linear vertex.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexindex.html",
      "usage": [
        "int  vertexindex(<geometry>geometry, int primnum, int vertex)"
      ]
    },
    {
      "name": "vertexpoint",
      "description": "Returns the point number of linear vertex in a geometry.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexpoint.html",
      "usage": [
        "int  vertexpoint(<geometry>geometry, int linearvertex)"
      ]
    },
    {
      "name": "expandedgegroup",
      "description": "",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/expandedgegroup.html",
      "usage": [
        "int [] expandedgegroup(<geometry>geometry, string groupname)",
        "int [] expandedgegroup(<geometry>geometry, string groupname, string mode)"
      ]
    },
    {
      "name": "vertexprim",
      "description": "Returns the number of the primitive containing a given vertex.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexprim.html",
      "usage": [
        "int  vertexprim(<geometry>geometry, int linearvertex)"
      ]
    },
    {
      "name": "expandpointgroup",
      "description": "Returns an array of point numbers corresponding to a group string.",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/expandpointgroup.html",
      "usage": [
        "int [] expandpointgroup(<geometry>geometry, string groupname)",
        "int [] expandpointgroup(<geometry>geometry, string groupname, string mode)"
      ]
    },
    {
      "name": "expandprimgroup",
      "description": "Returns an array of prim numbers corresponding to a group string.",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/expandprimgroup.html",
      "usage": [
        "int [] expandprimgroup(<geometry>geometry, string groupname)",
        "int [] expandprimgroup(<geometry>geometry, string groupname, string mode)"
      ]
    },
    {
      "name": "vertexprimindex",
      "description": "Converts a linear vertex index into a primitive vertex number.",
      "category": "Geometry",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexprimindex.html",
      "usage": [
        "int  vertexprimindex(<geometry>geometry, int linearindex)"
      ]
    },
    {
      "name": "expandvertexgroup",
      "description": "Returns an array of linear vertex numbers corresponding to a group string.",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/expandvertexgroup.html",
      "usage": [
        "int [] expandvertexgroup(<geometry>geometry, string groupname)",
        "int [] expandvertexgroup(<geometry>geometry, string groupname, string mode)"
      ]
    },
    {
      "name": "inpointgroup",
      "description": "Returns 1 if the point specified by the point number is in the group specified by the string.",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/inpointgroup.html",
      "usage": [
        "int  inpointgroup(<geometry>geometry, string groupname, int pointnum)"
      ]
    },
    {
      "name": "npointsgroup",
      "description": "Returns the number of points in the group.",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/npointsgroup.html",
      "usage": [
        "int  npointsgroup(<geometry>geometry, string groupname)"
      ]
    },
    {
      "name": "inprimgroup",
      "description": "Returns 1 if the primitive specified by the primitive number is in the group specified by the string.",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/inprimgroup.html",
      "usage": [
        "int  inprimgroup(<geometry>geometry, string groupname, int primnum)"
      ]
    },
    {
      "name": "invertexgroup",
      "description": "Returns 1 if the vertex specified by the vertex number is in the group specified by the string.",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/invertexgroup.html",
      "usage": [
        "int  invertexgroup(string filename, string groupname, int vertexnum)",
        "int  invertexgroup(int opinput, string groupname, int vertexnum)"
      ]
    },
    {
      "name": "setpointgroup",
      "description": "Adds or removes a point to/from a group in a geometry.",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setpointgroup.html",
      "usage": [
        "int  setpointgroup(int geohandle, string name, int point_num, int value, string mode=\"set\")"
      ]
    },
    {
      "name": "nprimitivesgroup",
      "description": "Returns the number of primitives in the group.",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nprimitivesgroup.html",
      "usage": [
        "int  nprimitivesgroup(<geometry>geometry, string groupname)"
      ]
    },
    {
      "name": "setprimgroup",
      "description": "Adds or removes a primitive to/from a group in a geometry.",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setprimgroup.html",
      "usage": [
        "int  setprimgroup(int geohandle, string name, int prim_num, int value, string mode=\"set\")"
      ]
    },
    {
      "name": "setvertexgroup",
      "description": "Adds or removes a vertex to/from a group in a geometry.",
      "category": "groups",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setvertexgroup.html",
      "usage": [
        "int  setvertexgroup(int geohandle, string name, int prim_num, int vertex_num, int value, string mode=\"set\")"
      ]
    },
    {
      "name": "hedge_dstpoint",
      "description": "Returns the destination point of a half-edge.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_dstpoint.html",
      "usage": [
        "int  hedge_dstpoint(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_dstvertex",
      "description": "Returns the destination vertex of a half-edge.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_dstvertex.html",
      "usage": [
        "int  hedge_dstvertex(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_equivcount",
      "description": "Returns the number of half-edges equivalent to a given half-edge.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_equivcount.html",
      "usage": [
        "int  hedge_equivcount(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_isequiv",
      "description": "Determines whether a two half-edges are equivalent (represent the same edge).",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_isequiv.html",
      "usage": [
        "int  hedge_isequiv(<geometry>geometry, int hedge1, int hedge2)"
      ]
    },
    {
      "name": "hedge_isprimary",
      "description": "Determines whether a half-edge number corresponds to a primary half-edge.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_isprimary.html",
      "usage": [
        "int  hedge_isprimary(string geometry, int hedge)",
        "int  hedge_isprimary(int opinput, int hendge)"
      ]
    },
    {
      "name": "hedge_isvalid",
      "description": "Determines whether a half-edge number corresponds to a valid half-edge.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_isvalid.html",
      "usage": [
        "int  hedge_isvalid(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_nextequiv",
      "description": "Returns the next half-edges equivalent to a given half-edge.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_nextequiv.html",
      "usage": [
        "int  hedge_nextequiv(<geometry>geometry, int hedge)",
        "hedge_nextequiv()"
      ]
    },
    {
      "name": "hedge_next",
      "description": "Returns the half-edge that follows a given half-edge in its polygon.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_next.html",
      "usage": [
        "int  hedge_next(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_postdstpoint",
      "description": "Returns the point into which the vertex following the destination vertex of a half-edge in its primitive is wired.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_postdstpoint.html",
      "usage": [
        "int  hedge_postdstpoint(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_presrcvertex",
      "description": "Returns the vertex that precedes the source vertex of a half-edge in its primitive.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_presrcvertex.html",
      "usage": [
        "int  hedge_presrcvertex(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_presrcpoint",
      "description": "Returns the point into which the vertex that precedes the source vertex of a half-edge in its primitive is wired.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_presrcpoint.html",
      "usage": [
        "int  hedge_presrcpoint(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_postdstvertex",
      "description": "Returns the vertex following the destination vertex of a half-edge in its primitive.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_postdstvertex.html",
      "usage": [
        "int  hedge_postdstvertex(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_primary",
      "description": "Returns the primary half-edge equivalent to a given half-edge.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_primary.html",
      "usage": [
        "int  hedge_primary(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_srcvertex",
      "description": "Returns the source vertex of a half-edge.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_srcvertex.html",
      "usage": [
        "int  hedge_srcvertex(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_prim",
      "description": "Returns the primitive that contains a half-edge.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_prim.html",
      "usage": [
        "int  hedge_prim(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_srcpoint",
      "description": "Returns the source point of a half-edge.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_srcpoint.html",
      "usage": [
        "int  hedge_srcpoint(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "hedge_prev",
      "description": "Returns the half-edge that precedes a given half-edge in its polygon.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hedge_prev.html",
      "usage": [
        "int  hedge_prev(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "pointedge",
      "description": "Finds and returns a half-edge with the given endpoints.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointedge.html",
      "usage": [
        "int  pointedge(<geometry>geometry, int point1, int point2)"
      ]
    },
    {
      "name": "pointhedge",
      "description": "Finds and returns a half-edge with a given source point or with given source and destination points.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointhedge.html",
      "usage": [
        "int  pointhedge(<geometry>geometry, int point)",
        "int  pointhedge(<geometry>geometry, int srcpoint, int dstpoint)"
      ]
    },
    {
      "name": "pointhedgenext",
      "description": "Returns the next half-edge with the same source as a given half-edge.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointhedgenext.html",
      "usage": [
        "int  pointhedgenext(<geometry>geometry, int hedge)"
      ]
    },
    {
      "name": "primhedge",
      "description": "Returns one of the half-edges contained in a primitive.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/primhedge.html",
      "usage": [
        "int  primhedge(<geometry>geometry, int prim)"
      ]
    },
    {
      "name": "vertexhedge",
      "description": "Returns the half-edge which has a vertex as source.",
      "category": "Half-edges",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vertexhedge.html",
      "usage": [
        "int  vertexhedge(<geometry>geometry, int vertex)"
      ]
    },
    {
      "name": "hex_adjacent",
      "description": "Returns primitive number of an adjacent hexahedron.",
      "category": "hex",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hex_adjacent.html",
      "usage": [
        "int  hex_adjacent(<geometry>geometry, int primindex, int faceno)"
      ]
    },
    {
      "name": "hex_faceindex",
      "description": "Returns vertex indices of each face of a hexahedron.",
      "category": "hex",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hex_faceindex.html",
      "usage": [
        "int  hex_faceindex(int faceno, int vtxno)"
      ]
    },
    {
      "name": "accessframe",
      "description": "Tells the COP manager that you need access to the given frame.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/accessframe.html",
      "usage": [
        "void  accessframe(int frame)"
      ]
    },
    {
      "name": "alphaname",
      "description": "Returns the default name of the alpha plane (as it appears in the\ncompositor preferences).",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/alphaname.html",
      "usage": [
        "string  alphaname()"
      ]
    },
    {
      "name": "bumpname",
      "description": "Returns the default name of the bump plane (as it appears in the\ncompositor preferences).",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/bumpname.html",
      "usage": [
        "string  bumpname()"
      ]
    },
    {
      "name": "chname",
      "description": "Returns the name of a numbered channel.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chname.html",
      "usage": [
        "string  chname(int plane_index, int chindex)",
        "string  chname(int channel_index)",
        "string  chname(int opinput, int channel_index)"
      ]
    },
    {
      "name": "cinput",
      "description": "Samples the exact (unfiltered) pixel color at the given coordinates.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cinput.html",
      "usage": [
        "vector  cinput(int u, int v, ...)",
        "vector4  cinput(int u, int v, ...)",
        "vector  cinput(float u, float v, ...)",
        "vector4  cinput(float u, float v, ...)",
        "float  cinput(int component, int u, int v, ...)",
        "float  cinput(int component, float u, float v, ...)",
        "vector  cinput(int opinput, int planeindex, int u, int v, ...)",
        "vector4  cinput(int opinput, int planeindex, int u, int v, ...)",
        "vector  cinput(int opinput, int planeindex, float u, float v, ...)",
        "vector4  cinput(int opinput, int planeindex, float u, float v, ...)",
        "float  cinput(int opinput, int planeindex, int component, int u, int v, ...)",
        "float  cinput(int opinput, int planeindex, int component, float u, float v, ...)",
        "vector  cinput(int opinput, int planeindex, int arrayindex, int u, int v, int frame, ...)",
        "vector4  cinput(int opinput, int planeindex, int arrayindex, int u, int v, int frame, ...)",
        "vector  cinput(int opinput, int planeindex, int arrayindex, float u, float v, int frame, ...)",
        "vector4  cinput(int opinput, int planeindex, int arrayindex, float u, float v, int frame, ...)",
        "float  cinput(int opinput, int planeindex, int arrayindex, int component, int u, int v, int frame, ...)",
        "float  cinput(int opinput, int planeindex, int arrayindex, int component, float u, float v, int frame, ...)"
      ]
    },
    {
      "name": "binput",
      "description": "Samples a 2\u00d72 pixel block around the given UV position, and bilinearly interpolates these pixels.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/binput.html",
      "usage": [
        "vector  binput(int u, int v, ...)",
        "vector4  binput(int u, int v, ...)",
        "vector  binput(float u, float v, ...)",
        "vector4  binput(float u, float v, ...)",
        "float  binput(int comp, int u, int v, ...)",
        "float  binput(int comp, float u, float v, ...)",
        "vector  binput(int opinput, int plane, int u, int v, ...)",
        "vector4  binput(int opinput, int plane, int u, int v, ...)",
        "vector  binput(int opinput, int plane, float u, float v, ...)",
        "vector4  binput(int opinput, int plane, float u, float v, ...)",
        "float  binput(int opinput, int plane, int comp, int u, int v, ...)",
        "float  binput(int opinput, int plane, int comp, float u, float v, ...)",
        "float  binput(int opinput, int plane, int array_index, int comp, int u, int v, int frame, ...)",
        "float  binput(int opinput, int plane, int array_index, int comp, float u, float v, int frame, ...)",
        "vector  binput(int opinput, int plane, int array_index, int u, int v, int frame, ...)",
        "vector4  binput(int opinput, int plane, int array_index, int u, int v, int frame, ...)",
        "vector  binput(int opinput, int plane, int array_index, float u, float v, int frame, ...)",
        "vector4  binput(int opinput, int plane, int array_index, float u, float v, int frame, ...)"
      ]
    },
    {
      "name": "finput",
      "description": "Returns fully filtered pixel input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/finput.html",
      "usage": [
        "vector  finput(int u, int v, ...)",
        "vector4  finput(int u, int v, ...)",
        "vector  finput(float u, float v, ...)",
        "vector4  finput(float u, float v, ...)",
        "float  finput(int component, int u, int v, ...)",
        "float  finput(int component, float u, float v, ...)",
        "vector  finput(int opinput, int planeindex, int u, int v, ...)",
        "vector4  finput(int opinput, int planeindex, int u, int v, ...)",
        "vector  finput(int opinput, int planeindex, float u, float v, ...)",
        "vector4  finput(int opinput, int planeindex, float u, float v, ...)",
        "float  finput(int opinput, int planeindex, int component, int u, int v, ...)",
        "float  finput(int opinput, int planeindex, int component, float u, float v, ...)",
        "vector  finput(int opinput, int planeindex, int arrayindex, int u, int v, int frame, ...)",
        "vector4  finput(int opinput, int planeindex, int arrayindex, int u, int v, int frame, ...)",
        "vector  finput(int opinput, int planeindex, int arrayindex, float u, float v, int frame, ...)",
        "vector4  finput(int opinput, int planeindex, int arrayindex, float u, float v, int frame, ...)",
        "float  finput(int opinput, int planeindex, int arrayindex, int component, int u, int v, int frame, ...)",
        "float  finput(int opinput, int planeindex, int arrayindex, int component, float u, float v, int frame, ...)"
      ]
    },
    {
      "name": "depthname",
      "description": "Returns the default name of the depth plane (as it appears in the\ncompositor preferences).",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/depthname.html",
      "usage": [
        "string  depthname()"
      ]
    },
    {
      "name": "colorname",
      "description": "Returns the default name of the color plane (as it appears in the\ncompositor preferences).",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/colorname.html",
      "usage": [
        "string  colorname()"
      ]
    },
    {
      "name": "dsmpixel",
      "description": "Reads the z-records stored in a pixel of a deep shadow map\nor deep camera map.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/dsmpixel.html",
      "usage": [
        "int  dsmpixel(string map, string channel, int x, int y, <type>&values[])"
      ]
    },
    {
      "name": "hasmetadata",
      "description": "Queries if metadata exists on a composite operator.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hasmetadata.html",
      "usage": [
        "int  hasmetadata(int opinput, string name)"
      ]
    },
    {
      "name": "hasplane",
      "description": "Returns 1 if the plane specified by the parameter exists in this\nCOP.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hasplane.html",
      "usage": [
        "int  hasplane(string planename)"
      ]
    },
    {
      "name": "iaspect",
      "description": "Returns the aspect ratio of the specified input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/iaspect.html",
      "usage": [
        "float  iaspect(int opinput)"
      ]
    },
    {
      "name": "iend",
      "description": "Returns the last frame of the specified input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/iend.html",
      "usage": [
        "int  iend(int opinput)"
      ]
    },
    {
      "name": "iendtime",
      "description": "Returns the end time of the specified input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/iendtime.html",
      "usage": [
        "float  iendtime(int opinput)"
      ]
    },
    {
      "name": "ichname",
      "description": "Returns the channel name of the indexed plane of the given input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ichname.html",
      "usage": [
        "string  ichname(int inputnum, int plane_index, int component_index)"
      ]
    },
    {
      "name": "ihasplane",
      "description": "Returns 1 if the specified input has a plane named planename.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ihasplane.html",
      "usage": [
        "int  ihasplane(int opinput, string planename)"
      ]
    },
    {
      "name": "inumplanes",
      "description": "Returns the number of planes in the given input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/inumplanes.html",
      "usage": [
        "int  inumplanes(int opinput)"
      ]
    },
    {
      "name": "iplaneindex",
      "description": "Returns the index of the plane named 'planename' in the specified input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/iplaneindex.html",
      "usage": [
        "int  iplaneindex(int opinput, string planename)"
      ]
    },
    {
      "name": "iplanename",
      "description": "Returns the name of the plane specified by the planeindex of the given input",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/iplanename.html",
      "usage": [
        "string  iplanename(int opinput, int planeindex)"
      ]
    },
    {
      "name": "iplanesize",
      "description": "Returns the number of components in the plane named planename in\nthe specified input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/iplanesize.html",
      "usage": [
        "int  iplanesize(int opinput, int planeindex)"
      ]
    },
    {
      "name": "irate",
      "description": "Returns the frame rate of the specified input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/irate.html",
      "usage": [
        "float  irate(int opinput)"
      ]
    },
    {
      "name": "istart",
      "description": "Returns the starting frame of the specified input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/istart.html",
      "usage": [
        "int  istart(int opinput)"
      ]
    },
    {
      "name": "istarttime",
      "description": "Returns the start time of the specified input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/istarttime.html",
      "usage": [
        "float  istarttime(int opinput)"
      ]
    },
    {
      "name": "iyres",
      "description": "Returns the Y resolution of the specified input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/iyres.html",
      "usage": [
        "int  iyres(int opinput)"
      ]
    },
    {
      "name": "ixres",
      "description": "Returns the X resolution of the specified input.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ixres.html",
      "usage": [
        "int  ixres(int opinput)"
      ]
    },
    {
      "name": "lumname",
      "description": "Returns the default name of the luminaence plane (as it appears in the\ncompositor preferences).",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/lumname.html",
      "usage": [
        "string  lumname()"
      ]
    },
    {
      "name": "maskname",
      "description": "Returns the default name of the mask plane (as it appears in the\ncompositor preferences).",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/maskname.html",
      "usage": [
        "string  maskname()"
      ]
    },
    {
      "name": "metadata",
      "description": "Returns a metadata value from a composite operator.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/metadata.html",
      "usage": [
        "<type> metadata(int opinput, string name)",
        "float|int metadata(int opinput, string name, int index)"
      ]
    },
    {
      "name": "ninput",
      "description": "Reads a component from a pixel and its eight neighbors.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ninput.html",
      "usage": [
        "matrix3  ninput(int opinput, int plane, int component, int array_index, int u, int v, int frame, ...)",
        "matrix3  ninput(int opinput, int plane, int component, int array_index, float u, float v, int frame, ...)"
      ]
    },
    {
      "name": "planesize",
      "description": "Returns the number of components in the plane (1 for scalar planes\nand up to 4 for vector planes).",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/planesize.html",
      "usage": [
        "int  planesize(int planeindex)"
      ]
    },
    {
      "name": "normalname",
      "description": "Returns the default name of the normal plane (as it appears in the\ncompositor preferences).",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/normalname.html",
      "usage": [
        "string  normalname()"
      ]
    },
    {
      "name": "planeindex",
      "description": "Returns the index of the plane specified by the parameter, starting\nat zero.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/planeindex.html",
      "usage": [
        "int  planeindex(string planename)"
      ]
    },
    {
      "name": "pointname",
      "description": "Returns the default name of the point plane (as it appears in the\ncompositor preferences).",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pointname.html",
      "usage": [
        "string  pointname()"
      ]
    },
    {
      "name": "planename",
      "description": "Returns the name of the plane specified by the index (e.",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/planename.html",
      "usage": [
        "string  planename(int planeindex)"
      ]
    },
    {
      "name": "velocityname",
      "description": "Returns the default name of the velocity plane (as it appears in the\ncompositor preferences).",
      "category": "Image Processing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/velocityname.html",
      "usage": [
        "string  velocityname()"
      ]
    },
    {
      "name": "ckspline",
      "description": "Samples a Catmull-Rom (Cardinal) spline defined by position/value keys.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ckspline.html",
      "usage": [
        "float  ckspline(float t, float value, float pos, ...)",
        "vector  ckspline(float t, vector value, float pos, ...)",
        "vector4  ckspline(float t, vector4 value, float pos, ...)"
      ]
    },
    {
      "name": "cspline",
      "description": "Samples a Catmull-Rom (Cardinal) spline defined by uniformly spaced keys.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cspline.html",
      "usage": [
        "float  cspline(float t, float val1, ...)",
        "vector  cspline(float t, vector val1, ...)",
        "vector4  cspline(float t, vector4 val1, ...)"
      ]
    },
    {
      "name": "efit",
      "description": "Takes the value in one range and shifts it to the corresponding value in a new range.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/efit.html",
      "usage": [
        "float  efit(float value, float omin, float omax, float nmin, float nmax)",
        "<vector> efit(<vector>value, <vector>omin, <vector>omax, <vector>nmin, <vector>nmax)",
        "<vector> efit(<vector>value, <vector>omin, <vector>omax, float nmin, float nmax)"
      ]
    },
    {
      "name": "fit",
      "description": "Takes the value in one range and shifts it to the corresponding value in a new range.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fit.html",
      "usage": [
        "float  fit(float value, float omin, float omax, float nmin, float nmax)",
        "<vector> fit(<vector>value, <vector>omin, <vector>omax, <vector>nmin, <vector>nmax)"
      ]
    },
    {
      "name": "fit10",
      "description": "Takes the value in the range (1, 0) and shifts it to the corresponding value in a new range.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fit10.html",
      "usage": [
        "float  fit10(float value, float nmin, float nmax)",
        "<vector> fit10(<vector>value, <vector>nmin, <vector>nmax)"
      ]
    },
    {
      "name": "clamp",
      "description": "Returns value clamped between min and max.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/clamp.html",
      "usage": [
        "int  clamp(int value, int min, int max)",
        "float  clamp(float value, float min, float max)",
        "vector2  clamp(vector2 value, vector2 min, vector2 max)",
        "vector  clamp(vector value, vector min, vector max)",
        "vector4  clamp(vector4 value, vector4 min, vector4 max)"
      ]
    },
    {
      "name": "fit01",
      "description": "Takes the value in the range (0, 1) and shifts it to the corresponding value in a new range.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fit01.html",
      "usage": [
        "float  fit01(float value, float nmin, float nmax)",
        "<vector> fit01(<vector>value, <vector>nmin, <vector>nmax)"
      ]
    },
    {
      "name": "fit11",
      "description": "Takes the value in the range (-1, 1) and shifts it to the corresponding value in a new range.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fit11.html",
      "usage": [
        "float  fit11(float value, float nmin, float nmax)",
        "<vector> fit11(<vector>value, <vector>nmin, <vector>nmax)"
      ]
    },
    {
      "name": "invlerp",
      "description": "Inverses a linear interpolation between the values.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/invlerp.html",
      "usage": [
        "float  invlerp(float a, float min, float max)",
        "<vector> invlerp(<vector>a, <vector>min, <vector>max)"
      ]
    },
    {
      "name": "lerp",
      "description": "Performs linear interpolation between the values.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/lerp.html",
      "usage": [
        "float  lerp(float value1, float value2, float amount)",
        "<vector> lerp(<vector>value1, <vector>value2, float amount)",
        "<vector> lerp(<vector>value1, <vector>value2, <vector>amount)",
        "bsdf  lerp(bsdf bsdf1, bsdf bsdf2, float amount)"
      ]
    },
    {
      "name": "lspline",
      "description": "Samples a polyline defined by linearly spaced values.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/lspline.html",
      "usage": [
        "float  lspline(float sample_pos, float value1, ...)",
        "vector  lspline(float sample_pos, vector value1, ...)",
        "vector4  lspline(float sample_pos, vector4 value1, ...)"
      ]
    },
    {
      "name": "lkspline",
      "description": "Samples a polyline between the key points.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/lkspline.html",
      "usage": [
        "float  lkspline(float sample_pos, float value1, float key_pos1, ...)",
        "vector  lkspline(float sample_pos, vector value1, float key_pos1, ...)",
        "vector4  lkspline(float sample_pos, vector4 value1, float key_pos1, ...)"
      ]
    },
    {
      "name": "smooth",
      "description": "Computes ease in/out interpolation between values.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/smooth.html",
      "usage": [
        "float  smooth(float value1, float value2, float amount)",
        "float  smooth(float value1, float value2, float amount, float rolloff)"
      ]
    },
    {
      "name": "slerp",
      "description": "Quaternion blend between q1 and q2 based on the bias.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/slerp.html",
      "usage": [
        "vector4  slerp(vector4 q1, vector4 q2, float bias)",
        "vector4  slerp(vector4 qs[], float weights[], int normalize=0)",
        "slerp(q1,q2,bias)",
        "slerp(array(q1,q2), array(1.0-bias,bias))",
        "matrix3  slerp(matrix3 m1, matrix3 m2, float bias)",
        "matrix  slerp(matrix m1, matrix m2, float bias)",
        "matrix3  slerp(matrix3 ms[], float weights[], int normalize=1)",
        "matrix  slerp(matrix ms[], float weights[], int normalize=1)"
      ]
    },
    {
      "name": "slerpv",
      "description": "Spherical blends between two vectors based on the bias.",
      "category": "Interpolation",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/slerpv.html",
      "usage": [
        "vector2  slerpv(vector2 v1, vector2 v2, float bias)",
        "vector  slerpv(vector v1, vector v2, float bias)"
      ]
    },
    {
      "name": "atten",
      "description": "Computes attenuated falloff.",
      "category": "light",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/atten.html",
      "usage": [
        "float  atten(float attenuation, float distance)"
      ]
    },
    {
      "name": "ambient",
      "description": "Returns the color of ambient light in the scene.",
      "category": "light",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ambient.html",
      "usage": [
        "vector  ambient(...)"
      ]
    },
    {
      "name": "asin",
      "description": "Returns the inverse sine of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/asin.html",
      "usage": [
        "float  asin(float n)",
        "vector2  asin(vector2 n)",
        "vector  asin(vector n)",
        "vector4  asin(vector4 n)",
        "asin()"
      ]
    },
    {
      "name": "acos",
      "description": "Returns the inverse cosine of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/acos.html",
      "usage": [
        "float  acos(float v)",
        "vector2  acos(vector2 v)",
        "vector4  acos(vector4 v)",
        "vector  acos(vector v)"
      ]
    },
    {
      "name": "fastshadow",
      "description": "Sends a ray from the position P along the direction specified by the\ndirection D.",
      "category": "light",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fastshadow.html",
      "usage": [
        "float  fastshadow(vector P, vector D, float bias, ...)"
      ]
    },
    {
      "name": "filtershadow",
      "description": "Sends a ray from the position P along direction D.",
      "category": "light",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/filtershadow.html",
      "usage": [
        "vector  filtershadow(vector P, vector D, float bias, ...)"
      ]
    },
    {
      "name": "abs",
      "description": "Returns the absolute value of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/abs.html",
      "usage": [
        "int  abs(int n)",
        "float  abs(float n)",
        "<vector> abs(<vector>v)"
      ]
    },
    {
      "name": "atan",
      "description": "Returns the inverse tangent of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/atan.html",
      "usage": [
        "float  atan(float n)",
        "float  atan(float y, float x)",
        "<vector> atan(<vector>v)",
        "atan()"
      ]
    },
    {
      "name": "atan2",
      "description": "Returns the inverse tangent of y/x.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/atan2.html",
      "usage": [
        "float  atan2(float y, float x)"
      ]
    },
    {
      "name": "avg",
      "description": "Returns the average value of the input(s)",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/avg.html",
      "usage": [
        "int  avg(int a)",
        "float  avg(float a)",
        "float  avg(float a, float b, ...)",
        "float  avg(vector2 v)",
        "float  avg(vector v)",
        "float  avg(vector4 v)",
        "vector2  avg(vector2 a, vector2 b, ...)",
        "vector  avg(vector a, vector b, ...)",
        "vector4  avg(vector4 a, vector4 b, ...)",
        "<type> avg(<type>arr[])"
      ]
    },
    {
      "name": "cbrt",
      "description": "Returns the cube root of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cbrt.html",
      "usage": [
        "float  cbrt(float n)",
        "vector2  cbrt(vector2 v)",
        "vector  cbrt(vector v)",
        "vector4  cbrt(vector4 v)"
      ]
    },
    {
      "name": "cosh",
      "description": "Returns the hyperbolic cosine of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cosh.html",
      "usage": [
        "float  cosh(float n)",
        "vector2  cosh(vector2 v)",
        "vector  cosh(vector v)",
        "vector4  cosh(vector4 v)",
        "cosh()"
      ]
    },
    {
      "name": "cos",
      "description": "Returns the cosine of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cos.html",
      "usage": [
        "float  cos(float n)",
        "vector2  cos(vector2 n)",
        "vector  cos(vector n)",
        "vector4  cos(vector4 n)",
        "cos()"
      ]
    },
    {
      "name": "ceil",
      "description": "Returns the smallest integer greater than or equal to the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ceil.html",
      "usage": [
        "float  ceil(float n)",
        "<vector> ceil(<vector>v)"
      ]
    },
    {
      "name": "combinelocaltransform",
      "description": "Combines Local and Parent Transforms with Scale Inheritance.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/combinelocaltransform.html",
      "usage": [
        "matrix  combinelocaltransform(matrix local, matrix parent_world, matrix parent_local, int scale_inherit_mode)",
        "matrix  combinelocaltransform(matrix local, matrix parent_world, matrix parent_local, int scale_inherit_mode, matrix &effective_local_transform)"
      ]
    },
    {
      "name": "cross",
      "description": "Returns the cross product between the two vectors.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cross.html",
      "usage": [
        "vector  cross(vector a, vector b)"
      ]
    },
    {
      "name": "cospi",
      "description": "Returns the cosine of the argument scaled by Pi.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cospi.html",
      "usage": [
        "float  cospi(float n)",
        "vector2  cospi(vector2 n)",
        "vector  cospi(vector n)",
        "vector4  cospi(vector4 n)",
        "cospi()"
      ]
    },
    {
      "name": "diag",
      "description": "Extracts diagonal entries or constructs a diagonal matrix.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/diag.html",
      "usage": [
        "vector2  diag(matrix2 m)",
        "vector  diag(matrix3 m)",
        "vector4  diag(matrix m)",
        "matrix2  diag(vector2 v)",
        "matrix3  diag(vector v)",
        "matrix  diag(vector4 v)"
      ]
    },
    {
      "name": "determinant",
      "description": "Computes the determinant of the matrix.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/determinant.html",
      "usage": [
        "float  determinant(matrix2 m)",
        "float  determinant(matrix3 m)",
        "float  determinant(matrix m)"
      ]
    },
    {
      "name": "diagonalizesymmetric",
      "description": "Diagonalizes Symmetric Matrices.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/diagonalizesymmetric.html",
      "usage": [
        "matrix2  diagonalizesymmetric(matrix2 symmat, vector2 &diag)",
        "matrix3  diagonalizesymmetric(matrix3 symmat, vector &diag)",
        "matrix  diagonalizesymmetric(matrix symmat, vector4 &diag)"
      ]
    },
    {
      "name": "distance_pointray",
      "description": "This function returns the closest distance between the point Q and the\nsemi-finite ray starting at O and extending in the direction D.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/distance_pointray.html",
      "usage": [
        "float  distance_pointray(vector Q, vector O, vector D)"
      ]
    },
    {
      "name": "distance_pointsegment",
      "description": "This function returns the closest distance between the point Q and a\nfinite line segment between points P0 and P1.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/distance_pointsegment.html",
      "usage": [
        "float  distance_pointsegment(vector Q, vector P0, vector P1)"
      ]
    },
    {
      "name": "distance_pointline",
      "description": "This function returns the closest distance between the point Q and the\ninfinite line going through O parallel to vector D.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/distance_pointline.html",
      "usage": [
        "float  distance_pointline(vector Q, vector O, vector D)"
      ]
    },
    {
      "name": "dot",
      "description": "Returns the dot product between the arguments.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/dot.html",
      "usage": [
        "float  dot(vector2 a, vector2 b)",
        "float  dot(vector a, vector b)",
        "float  dot(vector4 a, vector4 b)",
        "float  dot(vector a, vector4 b)",
        "float  dot(vector4 a, vector b)",
        "float  dot(matrix2 a, matrix2 b)",
        "float  dot(matrix3 a, matrix3 b)",
        "float  dot(matrix a, matrix b)",
        "float  dot(<type>a[], <type>b[])",
        "int  dot(int a[], int b[])",
        "dot(a, b) = dot(a[0], b[0]) + ... + dot(a[n-1], b[n-1])"
      ]
    },
    {
      "name": "Du",
      "description": "Returns the derivative of the given value with respect to U.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/Du.html",
      "usage": [
        "float  Du(float n, ...)",
        "vector  Du(vector n, ...)",
        "vector4  Du(vector4 n, ...)"
      ]
    },
    {
      "name": "Dv",
      "description": "Returns the derivative of the given value with respect to V.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/Dv.html",
      "usage": [
        "float  Dv(float n, ...)",
        "vector  Dv(vector n, ...)",
        "vector4  Dv(vector4 n, ...)"
      ]
    },
    {
      "name": "Dw",
      "description": "Returns the derivative of the given value with respect to the 3rd axis (for volume rendering).",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/Dw.html",
      "usage": [
        "float  Dw(float p, ...)",
        "vector  Dw(vector p, ...)",
        "vector4  Dw(vector4 p, ...)"
      ]
    },
    {
      "name": "eigenvalues",
      "description": "Computes the eigenvalues of a 3\u00d73 matrix.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/eigenvalues.html",
      "usage": [
        "void  eigenvalues(int &nroot, matrix3 mat, vector &real, vector &imaginary)"
      ]
    },
    {
      "name": "erf",
      "description": "Gauss error function.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/erf.html",
      "usage": [
        "float  erf(float v)",
        "vector2  erf(vector2 v)"
      ]
    },
    {
      "name": "erf_inv",
      "description": "Inverse Gauss error function.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/erf_inv.html",
      "usage": [
        "float  erf_inv(float v)",
        "erf_inv(erf(v)) = v = erf(erf_inv(v))",
        "n = mu + sqrt(2)*sigma*erf_inv(2*u - 1)"
      ]
    },
    {
      "name": "erfc",
      "description": "Gauss error function\u2019s complement.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/erfc.html",
      "usage": [
        "float  erfc(float v)"
      ]
    },
    {
      "name": "exp",
      "description": "Returns the exponential function of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/exp.html",
      "usage": [
        "float  exp(float n)",
        "<vector> exp(<vector>n)"
      ]
    },
    {
      "name": "extractlocaltransform",
      "description": "Extracts Local Transform from a World Transform with Scale Inheritance.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/extractlocaltransform.html",
      "usage": [
        "matrix  extractlocaltransform(matrix world, matrix parent_world, matrix parent_local, int scale_inherit_mode)",
        "matrix  extractlocaltransform(matrix world, matrix parent_world, matrix parent_local, int mode, matrix &effective_local_transform)"
      ]
    },
    {
      "name": "ident",
      "description": "Returns an identity matrix.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ident.html",
      "usage": [
        "<matrix> ident()"
      ]
    },
    {
      "name": "floor",
      "description": "Returns the largest integer less than or equal to the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/floor.html",
      "usage": [
        "float|int floor(float n)",
        "<vector> floor(<vector>v)"
      ]
    },
    {
      "name": "frac",
      "description": "Returns the fractional component of the floating point number.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/frac.html",
      "usage": [
        "float  frac(float n)",
        "<vector> frac(<vector>v)",
        "frac(1.5)"
      ]
    },
    {
      "name": "isfinite",
      "description": "Checks whether a value is a normal finite number.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isfinite.html",
      "usage": [
        "int  isfinite(float x)"
      ]
    },
    {
      "name": "invert",
      "description": "Inverts a matrix.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/invert.html",
      "usage": [
        "<matrix> invert(<matrix>m)"
      ]
    },
    {
      "name": "isnan",
      "description": "Checks whether a value is not a number.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isnan.html",
      "usage": [
        "int  isnan(float x)"
      ]
    },
    {
      "name": "isinf",
      "description": "Checks whether a value is a positive or negative infinity.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isinf.html",
      "usage": [
        "int  isinf(float x)"
      ]
    },
    {
      "name": "log10",
      "description": "Returns the logarithm (base 10) of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/log10.html",
      "usage": [
        "float  log10(float n)",
        "<vector> log10(<vector>n)"
      ]
    },
    {
      "name": "kspline",
      "description": "Returns an interpolated value along a curve defined by a basis and key/position pairs.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/kspline.html",
      "usage": [
        "float  kspline(string basis, float sample_pos, float value1, float key_pos1, ...)",
        "vector  kspline(string basis, float sample_pos, vector value1, float key_pos1, ...)",
        "vector4  kspline(string basis, float sample_pos, vector4 value1, float key_pos1, ...)"
      ]
    },
    {
      "name": "length",
      "description": "Returns the magnitude of a vector.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/length.html",
      "usage": [
        "float  length(float f)",
        "float  length(vector2 v)",
        "float  length(vector v)",
        "float  length(vector4 v)"
      ]
    },
    {
      "name": "log",
      "description": "Returns the natural logarithm of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/log.html",
      "usage": [
        "float  log(float n)",
        "<vector> log(<vector>v)"
      ]
    },
    {
      "name": "length2",
      "description": "Returns the squared distance of the vector or vector4.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/length2.html",
      "usage": [
        "float  length2(vector2 v)",
        "float  length2(vector v)",
        "float  length2(vector4 v)"
      ]
    },
    {
      "name": "makebasis",
      "description": "Creates an orthonormal basis given a z-axis vector.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/makebasis.html",
      "usage": [
        "void  makebasis(vector &xaxis, vector &yaxis, vector zaxis)",
        "void  makebasis(vector &xaxis, vector &yaxis, vector zaxis, vector u)"
      ]
    },
    {
      "name": "norm_1",
      "description": "Returns the induced matrix 1-norm.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/norm_1.html",
      "usage": [
        "float  norm_1(<matrix>m)"
      ]
    },
    {
      "name": "max",
      "description": "",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/max.html",
      "usage": [
        "int  max(int value1, int value2, ...)",
        "float  max(float value1, float value2, ...)",
        "<vector> max(<vector>value1, <vector>value2, ...)",
        "<type> max(<type>values[])",
        "float  max(<vector>values)",
        "<type> max(<type>value)"
      ]
    },
    {
      "name": "min",
      "description": "",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/min.html",
      "usage": [
        "int  min(int value1, int value2, ...)",
        "float  min(float value1, float value2, ...)",
        "<vector> min(<vector>value1, <vector>value2, ...)",
        "<type> min(<type>values[])",
        "float  min(<vector>v)",
        "<type> min(<type>value)"
      ]
    },
    {
      "name": "norm_max",
      "description": "Returns the matrix max-norm.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/norm_max.html",
      "usage": [
        "float  norm_max(<matrix>m)"
      ]
    },
    {
      "name": "norm_inf",
      "description": "Returns the induced matrix infinity-norm.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/norm_inf.html",
      "usage": [
        "float  norm_inf(<matrix>m)"
      ]
    },
    {
      "name": "normalize",
      "description": "Returns a normalized vector.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/normalize.html",
      "usage": [
        "<vector> normalize(<vector>v)"
      ]
    },
    {
      "name": "norm_fro",
      "description": "Returns the Frobenius norm of a matrix.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/norm_fro.html",
      "usage": [
        "float  norm_fro(<matrix>m)"
      ]
    },
    {
      "name": "norm_spectral",
      "description": "Returns the matrix spectral norm.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/norm_spectral.html",
      "usage": [
        "float  norm_spectral(<matrix>m)"
      ]
    },
    {
      "name": "pinvert",
      "description": "Computes the pseudo-inverse of a matrix.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pinvert.html",
      "usage": [
        "matrix3  pinvert(matrix3 m)"
      ]
    },
    {
      "name": "planesphereintersect",
      "description": "Computes the intersection of a 3D sphere and an infinite 3D plane.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/planesphereintersect.html",
      "usage": [
        "int  planesphereintersect(vector plane_pos, vector plane_normal, vector sphere_pos, float sphere_radius, vector &intersect_pos, float &intersect_radius, float &intersect_distance)"
      ]
    },
    {
      "name": "outerproduct",
      "description": "Returns the outer product between the arguments.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/outerproduct.html",
      "usage": [
        "matrix2  outerproduct(vector2 v, vector2 v)",
        "matrix3  outerproduct(vector v, vector v)",
        "matrix  outerproduct(vector4 v, vector4 v)"
      ]
    },
    {
      "name": "pow",
      "description": "Raises the first argument to the power of the second argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pow.html",
      "usage": [
        "float  pow(float n, float exponent)",
        "<vector> pow(<vector>v, float exponent)"
      ]
    },
    {
      "name": "predicate_insphere",
      "description": "Determines if a point is inside or outside a tetrahedron circumsphere.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/predicate_insphere.html",
      "usage": [
        "float  predicate_insphere(vector a, vector b, vector c, vector d, vector e)"
      ]
    },
    {
      "name": "predicate_incircle",
      "description": "Determines if a point is inside or outside a triangle circumcircle.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/predicate_incircle.html",
      "usage": [
        "float  predicate_incircle(vector2 a, vector2 b, vector2 c, vector2 d)"
      ]
    },
    {
      "name": "predicate_orient2d",
      "description": "Determines the orientation of a point with respect to a line.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/predicate_orient2d.html",
      "usage": [
        "float  predicate_orient2d(vector2 a, vector2 b, vector2 c)"
      ]
    },
    {
      "name": "predicate_orient3d",
      "description": "Determines the orientation of a point with respect to a plane.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/predicate_orient3d.html",
      "usage": [
        "float  predicate_orient3d(vector a, vector b, vector c, vector d)"
      ]
    },
    {
      "name": "premul",
      "description": "Pre multiply matrices.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/premul.html",
      "usage": [
        "void  premul(matrix2 &a, matrix2 b)",
        "void  premul(matrix &a, matrix b)",
        "void  premul(matrix3 &a, matrix3 b)",
        "void  premul(matrix2 &m, matrix2 a, matrix2 b)",
        "void  premul(matrix &m, matrix a, matrix b)",
        "void  premul(matrix3 &m, matrix3 a, matrix3 b)"
      ]
    },
    {
      "name": "product",
      "description": "Returns the product of a list of numbers.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/product.html",
      "usage": [
        "float  product(float n)",
        "int  product(int n)",
        "float  product(vector2 v)",
        "float  product(vector v)",
        "float  product(vector4 v)",
        "int  product(int arr[])",
        "float  product(float arr[])",
        "<vector> product(<vector>arr[])"
      ]
    },
    {
      "name": "ptlined",
      "description": "This function returns the closest distance between the point Q and a\nfinite line segment between points P0 and P1.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ptlined.html",
      "usage": [
        "float  ptlined(vector P0, vector P1, vector Q)"
      ]
    },
    {
      "name": "qinvert",
      "description": "Inverts a quaternion rotation.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/qinvert.html",
      "usage": [
        "vector4  qinvert(vector4 quaternion)"
      ]
    },
    {
      "name": "qdistance",
      "description": "Finds distance between two quaternions.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/qdistance.html",
      "usage": [
        "float  qdistance(vector4 q1, vector4 q2)"
      ]
    },
    {
      "name": "quaternion",
      "description": "Creates a vector4 representing a quaternion.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/quaternion.html",
      "usage": [
        "vector4  quaternion(matrix3 rotations)",
        "vector4  quaternion(float angle, vector axis)",
        "vector4  quaternion(vector angleaxis)"
      ]
    },
    {
      "name": "qmultiply",
      "description": "Multiplies two quaternions and returns the result.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/qmultiply.html",
      "usage": [
        "vector4  qmultiply(vector4 q1, vector4 q2)"
      ]
    },
    {
      "name": "qrotate",
      "description": "Rotates a vector by a quaternion.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/qrotate.html",
      "usage": [
        "vector  qrotate(vector4 quaternion, vector v)"
      ]
    },
    {
      "name": "rint",
      "description": "Rounds the number to the closest whole number.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/rint.html",
      "usage": [
        "float  rint(float n)",
        "<vector> rint(<vector>v)"
      ]
    },
    {
      "name": "shl",
      "description": "Bit-shifts an integer left.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/shl.html",
      "usage": [
        "int  shl(int a, int bits)"
      ]
    },
    {
      "name": "shr",
      "description": "Bit-shifts an integer right.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/shr.html",
      "usage": [
        "int  shr(int a, int bits)",
        "shr(-1, 2)"
      ]
    },
    {
      "name": "resample_linear",
      "description": "",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/resample_linear.html",
      "usage": [
        "float [] resample_linear(float input[], int new_length)",
        "vector [] resample_linear(vector input[], int new_length)",
        "vector2 [] resample_linear(vector2 input[], int new_length)",
        "vector4 [] resample_linear(vector4 input[], int new_length)"
      ]
    },
    {
      "name": "slideframe",
      "description": "Finds the normal component of frame slid along a curve.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/slideframe.html",
      "usage": [
        "vector  slideframe(vector t0, vector t1, vector v0)",
        "vector  slideframe(vector x0, vector t0, vector v0, vector x1, vector t1)"
      ]
    },
    {
      "name": "sinh",
      "description": "Returns the hyperbolic sine of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sinh.html",
      "usage": [
        "float  sinh(float n)",
        "vector2  sinh(vector2 v)",
        "vector  sinh(vector v)",
        "vector4  sinh(vector4 v)",
        "sinh()"
      ]
    },
    {
      "name": "shrz",
      "description": "Bit-shifts an integer right.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/shrz.html",
      "usage": [
        "int  shrz(int a, int bits)",
        "shrz(-1, 2)"
      ]
    },
    {
      "name": "sinpi",
      "description": "Returns the sine of the argument scaled by Pi.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sinpi.html",
      "usage": [
        "<type> sinpi(<type>n)"
      ]
    },
    {
      "name": "sin",
      "description": "Returns the sine of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sin.html",
      "usage": [
        "<type> sin(<type>n)"
      ]
    },
    {
      "name": "solvecubic",
      "description": "Solves a cubic function returning the number of real roots.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/solvecubic.html",
      "usage": [
        "int  solvecubic(float a, float b, float c, float d, float &t1, float &t2, float &t3)",
        "int  solvecubic(float a, float b, float c, float d, vector2 &t1, vector2 &t2, vector2 &t3)"
      ]
    },
    {
      "name": "sign",
      "description": "Returns -1, 0, or 1 depending on the sign of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sign.html",
      "usage": [
        "int  sign(int n)",
        "float  sign(float n)",
        "vector2  sign(vector2 v)",
        "vector  sign(vector v)",
        "vector4  sign(vector4 v)"
      ]
    },
    {
      "name": "solvetriangleSSS",
      "description": "Finds the angles of a triangle from its sides.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/solvetriangleSSS.html",
      "usage": [
        "vector  solvetriangleSSS(vector sides)",
        "vector  solvetriangleSSS(float a, float b, float c)"
      ]
    },
    {
      "name": "solvepoly",
      "description": "Finds the real roots of a polynomial.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/solvepoly.html",
      "usage": [
        "int  solvepoly(float coef[], float &roots[], int maxiter=0)"
      ]
    },
    {
      "name": "solvequadratic",
      "description": "Solves a quadratic function returning the number of real roots.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/solvequadratic.html",
      "usage": [
        "int  solvequadratic(float a, float b, float c, float &t1, float &t2)",
        "int  solvequadratic(float a, float b, float c, vector2 &t1, vector2 &t2)"
      ]
    },
    {
      "name": "spline",
      "description": "Samples a value along a polyline or spline curve.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/spline.html",
      "usage": [
        "float  spline(string basis, float sample_pos, float value1, ...)",
        "vector  spline(string basis, float sample_pos, vector value1, ...)",
        "vector4  spline(string basis, float sample_pos, vector4 value1, ...)",
        "float  spline(string basis, float sample_pos, float values[], ...)",
        "vector  spline(string basis, float sample_pos, vector values[], ...)",
        "vector4  spline(string basis, float sample_pos, vector4 values[], ...)",
        "float  spline(string bases[], float sample_pos, float values[], ...)",
        "vector  spline(string bases[], float sample_pos, vector values[], ...)",
        "vector4  spline(string bases[], float sample_pos, vector4 values[], ...)",
        "float  spline(string bases[], float sample_pos, float values[], float positions[], ...)",
        "vector  spline(string bases[], float sample_pos, vector values[], float positions[], ...)",
        "vector4  spline(string bases[], float sample_pos, vector4 values[], float positions[], ...)"
      ]
    },
    {
      "name": "spline_cdf",
      "description": "Generate a cumulative distribution function (CDF) by sampling a spline curve.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/spline_cdf.html",
      "usage": [
        "float [] spline_cdf(string bases[], float values[], float positions[], ...)"
      ]
    },
    {
      "name": "sum",
      "description": "Returns the sum of a list of numbers.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sum.html",
      "usage": [
        "float  sum(float n)",
        "int  sum(int n)",
        "float  sum(<vector>v)",
        "float  sum(matrix2 m)",
        "float  sum(matrix3 m)",
        "float  sum(matrix m)",
        "int  sum(int nums[])",
        "float  sum(float nums[])",
        "<vector> sum(<vector>arr[])",
        "matrix2  sum(matrix2 arr[])",
        "matrix3  sum(matrix3 arr[])",
        "matrix  sum(matrix arr[])"
      ]
    },
    {
      "name": "sqrt",
      "description": "Returns the square root of the argument.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sqrt.html",
      "usage": [
        "float  sqrt(float value)",
        "<vector> sqrt(<vector>value)"
      ]
    },
    {
      "name": "svddecomp",
      "description": "Computes the singular value decomposition of a given matrix.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/svddecomp.html",
      "usage": [
        "void  svddecomp(matrix2 input_M, matrix2 &output_U, vector2 &output_S, matrix2 &output_V)",
        "void  svddecomp(matrix3 input_M, matrix3 &output_U, vector &output_S, matrix3 &output_V)",
        "void  svddecomp(matrix input_M, matrix &output_U, vector4 &output_S, matrix &output_V)",
        "vector2  svddecomp(matrix2 input_M)",
        "vector  svddecomp(matrix3 input_M)",
        "vector4  svddecomp(matrix input_M)"
      ]
    },
    {
      "name": "tanpi",
      "description": "Returns the trigonometric tangent of the argument scaled by Pi",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/tanpi.html",
      "usage": [
        "float  tanpi(float n)",
        "vector2  tanpi(vector2 v)",
        "vector  tanpi(vector v)",
        "vector4  tanpi(vector4 v)",
        "tanpi()"
      ]
    },
    {
      "name": "tan",
      "description": "Returns the trigonometric tangent of the argument",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/tan.html",
      "usage": [
        "float  tan(float n)",
        "vector2  tan(vector2 v)",
        "vector  tan(vector v)",
        "vector4  tan(vector4 v)",
        "tan()"
      ]
    },
    {
      "name": "tanh",
      "description": "Returns the hyperbolic tangent of the argument",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/tanh.html",
      "usage": [
        "float  tanh(float n)",
        "vector2  tanh(vector2 n)",
        "vector  tanh(vector n)",
        "vector4  tanh(vector4 n)",
        "tanh()"
      ]
    },
    {
      "name": "tr",
      "description": "Returns the trace of the given matrix.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/tr.html",
      "usage": [
        "float  tr(<matrix>m)"
      ]
    },
    {
      "name": "transpose",
      "description": "Transposes the given matrix.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/transpose.html",
      "usage": [
        "void  transpose(<matrix>&m)",
        "<matrix> transpose(<matrix>m)"
      ]
    },
    {
      "name": "distance",
      "description": "Returns the distance between two points.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/distance.html",
      "usage": [
        "float  distance(vector2 a, vector2 b)",
        "float  distance(vector a, vector b)",
        "float  distance(vector4 a, vector4 b)"
      ]
    },
    {
      "name": "trunc",
      "description": "Removes the fractional part of a floating point number.",
      "category": "Math",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/trunc.html",
      "usage": [
        "float  trunc(float x)",
        "vector2  trunc(vector2 x)",
        "vector  trunc(vector x)",
        "vector4  trunc(vector4 x)",
        "trunc()"
      ]
    },
    {
      "name": "getbbox_center",
      "description": "Returns the center of the bounding box for the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getbbox_center.html",
      "usage": [
        "vector  getbbox_center(<geometry>geometry)",
        "vector  getbbox_center(<geometry>geometry, string primgroup)"
      ]
    },
    {
      "name": "getbbox",
      "description": "Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getbbox.html",
      "usage": [
        "void  getbbox(<geometry>geometry, vector &min, vector &max)",
        "void  getbbox(<geometry>geometry, string primgroup, vector &min, vector &max)",
        "void  getbbox(vector &min, vector &max)"
      ]
    },
    {
      "name": "distance2",
      "description": "Returns the squared distance between the two points.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/distance2.html",
      "usage": [
        "float  distance2(vector2 a, vector2 b)",
        "float  distance2(vector a, vector b)",
        "float  distance2(vector4 a, vector4 b)"
      ]
    },
    {
      "name": "getbbox_size",
      "description": "Returns the size of the bounding box for the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getbbox_size.html",
      "usage": [
        "vector  getbbox_size(<geometry>geometry)",
        "vector  getbbox_size(<geometry>geometry, string primgroup)"
      ]
    },
    {
      "name": "getbbox_max",
      "description": "Returns the maximum of the bounding box for the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getbbox_max.html",
      "usage": [
        "vector  getbbox_max(<geometry>geometry)",
        "vector  getbbox_max(<geometry>geometry, string primgroup)"
      ]
    },
    {
      "name": "getbbox_min",
      "description": "Returns the minimum of the bounding box for the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getbbox_min.html",
      "usage": [
        "vector  getbbox_min(<geometry>geometry)",
        "vector  getbbox_min(<geometry>geometry, string primgroup)"
      ]
    },
    {
      "name": "getpointbbox",
      "description": "Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getpointbbox.html",
      "usage": [
        "void  getpointbbox(<geometry>geometry, vector &min, vector &max)",
        "void  getpointbbox(<geometry>geometry, string pointgroup, vector &min, vector &max)"
      ]
    },
    {
      "name": "getbounds",
      "description": "Returns the bounding box of the geometry specified by the filename.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getbounds.html",
      "usage": [
        "int  getbounds(string filename, vector &min, vector &max)",
        "int  getbounds(string filename, string group, vector &min, vector &max)"
      ]
    },
    {
      "name": "getpointbbox_max",
      "description": "Returns the maximum of the bounding box for the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getpointbbox_max.html",
      "usage": [
        "vector  getpointbbox_max(<geometry>geometry)",
        "vector  getpointbbox_max(<geometry>geometry, string pointgroup)"
      ]
    },
    {
      "name": "getpointbbox_center",
      "description": "Returns the center of the bounding box for the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getpointbbox_center.html",
      "usage": [
        "vector  getpointbbox_center(<geometry>geometry)",
        "vector  getpointbbox_center(<geometry>geometry, string pointgroup)"
      ]
    },
    {
      "name": "getpointbbox_min",
      "description": "Returns the minimum of the bounding box for the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getpointbbox_min.html",
      "usage": [
        "vector  getpointbbox_min(<geometry>geometry)",
        "vector  getpointbbox_min(<geometry>geometry, string pointgroup)"
      ]
    },
    {
      "name": "getpointbbox_size",
      "description": "Returns the size of the bounding box for the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getpointbbox_size.html",
      "usage": [
        "vector  getpointbbox_size(<geometry>geometry)",
        "vector  getpointbbox_size(<geometry>geometry, string pointgroup)"
      ]
    },
    {
      "name": "relbbox",
      "description": "Returns the relative position of the point given with respect to the bounding box of the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/relbbox.html",
      "usage": [
        "vector  relbbox(<geometry>geometry, vector position)",
        "vector  relbbox(<geometry>geometry, string primgroup, vector position)",
        "vector  relbbox(vector position)"
      ]
    },
    {
      "name": "planepointdistance",
      "description": "Computes the distance and closest point of a point to an infinite plane.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/planepointdistance.html",
      "usage": [
        "float  planepointdistance(vector plane_pos, vector plane_normal, vector point_pos, vector &intersect_pos)"
      ]
    },
    {
      "name": "relpointbbox",
      "description": "Returns the relative position of the point given with respect to the bounding box of the geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/relpointbbox.html",
      "usage": [
        "vector  relpointbbox(<geometry>geometry, vector position)",
        "vector  relpointbbox(<geometry>geometry, string pointgroup, vector position)"
      ]
    },
    {
      "name": "surfacedist",
      "description": "Finds the distance of a point to a group of points along the surface of a geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/surfacedist.html",
      "usage": [
        "float  surfacedist(<geometry>geometry, string ptgroup, string P_attribute, int search_pt, int &closest_pt, string distance_metric)",
        "float  surfacedist(<geometry>geometry, string ptgroup, string P_attribute, int search_pt, float max_radius, int &closest_pt, string distance_metric)"
      ]
    },
    {
      "name": "uvdist",
      "description": "Finds the distance of a uv coordinate to a geometry in uv space.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/uvdist.html",
      "usage": [
        "float  uvdist(<geometry>geometry, string uvname, vector uv, int &prim, vector &primuv)",
        "float  uvdist(<geometry>geometry, string uvname, vector uv, int &prim, vector &primuv, float maxdist)",
        "float  uvdist(<geometry>geometry, string primgroup, string uvname, vector uv, int &prim, vector &primuv)",
        "float  uvdist(<geometry>geometry, string primgroup, string uvname, vector uv, int &prim, vector &primuv, float maxdist)"
      ]
    },
    {
      "name": "windingnumber",
      "description": "Computes the winding number of a mesh around a point. Winding number indicates how many times a geometry wraps around a point. Useful for inside/outside test, the winding number is equal to one inside of the mesh and zero outside.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/windingnumber.html",
      "usage": [
        "float  windingnumber(<geometry>geometry, vector origin)",
        "float  windingnumber(<geometry>geometry, vector origin, float accuracy)",
        "float  windingnumber(<geometry>geometry, string primgroup, vector origin)",
        "float  windingnumber(<geometry>geometry, string primgroup, vector origin, float accuracy)"
      ]
    },
    {
      "name": "metaimport",
      "description": "Once you get a handle to a metaball using metastart and metanext, you\ncan query attributes of the metaball with metaimport.",
      "category": "metaball",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/metaimport.html",
      "usage": [
        "int  metaimport(int handle, string attrib, vector P, <type>&value)",
        "<type>[] metaimport(string file, string attribute, vector P)"
      ]
    },
    {
      "name": "windingnumber2d",
      "description": "Computes the winding number of a curve in XY plane around a point. Winding number indicates how many times a curve wraps around a point. Useful for inside/outside test, the winding number is equal to one inside of the curve and zero outside.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/windingnumber2d.html",
      "usage": [
        "float  windingnumber2d(<geometry>geometry, vector origin)",
        "float  windingnumber2d(<geometry>geometry, vector origin, float accuracy)",
        "float  windingnumber2d(<geometry>geometry, string primgroup, vector origin)",
        "float  windingnumber2d(<geometry>geometry, string primgroup, vector origin, float accuracy)"
      ]
    },
    {
      "name": "xyzdist",
      "description": "Finds the distance from a point to the closest location on surface geometry.",
      "category": "measure",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/xyzdist.html",
      "usage": [
        "float  xyzdist(<geometry>geometry, vector origin)",
        "float  xyzdist(<geometry>geometry, vector origin, int &prim, vector &uv)",
        "float  xyzdist(<geometry>geometry, vector origin, int &prim, vector &uv, float maxdist)",
        "float  xyzdist(<geometry>geometry, string primgroup, vector origin)",
        "float  xyzdist(<geometry>geometry, string primgroup, vector origin, int &prim, vector &uv)",
        "float  xyzdist(<geometry>geometry, string primgroup, vector origin, int &prim, vector &uv, float maxdist)"
      ]
    },
    {
      "name": "metanext",
      "description": "Iterate to the next metaball in the list of metaballs returned by the metastart() function.",
      "category": "metaball",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/metanext.html",
      "usage": [
        "int  metanext(int handle)"
      ]
    },
    {
      "name": "metaweight",
      "description": "Returns the metaweight of the geometry at position p.",
      "category": "metaball",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/metaweight.html",
      "usage": [
        "float  metaweight(<geometry>geometry, vector p)"
      ]
    },
    {
      "name": "metastart",
      "description": "Open a geometry file and return a handle for the metaballs of\ninterest, at the position p.",
      "category": "metaball",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/metastart.html",
      "usage": [
        "int  metastart(string filename, vector p)"
      ]
    },
    {
      "name": "metamarch",
      "description": "Takes the ray defined by p0 and p1 and partitions it into zero or\nmore sub-intervals where each interval intersects a cluster of metaballs\nfrom filename.",
      "category": "metaball",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/metamarch.html",
      "usage": [
        "int  metamarch(int &index, string filename, vector &p0, vector &p1, float displace_bound)"
      ]
    },
    {
      "name": "addvariablename",
      "description": "Adds a mapping for an attribute to a local variable.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/addvariablename.html",
      "usage": [
        "void  addvariablename(string aname, string vname)",
        "int  addvariablename(int geohandle, string aname, string vname)"
      ]
    },
    {
      "name": "ch",
      "description": "Evaluates a channel (or parameter) and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ch.html",
      "usage": [
        "float  ch(string channel)",
        "float  ch(string channel, float time_in_sec)",
        "string  ch(string channel)",
        "string  ch(string channel, float time_in_sec)",
        "string  ch(string channel, float time_in_sec)",
        "float  ch(int op_id, int parm_index, int vector_index)",
        "float  ch(int op_id, int parm_index, int vector_index, float time_in_sec)"
      ]
    },
    {
      "name": "ch2",
      "description": "Evaluates a channel (or parameter) and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ch2.html",
      "usage": [
        "matrix2  ch2(string channel)",
        "matrix2  ch2(string channel, float time)"
      ]
    },
    {
      "name": "chdict",
      "description": "Evaluates a key-value dictionary parameter and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chdict.html",
      "usage": [
        "dict  chdict(string channel)"
      ]
    },
    {
      "name": "ch3",
      "description": "Evaluates a channel (or parameter) and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ch3.html",
      "usage": [
        "matrix3  ch3(string channel)",
        "matrix3  ch3(string channel, float time)"
      ]
    },
    {
      "name": "chexpr",
      "description": "Evaluates a channel with a new segment expression.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chexpr.html",
      "usage": [
        "float  chexpr(string channel, string new_expr_function)"
      ]
    },
    {
      "name": "ch4",
      "description": "Evaluates a channel (or parameter) and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ch4.html",
      "usage": [
        "matrix  ch4(string channel)",
        "matrix  ch4(string channel, float time)"
      ]
    },
    {
      "name": "chexprf",
      "description": "Evaluates a channel with a new segment expression at a given frame.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chexprf.html",
      "usage": [
        "float  chexprf(string channel, string new_expr_function, float frame)"
      ]
    },
    {
      "name": "chexprt",
      "description": "Evaluates a channel with a new segment expression at a given time.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chexprt.html",
      "usage": [
        "float  chexprt(string channel, string new_expr_function, float time_in_seconds)"
      ]
    },
    {
      "name": "chf",
      "description": "Evaluates a channel (or parameter) and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chf.html",
      "usage": [
        "float  chf(string channel)",
        "float  chf(string channel, float time_in_sec)",
        "float  chf(int op_id, int parm_index, int vector_index)",
        "float  chf(int op_id, int parm_index, int vector_index, float time_in_sec)"
      ]
    },
    {
      "name": "chi",
      "description": "Evaluates a channel (or parameter) and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chi.html",
      "usage": [
        "int  chi(string channel)",
        "int  chi(string channel, float time)"
      ]
    },
    {
      "name": "chid",
      "description": "Resolves a channel string (or parameter) and return op_id, parm_index and vector_index.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chid.html",
      "usage": [
        "void  chid(string channel_path, int &op_id, int &parm_index, int &vector_index)",
        "void  chid(string op_path, string channel_name, int &op_id, int &parm_index, int &vector_index)",
        "int  chid(int op_id, int parm_index, int vector_index)"
      ]
    },
    {
      "name": "chp",
      "description": "Evaluates a channel (or parameter) and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chp.html",
      "usage": [
        "vector4  chp(string channel)",
        "vector4  chp(string channel, float time)"
      ]
    },
    {
      "name": "chrampderiv",
      "description": "Evaluates the derivative of a parm parameter with respect to position.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chrampderiv.html",
      "usage": [
        "float  chrampderiv(string channel, float ramppos)",
        "float  chrampderiv(string channel, float ramppos, float time)",
        "vector  chrampderiv(string channel, float ramppos)",
        "vector  chrampderiv(string channel, float ramppos, float time)"
      ]
    },
    {
      "name": "chramp",
      "description": "Evaluates a ramp parameter and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chramp.html",
      "usage": [
        "float  chramp(string channel, float ramppos)",
        "float  chramp(string channel, float ramppos, float time)",
        "vector  chramp(string channel, float ramppos)",
        "vector  chramp(string channel, float ramppos, float time)"
      ]
    },
    {
      "name": "chsraw",
      "description": "Returns the raw string channel (or parameter).",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chsraw.html",
      "usage": [
        "string  chsraw(string channel)"
      ]
    },
    {
      "name": "chsop",
      "description": "Evaluates an operator path parameter and return the path to the operator.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chsop.html",
      "usage": [
        "string  chsop(string channel)",
        "string  chsop(string channel, float time)"
      ]
    },
    {
      "name": "chs",
      "description": "Evaluates a channel (or parameter) and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chs.html",
      "usage": [
        "string  chs(string channel)",
        "string  chs(string channel, float time)"
      ]
    },
    {
      "name": "cregiondeformtransform",
      "description": "Returns the deform transform associated with a Capture Region SOP.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cregiondeformtransform.html",
      "usage": [
        "matrix  cregiondeformtransform(string path)",
        "matrix  cregiondeformtransform(string path, float time)",
        "matrix  cregiondeformtransform(int op_id)",
        "matrix  cregiondeformtransform(int op_id, float time)"
      ]
    },
    {
      "name": "chv",
      "description": "Evaluates a channel or parameter, and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chv.html",
      "usage": [
        "vector  chv(string channel)",
        "vector  chv(string channel, float time)",
        "vector  chv(int opid, int pid)",
        "vector  chv(int opid, int pid, float time)"
      ]
    },
    {
      "name": "chu",
      "description": "Evaluates a channel or parameter, and return its value.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chu.html",
      "usage": [
        "vector2  chu(string channel)",
        "vector2  chu(string channel, float time)"
      ]
    },
    {
      "name": "cregioncapturetransform",
      "description": "Returns the capture transform associated with a Capture Region SOP.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cregioncapturetransform.html",
      "usage": [
        "matrix  cregioncapturetransform(string path)",
        "matrix  cregioncapturetransform(string path, float time)",
        "matrix  cregioncapturetransform(int op_id)",
        "matrix  cregioncapturetransform(int op_id, float time)"
      ]
    },
    {
      "name": "opfullpath",
      "description": "Returns the full path for the given relative path",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/opfullpath.html",
      "usage": [
        "string  opfullpath(string relative_path)",
        "opfullpath(\".\")",
        "opfullpath(\"..\")"
      ]
    },
    {
      "name": "cregionoverridetransform",
      "description": "Returns the capture or deform transform associated with a Capture Region SOP based on the global capture override flag.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cregionoverridetransform.html",
      "usage": [
        "matrix  cregionoverridetransform(string path)",
        "matrix  cregionoverridetransform(string path, float time)",
        "matrix  cregionoverridetransform(int op_id)",
        "matrix  cregionoverridetransform(int op_id, float time)"
      ]
    },
    {
      "name": "isconnected",
      "description": "Returns 1 if input_number is connected, or 0 if the input is not connected.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isconnected.html",
      "usage": [
        "int  isconnected(int opinput)"
      ]
    },
    {
      "name": "opid",
      "description": "Resolves an operator path string and return its op_id.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/opid.html",
      "usage": [
        "int  opid(string op_path)",
        "int  opid(int op_id)"
      ]
    },
    {
      "name": "opparentbonetransform",
      "description": "Returns the parent bone transform associated with an OP.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/opparentbonetransform.html",
      "usage": [
        "matrix  opparentbonetransform(string path)",
        "matrix  opparentbonetransform(string path, float time)",
        "matrix  opparentbonetransform(int opid)",
        "matrix  opparentbonetransform(int opid, float time)"
      ]
    },
    {
      "name": "opparenttransform",
      "description": "Returns the parent transform associated with an OP.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/opparenttransform.html",
      "usage": [
        "matrix  opparenttransform(string path)",
        "matrix  opparenttransform(string path, float time)",
        "matrix  opparenttransform(int opid)",
        "matrix  opparenttransform(int opid, float time)"
      ]
    },
    {
      "name": "opparmtransform",
      "description": "Returns the parm transform associated with an OP.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/opparmtransform.html",
      "usage": [
        "matrix  opparmtransform(string path)",
        "matrix  opparmtransform(string path, float time)",
        "matrix  opparmtransform(int opid)",
        "matrix  opparmtransform(int opid, float time)"
      ]
    },
    {
      "name": "oppreparmtransform",
      "description": "Returns the pre and parm transform associated with an OP.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/oppreparmtransform.html",
      "usage": [
        "matrix  oppreparmtransform(string path)",
        "matrix  oppreparmtransform(string path, float time)",
        "matrix  oppreparmtransform(int opid)",
        "matrix  oppreparmtransform(int opid, float time)"
      ]
    },
    {
      "name": "oppreconstrainttransform",
      "description": "Returns the preconstraint transform associated with an OP.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/oppreconstrainttransform.html",
      "usage": [
        "matrix  oppreconstrainttransform(string path)",
        "matrix  oppreconstrainttransform(string path, float time)",
        "matrix  oppreconstrainttransform(int opid)",
        "matrix  oppreconstrainttransform(int opid, float time)"
      ]
    },
    {
      "name": "oppretransform",
      "description": "Returns the pretransform associated with an OP.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/oppretransform.html",
      "usage": [
        "matrix  oppretransform(string path)",
        "matrix  oppretransform(string path, float time)",
        "matrix  oppretransform(int opid)",
        "matrix  oppretransform(int opid, float time)"
      ]
    },
    {
      "name": "opprerawparmtransform",
      "description": "Returns the pre and raw parm transform associated with an OP.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/opprerawparmtransform.html",
      "usage": [
        "matrix  opprerawparmtransform(string path)",
        "matrix  opprerawparmtransform(string path, float time)",
        "matrix  opprerawparmtransform(int opid)",
        "matrix  opprerawparmtransform(int opid, float time)",
        "matrix  opprerawparmtransform(int opid, int trsorder, int xyzorder, int mask)"
      ]
    },
    {
      "name": "oprawparmtransform",
      "description": "Returns the raw parm transform associated with an OP.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/oprawparmtransform.html",
      "usage": [
        "matrix  oprawparmtransform(string path)",
        "matrix  oprawparmtransform(string path, float time)",
        "matrix  oprawparmtransform(int opid)",
        "matrix  oprawparmtransform(int opid, float time)",
        "matrix  oprawparmtransform(int opid, int trsorder, int xyzorder, int mask)"
      ]
    },
    {
      "name": "anoise",
      "description": "Generates alligator noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/anoise.html",
      "usage": [
        "float  anoise(vector pos)",
        "vector  anoise(vector pos)",
        "float  anoise(vector pos, int turbulence, float rough, float atten)",
        "vector  anoise(vector pos, int turbulence, float rough, float atten)",
        "float  anoise(vector pos, int periodX, int periodY, int periodZ)",
        "vector  anoise(vector pos, int periodX, int periodY, int periodZ)",
        "float  anoise(vector pos, int periodX, int periodY, int periodZ, int turbulence, float rough, float atten)",
        "vector  anoise(vector pos, int periodX, int periodY, int periodZ, int turbulence, float rough, float atten)"
      ]
    },
    {
      "name": "optransform",
      "description": "Returns the transform associated with an OP.",
      "category": "Nodes",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/optransform.html",
      "usage": [
        "matrix  optransform(string path)",
        "matrix  optransform(string path, float time)",
        "matrix  optransform(int op_id)",
        "matrix  optransform(int op_id, float time)"
      ]
    },
    {
      "name": "curlgxnoise",
      "description": "Computes divergence free noise based on simplex noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/curlgxnoise.html",
      "usage": [
        "vector  curlgxnoise(vector xyz)",
        "vector  curlgxnoise(vector4 xyzt)"
      ]
    },
    {
      "name": "curlnoise",
      "description": "Computes divergence free noise based on Perlin noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/curlnoise.html",
      "usage": [
        "vector  curlnoise(vector xyz)",
        "vector  curlnoise(vector4 xyzt)"
      ]
    },
    {
      "name": "curlgxnoise2d",
      "description": "Computes divergence free noise in the plane based on simplex noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/curlgxnoise2d.html",
      "usage": [
        "vector  curlgxnoise2d(vector2 xy)",
        "vector  curlgxnoise2d(float x, float y)",
        "vector  curlgxnoise2d(vector xyz)",
        "vector  curlgxnoise2d(vector4 xyzt)"
      ]
    },
    {
      "name": "curlnoise2d",
      "description": "Computes 2d divergence free noise based on Perlin noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/curlnoise2d.html",
      "usage": [
        "vector  curlnoise2d(float x, float y)",
        "vector  curlnoise2d(vector xyt)"
      ]
    },
    {
      "name": "curlxnoise",
      "description": "Computes divergence free noise based on Simplex noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/curlxnoise.html",
      "usage": [
        "vector  curlxnoise(vector xyz)",
        "vector  curlxnoise(vector4 xyzt)"
      ]
    },
    {
      "name": "curlxnoise2d",
      "description": "Computes 2d divergence free noise based on simplex noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/curlxnoise2d.html",
      "usage": [
        "vector  curlxnoise2d(float x, float y)",
        "vector  curlxnoise2d(vector xyt)"
      ]
    },
    {
      "name": "flownoise",
      "description": "Generates 1D and 3D Perlin Flow Noise from 3D and 4D data.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/flownoise.html",
      "usage": [
        "float  flownoise(vector xyz, float flow)",
        "vector  flownoise(vector xyz, float flow)",
        "float  flownoise(vector4 xyzt, float flow)",
        "vector  flownoise(vector4 xyzt, float flow)",
        "float  flownoise(float x, float y, float flow)",
        "vector  flownoise(float x, float y, float flow)"
      ]
    },
    {
      "name": "cwnoise",
      "description": "Generates Worley (cellular) noise using a Chebyshev distance metric.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/cwnoise.html",
      "usage": [
        "void  cwnoise(float position, int &seed, float &f1, float &f2)",
        "void  cwnoise(float position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  cwnoise(float position, int &seed, float &f1, float &f2, int peiod)",
        "void  cwnoise(float position, int &seed, float &f1, float &f2, float &f4, float &f4, int period)",
        "void  cwnoise(float posx, float posy, int &seed, float &f1, float &f2)",
        "void  cwnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  cwnoise(float posx, float posy, int &seed, float &f1, float &f2, int periodx, int periody)",
        "void  cwnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)",
        "void  cwnoise(vector2 position, int &seed, float &f1, float &f2)",
        "void  cwnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  cwnoise(vector2 position, int &seed, float &f1, float &f2, int periodx, int periody)",
        "void  cwnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)",
        "void  cwnoise(vector position, int &seed, float &f1, float &f2)",
        "void  cwnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  cwnoise(vector position, int &seed, float &f1, float &f2, int periodx, int periody, int periodx)",
        "void  cwnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz)",
        "void  cwnoise(vector4 position, int &seed, float &f1, float &f2)",
        "void  cwnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  cwnoise(vector4 position, int &seed, float &f1, float &f2, int periodx, int periody, int periodz, int periodw)",
        "void  cwnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz, int periodw)"
      ]
    },
    {
      "name": "gxnoised",
      "description": "Evaluates a simplex noise field and its derivatives.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/gxnoised.html",
      "usage": [
        "float  gxnoised(vector2 xy, vector2 &deriv)",
        "float  gxnoised(float x, float y, float &dx, float &dy)",
        "float  gxnoised(vector xyz, vector &deriv)",
        "float  gxnoised(vector4 xyzt, vector4 &deriv)"
      ]
    },
    {
      "name": "hscript_noise",
      "description": "Generates noise matching the output of the Hscript noise() expression function.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hscript_noise.html",
      "usage": [
        "float  hscript_noise(vector pos)"
      ]
    },
    {
      "name": "flowpnoise",
      "description": "There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/flowpnoise.html",
      "usage": [
        "float  flowpnoise(vector xyz, vector p, float flow)",
        "vector  flowpnoise(vector xyz, vector p, float flow)",
        "float  flowpnoise(vector4 xyzt, vector4 p, float flow)",
        "vector  flowpnoise(vector4 xyzt, vector4 p, float flow)",
        "float  flowpnoise(float x, float y, int px, int py, float flow)",
        "vector  flowpnoise(float x, float y, int px, int py, float flow)",
        "float  flowpnoise(vector xyz, int px, int py, int pz, float flow)",
        "vector  flowpnoise(vector xyz, int px, int py, int pz, float flow)",
        "float  flowpnoise(vector4 xyzt, int px, int py, int pz, int pt, float flow)",
        "vector  flowpnoise(vector4 xyzt, int px, int py, int pz, int pt, float flow)"
      ]
    },
    {
      "name": "hscript_rand",
      "description": "Produces the exact same results as the Houdini expression function of\nthe same name.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hscript_rand.html",
      "usage": [
        "float|vector|vector4 hscript_rand(float seed)",
        "hscript_rand()"
      ]
    },
    {
      "name": "gxnoise",
      "description": "Evaluates a simplex noise field.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/gxnoise.html",
      "usage": [
        "float|vector|vector2 gxnoise(vector2 xy)",
        "float|vector|vector2 gxnoise(float x, float y)",
        "float|vector|vector2 gxnoise(vector xyz)",
        "float|vector|vector2 gxnoise(vector4 xyzt)"
      ]
    },
    {
      "name": "hscript_sturb",
      "description": "",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hscript_sturb.html",
      "usage": [
        "float  hscript_sturb(vector pos, int turbulence)"
      ]
    },
    {
      "name": "hscript_snoise",
      "description": "",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hscript_snoise.html",
      "usage": [
        "float  hscript_snoise(vector pos)"
      ]
    },
    {
      "name": "hscript_turb",
      "description": "Generates turbulence matching the output of the HScript turb() expression function.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/hscript_turb.html",
      "usage": [
        "float  hscript_turb(vector pos, int depth)"
      ]
    },
    {
      "name": "mwnoise",
      "description": "Generates Worley (cellular) noise using a Manhattan distance metric.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/mwnoise.html",
      "usage": [
        "void  mwnoise(float position, int &seed, float &f1, float &f2)",
        "void  mwnoise(float position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  mwnoise(float position, int &seed, float &f1, float &f2, int peiod)",
        "void  mwnoise(float position, int &seed, float &f1, float &f2, float &f4, float &f4, int period)",
        "void  mwnoise(float posx, float posy, int &seed, float &f1, float &f2)",
        "void  mwnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  mwnoise(float posx, float posy, int &seed, float &f1, float &f2, int periodx, int periody)",
        "void  mwnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)",
        "void  mwnoise(vector2 position, int &seed, float &f1, float &f2)",
        "void  mwnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  mwnoise(vector2 position, int &seed, float &f1, float &f2, int periodx, int periody)",
        "void  mwnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)",
        "void  mwnoise(vector position, int &seed, float &f1, float &f2)",
        "void  mwnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  mwnoise(vector position, int &seed, float &f1, float &f2, int periodx, int periody, int periodx)",
        "void  mwnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz)",
        "void  mwnoise(vector4 position, int &seed, float &f1, float &f2)",
        "void  mwnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  mwnoise(vector4 position, int &seed, float &f1, float &f2, int periodx, int periody, int periodz, int periodw)",
        "void  mwnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz, int periodw)"
      ]
    },
    {
      "name": "mx_perlin",
      "description": "MaterialX compatible Perlin noise",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/mx_perlin.html",
      "usage": [
        "float|vector mx_perlin(vector2 pos)",
        "float|vector mx_perlin(vector pos)",
        "float|vector mx_perlin(vector pos, int periodx, int periody, int periodz)",
        "float|vector mx_perlin(vector2 pos, int periodx, int periody)"
      ]
    },
    {
      "name": "mx_cellnoise",
      "description": "MaterialX compatible cellnoise",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/mx_cellnoise.html",
      "usage": [
        "float  mx_cellnoise(float pos)",
        "float  mx_cellnoise(vector2 pos)",
        "float  mx_cellnoise(vector pos)",
        "float  mx_cellnoise(vector4 pos)",
        "vector  mx_cellnoise(float pos)",
        "vector  mx_cellnoise(vector2 pos)",
        "vector  mx_cellnoise(vector pos)",
        "vector  mx_cellnoise(vector4 pos)",
        "vector  mx_cellnoise(float pos, int periodx)",
        "vector  mx_cellnoise(vector2 pos, int periodx, int periody)",
        "vector  mx_cellnoise(vector pos, int periodx, int periody, int periodz)",
        "vector  mx_cellnoise(vector4 pos, int periodx, int periody, int periodz, int periodw)",
        "float  mx_cellnoise(float pos, int periodx)",
        "float  mx_cellnoise(vector2 pos, int periodx, int periody)",
        "float  mx_cellnoise(vector pos, int periodx, int periody, int periodz)",
        "float  mx_cellnoise(vector4 pos, int periodx, int periody, int periodz, int periodw)"
      ]
    },
    {
      "name": "mx_worley",
      "description": "MaterialX compatible Worley noise",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/mx_worley.html",
      "usage": [
        "float|vector|vector2 mx_worley(vector2 pos, float jitter, int metric)",
        "float|vector|vector2 mx_worley(vector pos, float jitter, int metric)",
        "float|vector|vector2 mx_worley(vector2 pos, float jitter, int periodx, int periody, int periodz)",
        "float|vector|vector2 mx_worley(vector pos, float jitter, int periodx, int periody, int periodz, int periodw)"
      ]
    },
    {
      "name": "mx_voronoi",
      "description": "MaterialX compatible Voronoi noise",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/mx_voronoi.html",
      "usage": [
        "void  mx_voronoi(vector2 position, float jitter, int metric, float &d1, float &d2, float &d3, vector2 &p1, vector2 &p2, vector2 &p3)",
        "void  mx_voronoi(vector2 position, float jitter, int metric, float &d1, float &d2, vector2 &p1, vector2 &p2)",
        "void  mx_voronoi(vector2 position, float jitter, int metric, float &d1, vector2 &p1)",
        "void  mx_voronoi(vector2 position, float jitter, int metric, float &d1, float &d2, float &d3, vector2 &p1, vector2 &p2, vector2 &p3, int periodx, int periody)",
        "void  mx_voronoi(vector2 position, float jitter, int metric, float &d1, float &d2, vector2 &p1, vector2 &p2, int periodx, int periody)",
        "void  mx_voronoi(vector2 position, float jitter, int metric, float &d1, vector2 &p1, int periodx, int periody)",
        "void  mx_voronoi(vector position, float jitter, int metric, float &d1, float &d2, float &d3, vector &p1, vector &p2, vector &p3)",
        "void  mx_voronoi(vector position, float jitter, int metric, float &d1, float &d2, vector &p1, vector &p2)",
        "void  mx_voronoi(vector position, float jitter, int metric, float &d1, vector &p1)",
        "void  mx_voronoi(vector position, float jitter, int metric, float &d1, float &d2, float &d3, vector &p1, vector &p2, vector &p3, int periodx, int periody, int periodz)",
        "void  mx_voronoi(vector position, float jitter, int metric, float &d1, float &d2, vector &p1, vector &p2, int periodx, int periody, int periodz)",
        "void  mx_voronoi(vector position, float jitter, int metric, float &d1, vector &p1, int periodx, int periody, int periodz)"
      ]
    },
    {
      "name": "noise",
      "description": "There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/noise.html",
      "usage": [
        "float  noise(float pos)",
        "vector  noise(float pos)",
        "float  noise(float posx, float posy)",
        "vector  noise(float posx, float posy)",
        "float  noise(vector pos)",
        "vector  noise(vector pos)",
        "float  noise(vector4 pos)",
        "vector  noise(vector4 pos)"
      ]
    },
    {
      "name": "noised",
      "description": "Derivatives of Perlin Noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/noised.html",
      "usage": [
        "void  noised(float x, float &v, float &dvdx)",
        "void  noised(float x, vector &v, vector &dvdx)",
        "void  noised(float x, float y, float &v, float &dvdx, float &dvdy)",
        "void  noised(float x, float y, vector &v, vector &dvdx, vector &dvdy)",
        "void  noised(vector xyz, float &v, float &dvdx, float &dvdy, float &dvdz)",
        "void  noised(vector xyz, vector &v, vector &dvdx, vector &dvdy, vector &dvdz)",
        "void  noised(vector4 xyzw, float &v, float &dvdx, float &dvdy, float &dvdz, float &dvdw)",
        "void  noised(vector4 xyzw, vector &v, vector &dvdx, vector &dvdy, vector &dvdz, vector &dvdw)"
      ]
    },
    {
      "name": "onoise",
      "description": "These functions are similar to wnoise and vnoise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/onoise.html",
      "usage": [
        "float  onoise(vector pos)",
        "vector  onoise(vector pos)",
        "float  onoise(vector pos, int turbulence, float rough, float atten)",
        "vector  onoise(vector pos, int turbulence, float rough, float atten)",
        "float  onoise(vector pos, int periodX, int periodY, int periodZ)",
        "vector  onoise(vector pos, int periodX, int periodY, int periodZ)",
        "float  onoise(vector pos, int periodX, int periodY, int periodZ, int turbulence, float rough, float atten)",
        "vector  onoise(vector pos, int periodX, int periodY, int periodZ, int turbulence, float rough, float atten)"
      ]
    },
    {
      "name": "nrandom",
      "description": "Non-deterministic random number generation function.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nrandom.html",
      "usage": [
        "float  nrandom(...)",
        "vector2  nrandom(...)",
        "vector  nrandom(...)",
        "vector4  nrandom(...)",
        "void  nrandom(float &x, float &y, ...)"
      ]
    },
    {
      "name": "pxnoised",
      "description": "Periodic derivatives of Simplex Noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pxnoised.html",
      "usage": [
        "void  pxnoised(float x, int px, float &v, float &dvdx)",
        "void  pxnoised(float x, int px, vector &v, vector &dvdx)",
        "void  pxnoised(float x, float y, int px, int py, float &v, float &dvdx, float &dvdy)",
        "void  pxnoised(float x, float y, int px, int py, vector &v, vector &dvdx, vector &dvdy)",
        "void  pxnoised(vector xyz, int px, int py, int pz, float &v, float &dvdx, float &dvdy, float &dvdz)",
        "void  pxnoised(vector xyz, int px, int py, int pz, vector &v, vector &dvdx, vector &dvdy, vector &dvdz)",
        "void  pxnoised(vector4 xyzw, int px, int py, int pz, int pw, float &v, float &dvdx, float &dvdy, float &dvdz, float &dvdw)",
        "void  pxnoised(vector4 xyzw, int px, int py, int pz, int pw, vector &v, vector &dvdx, vector &dvdy, vector &dvdz, vector &dvdw)"
      ]
    },
    {
      "name": "pnoise",
      "description": "There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pnoise.html",
      "usage": [
        "float|vector pnoise(float x, int px)",
        "float|vector pnoise(vector x, vector p)",
        "float|vector pnoise(vector4 xyzt, vector4 p)",
        "float|vector pnoise(float x, float y, int px, int py)",
        "float|vector pnoise(vector xyz, int px, int py, int pz)",
        "float|vector pnoise(vector4 xyzt, int px, int py, int pz, int pt)"
      ]
    },
    {
      "name": "rand",
      "description": "Creates a random number between 0 and 1 from a seed.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/rand.html",
      "usage": [
        "float  rand(float seed)",
        "vector2  rand(float seed)",
        "vector  rand(float seed)",
        "vector4  rand(float seed)",
        "float  rand(float seed, float seed2)",
        "vector2  rand(float seed, float seed2)",
        "vector  rand(float seed, float seed2)",
        "vector4  rand(float seed, float seed2)",
        "float  rand(vector2 seed)",
        "vector2  rand(vector2 seed)",
        "vector  rand(vector2 seed)",
        "vector4  rand(vector2 seed)",
        "float  rand(vector seed)",
        "vector2  rand(vector seed)",
        "vector  rand(vector seed)",
        "vector4  rand(vector seed)",
        "float  rand(vector4 seed)",
        "vector2  rand(vector4 seed)",
        "vector  rand(vector4 seed)",
        "vector4  rand(vector4 seed)"
      ]
    },
    {
      "name": "random_fhash",
      "description": "Hashes floating point numbers to integers.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/random_fhash.html",
      "usage": [
        "int  random_fhash(float seed)",
        "int  random_fhash(float seed, float seed2)",
        "int  random_fhash(vector seed)",
        "int  random_fhash(vector4 seed)",
        "int  random_fhash(vector2 seed)"
      ]
    },
    {
      "name": "random",
      "description": "Generate a random number based on the integer position in 1-4D space.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/random.html",
      "usage": [
        "float  random(float|intposition)",
        "vector  random(float|intposition)",
        "vector2  random(int position)",
        "vector4  random(float|intposition)",
        "float  random(float|intxpos, float|intypos)",
        "vector  random(float|intxpos, float|intypos)",
        "vector4  random(float|intxpos, float|intypos)",
        "float  random(vector position)",
        "vector  random(vector position)",
        "vector4  random(vector position)",
        "float  random(vector4 position)",
        "vector  random(vector4 position)",
        "vector4  random(vector4 position)",
        "random()",
        "random()"
      ]
    },
    {
      "name": "random_brj",
      "description": "Generate a uniformly distributed random number.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/random_brj.html",
      "usage": [
        "float  random_brj(float seed, int offset)",
        "float  random_brj(int seed, int offset)",
        "float  random_brj(vector4 seed, int offset)",
        "float  random_brj(vector seed, int offset)",
        "vector2  random_brj(float seed, int offset)",
        "vector2  random_brj(int seed, int offset)",
        "vector2  random_brj(vector4 seed, int offset)",
        "vector2  random_brj(vector seed, int offset)",
        "vector  random_brj(float seed, int offset)",
        "vector  random_brj(int seed, int offset)",
        "vector  random_brj(vector4 seed, int offset)",
        "vector  random_brj(vector seed, int offset)"
      ]
    },
    {
      "name": "random_ihash",
      "description": "Hashes integer numbers to integers.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/random_ihash.html",
      "usage": [
        "int  random_ihash(int seed)"
      ]
    },
    {
      "name": "random_shash",
      "description": "Hashes a string to an integer.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/random_shash.html",
      "usage": [
        "int  random_shash(string seed)"
      ]
    },
    {
      "name": "random_poisson",
      "description": "Generates a random Poisson variable given the mean to the distribution and a seed.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/random_poisson.html",
      "usage": [
        "int  random_poisson(int seed, float mean)",
        "int  random_poisson(int seed, float mean, int minvalue, int maxvalue)"
      ]
    },
    {
      "name": "random_sobol",
      "description": "Generate a uniformly distributed random number.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/random_sobol.html",
      "usage": [
        "float  random_sobol(float seed, int offset)",
        "float  random_sobol(int seed, int offset)",
        "float  random_sobol(vector4 seed, int offset)",
        "float  random_sobol(vector seed, int offset)",
        "vector4  random_sobol(float seed, int offset)",
        "vector4  random_sobol(int seed, int offset)",
        "vector4  random_sobol(vector4 seed, int offset)",
        "vector4  random_sobol(vector seed, int offset)",
        "vector  random_sobol(float seed, int offset)",
        "vector  random_sobol(int seed, int offset)",
        "vector  random_sobol(vector4 seed, int offset)",
        "vector  random_sobol(vector seed, int offset)"
      ]
    },
    {
      "name": "vnoise",
      "description": "Generates Voronoi (cellular) noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vnoise.html",
      "usage": [
        "void  vnoise(float position, float jitter, int &seed, float &f1, float &f2, float &pos1, float &pos2)",
        "void  vnoise(float position, float jitter, int &seed, float &f1, float &f2, float &pos1, float &pos2, int period)",
        "void  vnoise(float posx, float posy, float jittx, float jitty, int &seed, float &f1, float &f2, float &pos1x, float &pos1y, float &pos2x, float &pos2y)",
        "void  vnoise(float posx, float posy, float jittx, float jitty, int &seed, float &f1, float &f2, float &pos1x, float &pos1y, float &pos2x, float &pos2, int periodx, int periody)",
        "void  vnoise(vector position, vector jitter, int &seed, float &f1, float &f2, vector &pos1, vector &pos2)",
        "void  vnoise(vector position, vector jitter, int &seed, float &f1, float &f2, vector &pos1, vector &pos2, int periodx, int periody, int periodz)",
        "void  vnoise(vector position, vector jitter, int &seed, float &f1, float &f2, vector &pos1, vector &pos2, vector period)",
        "void  vnoise(vector4 position, vector4 jitter, int &seed, float &f1, float &f2, vector4 &pos1, vector4 &pos2)",
        "void  vnoise(vector4 position, vector4 jitter, int &seed, float &f1, float &f2, vector4 &pos1, vector4 &pos2, int periodx, int periody, int periodz, int periodw)",
        "void  vnoise(vector4 position, vector4 jitter, int &seed, float &f1, float &f2, vector4 &pos1, vector4 &pos2, vector4 period)"
      ]
    },
    {
      "name": "xnoise",
      "description": "Simplex noise is very close to Perlin noise, except with the samples on a simplex mesh rather than a grid.  This results in less grid artifacts.  It also uses a higher order bspline to provide better derivatives. This is the periodic simplex noise",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pxnoise.html",
      "usage": []
    },
    {
      "name": "wnoise",
      "description": "Generates Worley (cellular) noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/wnoise.html",
      "usage": [
        "void  wnoise(float position, int &seed, float &f1, float &f2)",
        "void  wnoise(float position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  wnoise(float position, int &seed, float &f1, float &f2, int peiod)",
        "void  wnoise(float position, int &seed, float &f1, float &f2, float &f4, float &f4, int period)",
        "void  wnoise(float posx, float posy, int &seed, float &f1, float &f2)",
        "void  wnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  wnoise(float posx, float posy, int &seed, float &f1, float &f2, int periodx, int periody)",
        "void  wnoise(float posx, float posy, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)",
        "void  wnoise(vector2 position, int &seed, float &f1, float &f2)",
        "void  wnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  wnoise(vector2 position, int &seed, float &f1, float &f2, int periodx, int periody)",
        "void  wnoise(vector2 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody)",
        "void  wnoise(vector position, int &seed, float &f1, float &f2)",
        "void  wnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  wnoise(vector position, int &seed, float &f1, float &f2, int periodx, int periody, int periodx)",
        "void  wnoise(vector position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz)",
        "void  wnoise(vector4 position, int &seed, float &f1, float &f2)",
        "void  wnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4)",
        "void  wnoise(vector4 position, int &seed, float &f1, float &f2, int periodx, int periody, int periodz, int periodw)",
        "void  wnoise(vector4 position, int &seed, float &f1, float &f2, float &f3, float &f4, int periodx, int periody, int periodz, int periodw)"
      ]
    },
    {
      "name": "snoise",
      "description": "These functions are similar to wnoise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/snoise.html",
      "usage": [
        "float  snoise(vector pos)",
        "vector  snoise(vector pos)",
        "float  snoise(vector pos, int turbulence, float rough, float atten)",
        "vector  snoise(vector pos, int turbulence, float rough, float atten)",
        "float  snoise(vector pos, int periodX, int periodY, int periodZ)",
        "vector  snoise(vector pos, int periodX, int periodY, int periodZ)",
        "float  snoise(vector pos, int periodX, int periodY, int periodZ, int turbulence, float rough, float atten)",
        "vector  snoise(vector pos, int periodX, int periodY, int periodZ, int turbulence, float rough, float atten)"
      ]
    },
    {
      "name": "xnoise",
      "description": "Simplex noise is very close to Perlin noise, except with the samples on a simplex mesh rather than a grid.  This results in less grid artifacts.  It also uses a higher order bspline to provide better derivatives.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/xnoise.html",
      "usage": [
        "float  xnoise(float x)",
        "vector  xnoise(float x)",
        "float  xnoise(float x, float y)",
        "vector  xnoise(float x, float y)",
        "float  xnoise(vector xyz)",
        "vector  xnoise(vector xyz)",
        "float  xnoise(vector4 xyzt)",
        "vector  xnoise(vector4 xyzt)"
      ]
    },
    {
      "name": "prim_normal",
      "description": "Returns the normal of the primitive (prim_number) at parametric location u, v.",
      "category": "normals",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/prim_normal.html",
      "usage": [
        "vector  prim_normal(<geometry>geometry, int prim_number, vector uvw)",
        "vector  prim_normal(<geometry>geometry, int prim_number, float u, float v)",
        "vector  prim_normal(<geometry>geometry, int prim_number, float u, float v, float w)"
      ]
    },
    {
      "name": "xnoised",
      "description": "Derivatives of Simplex Noise.",
      "category": "Noise and Randomness",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/xnoised.html",
      "usage": [
        "void  xnoised(float x, float &v, float &dvdx)",
        "void  xnoised(float x, vector &v, vector &dvdx)",
        "void  xnoised(float x, float y, float &v, float &dvdx, float &dvdy)",
        "void  xnoised(float x, float y, vector &v, vector &dvdx, vector &dvdy)",
        "void  xnoised(vector xyz, float &v, float &dvdx, float &dvdy, float &dvdz)",
        "void  xnoised(vector xyz, vector &v, vector &dvdx, vector &dvdy, vector &dvdz)",
        "void  xnoised(vector4 xyzw, float &v, float &dvdx, float &dvdy, float &dvdz, float &dvdw)",
        "void  xnoised(vector4 xyzw, vector &v, vector &dvdx, vector &dvdy, vector &dvdz, vector &dvdw)"
      ]
    },
    {
      "name": "computenormal",
      "description": "In shading contexts, computes a normal. In the SOP contexts, sets how/whether to recompute normals.",
      "category": "normals",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/computenormal.html",
      "usage": [
        "vector  computenormal(vector P, ...)",
        "vector  computenormal(vector P, vector N, vector Ng, ...)",
        "void  computenormal(int i)"
      ]
    },
    {
      "name": "ocio_activeviews",
      "description": "Returns the names of active views supported in Open Color IO",
      "category": "Open Color IO",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ocio_activeviews.html",
      "usage": [
        "string [] ocio_activeviews()"
      ]
    },
    {
      "name": "ocio_activedisplays",
      "description": "Returns the names of active displays supported in Open Color IO",
      "category": "Open Color IO",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ocio_activedisplays.html",
      "usage": [
        "string [] ocio_activedisplays()"
      ]
    },
    {
      "name": "ocio_parsecolorspace",
      "description": "Parse the color space from a string",
      "category": "Open Color IO",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ocio_parsecolorspace.html",
      "usage": [
        "string  ocio_parsecolorspace(string input)"
      ]
    },
    {
      "name": "ocio_import",
      "description": "Imports attributes from OpenColorIO spaces.",
      "category": "Open Color IO",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ocio_import.html",
      "usage": [
        "int  ocio_import(string space, string property, int &value)",
        "int  ocio_import(string space, string property, vector &value)",
        "int  ocio_import(string space, string property, string &value)"
      ]
    },
    {
      "name": "ocio_spaces",
      "description": "Returns the names of color spaces supported in Open Color IO.",
      "category": "Open Color IO",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ocio_spaces.html",
      "usage": [
        "string [] ocio_spaces()"
      ]
    },
    {
      "name": "ocio_roles",
      "description": "Returns the names of roles supported in Open Color IO",
      "category": "Open Color IO",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ocio_roles.html",
      "usage": [
        "string [] ocio_roles()"
      ]
    },
    {
      "name": "ocio_transformview",
      "description": "Transform colors to a view using Open Color IO",
      "category": "Open Color IO",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ocio_transformview.html",
      "usage": [
        "vector  ocio_transformview(string src, string display, string view, vector clr)",
        "vector4  ocio_transformview(string src, string display, string view, vector4 clr)"
      ]
    },
    {
      "name": "ocio_transform",
      "description": "Transform colors using Open Color IO",
      "category": "Open Color IO",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ocio_transform.html",
      "usage": [
        "vector  ocio_transform(string dest, vector clr)",
        "vector  ocio_transform(string src, string dest, vector clr)",
        "vector  ocio_transform(string src, string dest, string looks, vector clr)",
        "vector4  ocio_transform(string dest, vector4 clr)",
        "vector4  ocio_transform(string src, string dest, vector4 clr)",
        "vector4  ocio_transform(string src, string dest, string looks, vector4 clr)"
      ]
    },
    {
      "name": "mattrib",
      "description": "Returns the value of the point attribute for the metaballs if\nmetaball geometry is specified to i3dgen.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/mattrib.html",
      "usage": [
        "<type> mattrib(string name, vector P)"
      ]
    },
    {
      "name": "filamentsample",
      "description": "Samples the velocity field defined by a set of vortex filaments.",
      "category": "particles",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/filamentsample.html",
      "usage": [
        "vector  filamentsample(<geometry>geometry, vector position)"
      ]
    },
    {
      "name": "mdensity",
      "description": "Returns the density of the metaball field if metaball geometry is\nspecified to i3dgen.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/mdensity.html",
      "usage": [
        "float  mdensity(vector P)"
      ]
    },
    {
      "name": "mspace",
      "description": "Transforms the position specified into the local space of the\nmetaball.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/mspace.html",
      "usage": [
        "vector  mspace(vector P)"
      ]
    },
    {
      "name": "pcclose",
      "description": "This function closes the handle associated with a pcopen\nfunction.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcclose.html",
      "usage": [
        "void  pcclose(int &handle)"
      ]
    },
    {
      "name": "pccone",
      "description": "Returns a list of closest points from a file within a specified cone.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pccone.html",
      "usage": [
        "int [] pccone(<geometry>geometry, string PChannel, vector P, vector dir, float angle, float max_distance, int maxpoints)",
        "int [] pccone(<geometry>geometry, string ptgroup, string PChannel, vector P, vector dir, float angle, float max_distance, int maxpoints)"
      ]
    },
    {
      "name": "pcfarthest",
      "description": "Returns the distance to the farthest point found in the search\nperformed by pcopen.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcfarthest.html",
      "usage": [
        "float  pcfarthest(int handle)"
      ]
    },
    {
      "name": "pcexport",
      "description": "Writes data to a point cloud inside a pciterate or a pcunshaded loop.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcexport.html",
      "usage": [
        "int  pcexport(int handle, string channel_name, <type>value, ...)",
        "int  pcexport(int handle, string channel_name, vector value, float radius, ...)"
      ]
    },
    {
      "name": "pcconvex",
      "description": "",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcconvex.html",
      "usage": [
        "float  pcconvex(int handle, string channel, vector N)"
      ]
    },
    {
      "name": "pcfilter",
      "description": "Filters points found by pcopen using a simple reconstruction filter.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcfilter.html",
      "usage": [
        "<type> pcfilter(int handle, string channel_name, ...)"
      ]
    },
    {
      "name": "pcimport",
      "description": "Imports channel data from a point cloud inside a pciterate or a pcunshaded loop.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcimport.html",
      "usage": [
        "int  pcimport(int handle, string channel_name, <type>&value)"
      ]
    },
    {
      "name": "pccone_radius",
      "description": "Returns a list of closest points from a file in a cone, taking into account their radii",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pccone_radius.html",
      "usage": [
        "int [] pccone_radius(<geometry>geometry, string PChannel, string RadChannel, float radscale, vector P, vector dir, float angle, float max_distance, int maxpoints)",
        "int [] pccone_radius(<geometry>geometry, string ptgroup, string PChannel, string RadChannel, float radscale, vector P, vector dir, float angle, float max_distance, int maxpoints)"
      ]
    },
    {
      "name": "pcfind",
      "description": "Returns a list of closest points from a file.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcfind.html",
      "usage": [
        "int [] pcfind(<geometry>geometry, string Pchannel, vector P, float radius, int maxpoints)",
        "int [] pcfind(<geometry>geometry, string ptgroup, string Pchannel, vector P, float radius, int maxpoints)",
        "int [] pcfind(<geometry>geometry, string Pchannel, vector P, float radius, int maxpoints, float &distances[])",
        "int [] pcfind(<geometry>geometry, string ptgroup, string Pchannel, vector P, float radius, int maxpoints, float &distances[])"
      ]
    },
    {
      "name": "pcgenerate",
      "description": "Generates a point cloud.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcgenerate.html",
      "usage": [
        "int  pcgenerate(string filename, int npoints)",
        "pcgenerate(\"myfile.pc\", ...)",
        "pcgenerate(\"myfile.pc\", ...)",
        "pcgenerate()"
      ]
    },
    {
      "name": "pcimportbyidx4",
      "description": "Imports channel data from a point cloud outside a pciterate or a pcunshaded loop.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcimportbyidx4.html",
      "usage": [
        "matrix  pcimportbyidx4(int handle, string channel_name, int idx)"
      ]
    },
    {
      "name": "pcfind_radius",
      "description": "Returns a list of closest points from a file taking into account their radii.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcfind_radius.html",
      "usage": [
        "int [] pcfind_radius(<geometry>geometry, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)",
        "int [] pcfind_radius(<geometry>geometry, string ptgroup, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)",
        "int [] pcfind_radius(<geometry>geometry, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints, float &distances[])",
        "int [] pcfind_radius(<geometry>geometry, string ptgroup, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints, float &distances[])"
      ]
    },
    {
      "name": "pcimportbyidx3",
      "description": "Imports channel data from a point cloud outside a pciterate or a pcunshaded loop.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcimportbyidx3.html",
      "usage": [
        "matrix3  pcimportbyidx3(int handle, string channel_name, int idx)"
      ]
    },
    {
      "name": "pcimportbyidxf",
      "description": "Imports channel data from a point cloud outside a pciterate or a pcunshaded loop.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcimportbyidxf.html",
      "usage": [
        "float  pcimportbyidxf(int handle, string channel_name, int idx)"
      ]
    },
    {
      "name": "pcimportbyidxi",
      "description": "Imports channel data from a point cloud outside a pciterate or a pcunshaded loop.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcimportbyidxi.html",
      "usage": [
        "int  pcimportbyidxi(int handle, string channel_name, int idx)"
      ]
    },
    {
      "name": "pcimportbyidxs",
      "description": "Imports channel data from a point cloud outside a pciterate or a pcunshaded loop.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcimportbyidxs.html",
      "usage": [
        "string  pcimportbyidxs(int handle, string channel_name, int idx)"
      ]
    },
    {
      "name": "pcimportbyidxp",
      "description": "Imports channel data from a point cloud outside a pciterate or a pcunshaded loop.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcimportbyidxp.html",
      "usage": [
        "vector4  pcimportbyidxp(int handle, string channel_name, int idx)"
      ]
    },
    {
      "name": "pcimportbyidxv",
      "description": "Imports channel data from a point cloud outside a pciterate or a pcunshaded loop.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcimportbyidxv.html",
      "usage": [
        "vector  pcimportbyidxv(int handle, string channel_name, int idx)"
      ]
    },
    {
      "name": "pciterate",
      "description": "This function can be used to iterate over all the points which were\nfound in the pcopen query.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pciterate.html",
      "usage": [
        "int  pciterate(int handle)"
      ]
    },
    {
      "name": "pcline",
      "description": "Returns a list of closest points to an infinite line from a specified file",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcline.html",
      "usage": [
        "int [] pcline(<geometry>geometry, string PChannel, vector P, vector dir, float max_distance, int maxpoints)",
        "int [] pcline(<geometry>geometry, string ptgroup, string PChannel, vector P, vector dir, float max_distance, int maxpoints)"
      ]
    },
    {
      "name": "pcnumfound",
      "description": "This node returns the number of points found by pcopen.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcnumfound.html",
      "usage": [
        "int  pcnumfound(int handle)"
      ]
    },
    {
      "name": "pcsegment",
      "description": "Returns a list of closest points to a line segment from a specified file",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcsegment.html",
      "usage": [
        "int [] pcsegment(<geometry>geometry, string PChannel, vector P0, vector P1, float max_distance, int maxpoints)",
        "int [] pcsegment(<geometry>geometry, string ptgroup, string PChannel, vector P0, vector P1, float max_distance, int maxpoints)",
        "int [] pcsegment(<geometry>geometry, string PChannel, vector P0, vector P1, float max_distance, int maxpoints, float &distances[])",
        "int [] pcsegment(<geometry>geometry, string ptgroup, string PChannel, vector P0, vector P1, float max_distance, int maxpoints, float &distances[])"
      ]
    },
    {
      "name": "pcline_radius",
      "description": "Returns a list of closest points to an infinite line from a specified file",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcline_radius.html",
      "usage": [
        "int [] pcline_radius(<geometry>geometry, string PChannel, string RadChannel, float radscale, vector P, vector dir, float max_distance, int maxpoints)",
        "int [] pcline_radius(<geometry>geometry, string ptgroup, string PChannel, string RadChannel, float radscale, vector P, vector dir, float max_distance, int maxpoints)"
      ]
    },
    {
      "name": "pcopen",
      "description": "Returns a handle to a point cloud file.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcopen.html",
      "usage": [
        "int  pcopen(string filename, string channel, int shaded, ...)",
        "int  pcopen(string filename, string Pchannel, vector P, float radius, int maxpoints, ...)",
        "int  pcopen(string filename, string Pchannel, vector P, string Nchannel, vector N, float radius, int maxpoints, ...)",
        "int  pcopen(int opinput, string Pchannel, vector P, float radius, int maxpoints)",
        "pcopen()",
        "pcopen()"
      ]
    },
    {
      "name": "pcsampleleaf",
      "description": "Changes the current iteration point to a leaf descendant of the current aggregate point.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcsampleleaf.html",
      "usage": [
        "void  pcsampleleaf(int handle, float sample)"
      ]
    },
    {
      "name": "pcopenlod",
      "description": "Returns a handle to a point cloud file.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcopenlod.html",
      "usage": [
        "int  pcopenlod(string filename, string Pchannel, vector P, int min_pts, ...)"
      ]
    },
    {
      "name": "pcsegment_radius",
      "description": "Returns a list of closest points to a line segment from a specified file",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcsegment_radius.html",
      "usage": [
        "int [] pcsegment_radius(<geometry>geometry, string PChannel, string RadChannel, float radscale, vector P0, vector P1, float max_distance, int maxpoints)",
        "int [] pcsegment_radius(<geometry>geometry, string ptgroup, string PChannel, string RadChannel, float radscale, vector P0, vector P1, float max_distance, int maxpoints)",
        "int [] pcsegment_radius(<geometry>geometry, string PChannel, string RadChannel, float radscale, vector P0, vector P1, float max_distance, int maxpoints, float &distances[])",
        "int [] pcsegment_radius(<geometry>geometry, string ptgroup, string PChannel, string RadChannel, float radscale, vector P0, vector P1, float max_distance, int maxpoints, float &distances[])"
      ]
    },
    {
      "name": "pcsize",
      "description": "",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcsize.html",
      "usage": [
        "int  pcsize(int handle)"
      ]
    },
    {
      "name": "pcunshaded",
      "description": "Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcunshaded.html",
      "usage": [
        "int  pcunshaded(int handle, string channel_name)"
      ]
    },
    {
      "name": "pcwrite",
      "description": "Writes data to a point cloud file.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pcwrite.html",
      "usage": [
        "int  pcwrite(string filename, ...)"
      ]
    },
    {
      "name": "photonmap",
      "description": "Samples a color from a photon map.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/photonmap.html",
      "usage": [
        "vector  photonmap(string mapname, vector position, vector normal, ...)",
        "void  photonmap(string mapname, vector position, vector normal, vector &color, float &area, ...)"
      ]
    },
    {
      "name": "pgfind",
      "description": "Returns a list of closest points from a file.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pgfind.html",
      "usage": [
        "int [] pgfind(<geometry>geometry, vector P, float radius, int maxpoints, float divsize)",
        "int [] pgfind(<geometry>geometry, string ptgroup, vector P, float radius, int maxpoints, float divsize)"
      ]
    },
    {
      "name": "texture3d",
      "description": "Returns the value of the 3d image at the position specified by P.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/texture3d.html",
      "usage": [
        "<type> texture3d(string filename, string channel, vector P, ...)"
      ]
    },
    {
      "name": "create_pdf",
      "description": "Creates a probability density function from an array of input values.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/create_pdf.html",
      "usage": [
        "float [] create_pdf(float values[])"
      ]
    },
    {
      "name": "texture3dBox",
      "description": "This function queries the 3D texture map specified and returns the\nbounding box information of the file.",
      "category": "Point Clouds and 3D Images",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/texture3dBox.html",
      "usage": [
        "void  texture3dBox(string filename, string channel, vector &min, vector &max, ...)"
      ]
    },
    {
      "name": "create_cdf",
      "description": "Creates a cumulative distribution function (CDF) from an array of probability density function (PDF) values.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/create_cdf.html",
      "usage": [
        "float [] create_cdf(float pdf[])"
      ]
    },
    {
      "name": "limit_sample_space",
      "description": "Limits a unit value in a way that maintains uniformity and in-range consistency.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/limit_sample_space.html",
      "usage": [
        "float  limit_sample_space(float minu, float maxu, float u)",
        "float  limit_sample_space(float maxu, float u)"
      ]
    },
    {
      "name": "newsampler",
      "description": "Initializes a sampling sequence for the nextsample function.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/newsampler.html",
      "usage": [
        "int  newsampler(...)",
        "int  newsampler(int seed, ...)"
      ]
    },
    {
      "name": "sample_circle_ring_uniform",
      "description": "Generates a uniform vector2 with alpha < length < 1, where 0 < alpha < 1, given a vector2 of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_circle_ring_uniform.html",
      "usage": [
        "vector2  sample_circle_ring_uniform(vector2 u, float alpha)"
      ]
    },
    {
      "name": "nextsample",
      "description": "",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nextsample.html",
      "usage": [
        "void  nextsample(int &sid, float &sx, float &sy, ...)",
        "void  nextsample(int &sid, vector &svec, ...)"
      ]
    },
    {
      "name": "sample_cauchy",
      "description": "Samples the Cauchy (Lorentz) distribution.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_cauchy.html",
      "usage": [
        "float  sample_cauchy(float u)",
        "float  sample_cauchy(float scale, float u)",
        "vector2  sample_cauchy(float scale, vector2 u)",
        "float  sample_cauchy(float origscale, float minvalue, float maxvalue, float u)",
        "<vector> sample_cauchy(<vector>u)"
      ]
    },
    {
      "name": "sample_circle_arc",
      "description": "Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_circle_arc.html",
      "usage": [
        "vector2  sample_circle_arc(vector2 center, float maxangle, float u)"
      ]
    },
    {
      "name": "sample_circle_slice",
      "description": "Generates a uniform vector2 with length < 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_circle_slice.html",
      "usage": [
        "vector2  sample_circle_slice(vector2 center, float maxangle, vector2 u)"
      ]
    },
    {
      "name": "sample_cdf",
      "description": "Samples a cumulative distribution function (CDF).",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_cdf.html",
      "usage": [
        "int  sample_cdf(float cdf[], float uniform_rand)",
        "void  sample_cdf(float cdf[], float uniform_rand, int &index, float &x)",
        "void  sample_cdf(float cdf[], float uniform_rand, int &index, float &x, float &pdf)"
      ]
    },
    {
      "name": "sample_circle_edge_uniform",
      "description": "Generates a uniform unit vector2, given a uniform number between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_circle_edge_uniform.html",
      "usage": [
        "vector2  sample_circle_edge_uniform(float u)"
      ]
    },
    {
      "name": "sample_direction_cone",
      "description": "Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_direction_cone.html",
      "usage": [
        "vector  sample_direction_cone(vector center, float maxangle, vector2 u)"
      ]
    },
    {
      "name": "sample_exponential",
      "description": "Samples the exponential distribution.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_exponential.html",
      "usage": [
        "float  sample_exponential(float u)",
        "float  sample_exponential(float mean, float u)",
        "float  sample_exponential(float origmean, float maxvalue, float u)"
      ]
    },
    {
      "name": "sample_circle_uniform",
      "description": "Generates a uniform vector2 with length < 1, given a vector2 of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_circle_uniform.html",
      "usage": [
        "vector2  sample_circle_uniform(vector2 u)"
      ]
    },
    {
      "name": "sample_direction_uniform",
      "description": "Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_direction_uniform.html",
      "usage": [
        "vector  sample_direction_uniform(vector2 u)"
      ]
    },
    {
      "name": "sample_discrete",
      "description": "Returns an integer, either uniform or weighted, given a uniform number between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_discrete.html",
      "usage": [
        "int  sample_discrete(int nvalues, float u)",
        "int  sample_discrete(float weights[], float u)"
      ]
    },
    {
      "name": "sample_geometry",
      "description": "Samples geometry in the scene and returns information from the shaders of surfaces that were sampled.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_geometry.html",
      "usage": [
        "int  sample_geometry(vector origin, vector sample, float time, ...)"
      ]
    },
    {
      "name": "sample_hemisphere",
      "description": "Generates a unit vector, optionally biased, within a hemisphere, given a vector2 of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_hemisphere.html",
      "usage": [
        "vector  sample_hemisphere(vector2 u)",
        "vector  sample_hemisphere(vector center, vector2 u)",
        "vector  sample_hemisphere(float bias, vector2 u)",
        "vector  sample_hemisphere(vector center, float bias, vector2 u)"
      ]
    },
    {
      "name": "sample_light",
      "description": "Samples a 3D position on a light source and runs the light shader at that point.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_light.html",
      "usage": [
        "int  sample_light(int lightid, vector pos, vector sam, float time, vector &pos, vector &clr, float &scale, ...)"
      ]
    },
    {
      "name": "sample_hypersphere_cone",
      "description": "Generates a uniform vector4 with length < 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_hypersphere_cone.html",
      "usage": [
        "vector4  sample_hypersphere_cone(vector4 center, float maxangle, vector4 u)"
      ]
    },
    {
      "name": "sample_hypersphere_uniform",
      "description": "Generates a uniform vector4 with length < 1, given a vector4 of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_hypersphere_uniform.html",
      "usage": [
        "vector4  sample_hypersphere_uniform(vector4 u)"
      ]
    },
    {
      "name": "sample_lognormal",
      "description": "Samples the log-normal distribution based on parameters of the underlying normal distribution.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_lognormal.html",
      "usage": [
        "float  sample_lognormal(float mu, float sigma, float u)",
        "float  sample_lognormal(float mu, float sigma, float minvalue, float maxvalue, float u)"
      ]
    },
    {
      "name": "sample_orientation_cone",
      "description": "Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_orientation_cone.html",
      "usage": [
        "vector4  sample_orientation_cone(vector4 center, float maxangle, vector u)"
      ]
    },
    {
      "name": "sample_lognormal_by_median",
      "description": "Samples the log-normal distribution based on median and standard deviation.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_lognormal_by_median.html",
      "usage": [
        "float  sample_lognormal_by_median(float median, float stddev, float u)",
        "float  sample_lognormal_by_median(float origmedian, float origstddev, float minvalue, float maxvalue, float u)"
      ]
    },
    {
      "name": "sample_normal",
      "description": "Samples the normal (Gaussian) distribution.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_normal.html",
      "usage": [
        "float  sample_normal(float u)",
        "float  sample_normal(float mean, float stddev, float u)",
        "float  sample_normal(float origmean, float origstddev, float minvalue, float maxvalue, float u)",
        "vector2  sample_normal(vector2 u)",
        "vector  sample_normal(vector u)",
        "vector4  sample_normal(vector4 u)",
        "sample_normal(0,1,0,maxdist,u.x) * sample_direction_uniform(set(u.y,u.z))"
      ]
    },
    {
      "name": "sample_orientation_uniform",
      "description": "Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_orientation_uniform.html",
      "usage": [
        "vector4  sample_orientation_uniform(vector u)"
      ]
    },
    {
      "name": "sample_photon",
      "description": "Samples a 3D position on a light source and runs the light shader at that point.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_photon.html",
      "usage": [
        "int  sample_photon(light lp, vector &pos, vector &dir, float &scale, float time)"
      ]
    },
    {
      "name": "sample_sphere_cone",
      "description": "Generates a uniform vector with length < 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_sphere_cone.html",
      "usage": [
        "vector  sample_sphere_cone(vector center, float maxangle, vector u)"
      ]
    },
    {
      "name": "sample_sphere_shell_uniform",
      "description": "Generates a uniform vector with alpha < length < 1, where 0 < alpha < 1, given a vector of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_sphere_shell_uniform.html",
      "usage": [
        "vector  sample_sphere_shell_uniform(vector u, float alpha)"
      ]
    },
    {
      "name": "variance",
      "description": "Computes the mean value and variance for a value.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/variance.html",
      "usage": [
        "float  variance(float variable, float &mean, int &sample_size)"
      ]
    },
    {
      "name": "sampledisk",
      "description": "Warps uniform random samples to a disk.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sampledisk.html",
      "usage": [
        "void  sampledisk(float &x, float &y, float sx, float sy)"
      ]
    },
    {
      "name": "sample_sphere_uniform",
      "description": "Generates a uniform vector with length < 1, given a vector of uniform numbers between 0 and 1.",
      "category": "Sampling",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sample_sphere_uniform.html",
      "usage": [
        "vector  sample_sphere_uniform(vector u)"
      ]
    },
    {
      "name": "sensor_panorama_getdepth",
      "description": "Sensor function query a rendered GL scene.",
      "category": "Sensor Input",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sensor_panorama_getdepth.html",
      "usage": [
        "float  sensor_panorama_getdepth(int handle, vector dir)"
      ]
    },
    {
      "name": "sensor_panorama_getcone",
      "description": "Sensor function to query average values from rendered GL scene.",
      "category": "Sensor Input",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sensor_panorama_getcone.html",
      "usage": [
        "void  sensor_panorama_getcone(int handle, vector lookodir, float angle, vector colormin, vector colormax, float depthmin, float depthmax, float &strength, vector &dir, vector &color, float &depth)"
      ]
    },
    {
      "name": "sensor_panorama_create",
      "description": "Sensor function to render GL scene and query the result.",
      "category": "Sensor Input",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sensor_panorama_create.html",
      "usage": [
        "int  sensor_panorama_create(float time, vector pos, int size, float near, float far, string candidateobj, string includeobj, string excludeobj, int uselit)"
      ]
    },
    {
      "name": "sensor_panorama_getcolor",
      "description": "Sensor function query a rendered GL scene.",
      "category": "Sensor Input",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sensor_panorama_getcolor.html",
      "usage": [
        "vector  sensor_panorama_getcolor(int handle, vector dir)"
      ]
    },
    {
      "name": "sensor_save",
      "description": "Sensor function to save a rendered GL scene.",
      "category": "Sensor Input",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sensor_save.html",
      "usage": [
        "int  sensor_save(int handle, string colorfile, string depthfile)"
      ]
    },
    {
      "name": "blinnBRDF",
      "description": "",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/blinnBRDF.html",
      "usage": [
        "float  blinnBRDF(vector L, vector N, vector V, float rough)"
      ]
    },
    {
      "name": "area",
      "description": "Returns the area of the micropolygon containing a variable such as P.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/area.html",
      "usage": [
        "float  area(vector p, ...)"
      ]
    },
    {
      "name": "bouncelabel",
      "description": "",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/bouncelabel.html",
      "usage": [
        "string  bouncelabel(int mask)"
      ]
    },
    {
      "name": "bouncemask",
      "description": "",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/bouncemask.html",
      "usage": [
        "int  bouncemask(string labels)",
        "bouncemask(\"diffuse\")",
        "bouncemask(\"all\")",
        "bouncemask()"
      ]
    },
    {
      "name": "diffuseBRDF",
      "description": "",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/diffuseBRDF.html",
      "usage": [
        "float  diffuseBRDF(vector L, vector N)",
        "float  diffuseBRDF(vector L, vector N, vector V, float rough)"
      ]
    },
    {
      "name": "filterstep",
      "description": "Returns the anti-aliased weight of the step function.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/filterstep.html",
      "usage": [
        "float  filterstep(float edge, float x, ...)",
        "float  filterstep(float edge, float x0, float x1, ...)",
        "filterstep(float edge, x, ...)"
      ]
    },
    {
      "name": "getblurP",
      "description": "Returns the blurred point position (P) vector at a fractional time within the motion blur exposure.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getblurP.html",
      "usage": [
        "vector  getblurP(float delta)",
        "getblurP()",
        "getblurP(0)",
        "getblurP(1)",
        "getblurP(0.5)",
        "getblurP(0)"
      ]
    },
    {
      "name": "fresnel",
      "description": "Computes the fresnel reflection/refraction contributions given an\nincoming vector, surface normal (both normalized), and an index of\nrefraction (eta).",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fresnel.html",
      "usage": [
        "void  fresnel(vector i, vector n, float eta, float &kr, float &kt)",
        "void  fresnel(vector i, vector n, float eta, float &kr, float &kt, vector &R, vector &T)"
      ]
    },
    {
      "name": "frontface",
      "description": "If dot(I, Nref) is less than zero, N will be negated.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/frontface.html",
      "usage": [
        "vector  frontface(vector N, vector I)",
        "vector  frontface(vector N, vector I, vector Nref)"
      ]
    },
    {
      "name": "gather",
      "description": "Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/gather.html",
      "usage": []
    },
    {
      "name": "getcomponents",
      "description": "",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getcomponents.html",
      "usage": [
        "string [] getcomponents()"
      ]
    },
    {
      "name": "getderiv",
      "description": "Evaluates surface derivatives of an attribute.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getderiv.html",
      "usage": [
        "void  getderiv(float attr, string attrName, int isVertexAttr, float s, float t, float &du, float &dv, ...)",
        "void  getderiv(<vector>attr, string attrName, int isVertexAttr, float s, float t, <vector>&du, <vector>&dv, ...)"
      ]
    },
    {
      "name": "getfogname",
      "description": "Returns the name of the current object whose shader is being run.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getfogname.html",
      "usage": [
        "string  getfogname()"
      ]
    },
    {
      "name": "getglobalraylevel",
      "description": "Returns the depth of the ray tree for computing global\nillumination.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getglobalraylevel.html",
      "usage": [
        "int  getglobalraylevel()"
      ]
    },
    {
      "name": "getgroupid",
      "description": "Returns group id containing current primitive.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getgroupid.html",
      "usage": [
        "int  getgroupid()"
      ]
    },
    {
      "name": "getlight",
      "description": "Returns a light struct for the specified light identifier.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getlight.html",
      "usage": [
        "light  getlight(int lid)"
      ]
    },
    {
      "name": "getlightid",
      "description": "Returns the light id for a named light (or -1 for an invalid name).",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getlightid.html",
      "usage": [
        "int  getlightid(string lightname)"
      ]
    },
    {
      "name": "getlightname",
      "description": "Returns the name of the current light when called from within an illuminance loop, or converts an integer light ID into the light\u2019s name.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getlightname.html",
      "usage": [
        "string  getlightname()",
        "string  getlightname(int lightid)"
      ]
    },
    {
      "name": "getlightscope",
      "description": "Returns a selection of lights that illuminate a given material.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getlightscope.html",
      "usage": [
        "void  getlightscope(material mat, string &scope, string &categories)"
      ]
    },
    {
      "name": "getlights",
      "description": "Returns an array of light identifiers for the currently shaded surface.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getlights.html",
      "usage": [
        "int [] getlights(...)",
        "int [] getlights(vector P, ...)",
        "int [] getlights(material mat, vector P, ...)"
      ]
    },
    {
      "name": "getmaterial",
      "description": "Returns a material struct for the current surface.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getmaterial.html",
      "usage": [
        "material  getmaterial()"
      ]
    },
    {
      "name": "getlocalcurvature",
      "description": "Evaluates local curvature of primitive grid, using the same curvature evaluation method as Measure SOPs.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getlocalcurvature.html",
      "usage": [
        "vector  getlocalcurvature(float s, float t)"
      ]
    },
    {
      "name": "getobjectname",
      "description": "Returns the name of the current object whose shader is being run.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getobjectname.html",
      "usage": [
        "string  getobjectname()"
      ]
    },
    {
      "name": "getmaterialid",
      "description": "Returns material id of shaded primitive.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getmaterialid.html",
      "usage": [
        "int  getmaterialid()"
      ]
    },
    {
      "name": "getobjectid",
      "description": "Returns the object id for the current shading context.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getobjectid.html",
      "usage": [
        "int  getobjectid()"
      ]
    },
    {
      "name": "getphotonlight",
      "description": "Returns the integer ID of the light being used for photon shading.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getphotonlight.html",
      "usage": [
        "int  getphotonlight()"
      ]
    },
    {
      "name": "getptextureid",
      "description": "Returns the ptexture face id for the current primitive.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getptextureid.html",
      "usage": [
        "int  getptextureid()"
      ]
    },
    {
      "name": "getprimid",
      "description": "Returns the number of the current primitive.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getprimid.html",
      "usage": [
        "int  getprimid()"
      ]
    },
    {
      "name": "getrayweight",
      "description": "Returns an approximation to the contribution of the ray to the final\npixel color.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getrayweight.html",
      "usage": [
        "float  getrayweight()"
      ]
    },
    {
      "name": "getraylevel",
      "description": "Returns the depth of the ray tree for the current shading.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getraylevel.html",
      "usage": [
        "int  getraylevel()"
      ]
    },
    {
      "name": "getuvtangents",
      "description": "Evaluates UV tangents at a point on an arbitrary object.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getuvtangents.html",
      "usage": [
        "void  getuvtangents(string objName, vector P, vector dir, vector &Tu, vector &Tv)",
        "void  getuvtangents(string objName, vector P, vector dir, vector &Tu, vector &Tv, vector &Tn)"
      ]
    },
    {
      "name": "getsamplestore",
      "description": "Looks up sample data in a channel, referenced by a point.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getsamplestore.html",
      "usage": [
        "int  getsamplestore(string channel, vector P, int &value)",
        "int  getsamplestore(string channel, vector P, float &value)",
        "int  getsamplestore(string channel, vector P, vector &value)",
        "int  getsamplestore(string channel, vector P, vector4 &value)"
      ]
    },
    {
      "name": "gradient",
      "description": "Returns the gradient of a field.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/gradient.html",
      "usage": [
        "vector  gradient(float val, ...)",
        "vector  gradient(vector P, float val, ...)"
      ]
    },
    {
      "name": "getscope",
      "description": "Returns a selection of objects visible to rays for a given material.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getscope.html",
      "usage": [
        "void  getscope(material mat, string raystyle, string &scope, string &categories)"
      ]
    },
    {
      "name": "integratehoseksky",
      "description": "Computes irradiance from the given Hosek Sky on a horizontal surface",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/integratehoseksky.html",
      "usage": [
        "vector  integratehoseksky(float solar_altitude, float solar_azimuth, float turbidity, vector ground_albedo, int number_of_samples)"
      ]
    },
    {
      "name": "haslight",
      "description": "Returns whether a light illuminates the given material.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/haslight.html",
      "usage": [
        "int  haslight(material mat, vector P, int light, ...)"
      ]
    },
    {
      "name": "getsmoothP",
      "description": "Returns modified surface position based on a smoothing function.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getsmoothP.html",
      "usage": [
        "int  getsmoothP(vector &smoothP, vector ray_origin, ...)",
        "vector  getsmoothP(...)"
      ]
    },
    {
      "name": "intersect_lights",
      "description": "Finds the nearest intersection of a ray with any of a list of (area) lights and runs the light shader at the intersection point.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/intersect_lights.html",
      "usage": [
        "int  intersect_lights(int lightids[], vector pos, vector dir, float time, int &idx, float &dist, vector &clr, float &scale, ...)"
      ]
    },
    {
      "name": "illuminance",
      "description": "Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/illuminance.html",
      "usage": [
        "illuminance(pos, dir, \"lightexport\", \"Front*\")"
      ]
    },
    {
      "name": "interpolate",
      "description": "Interpolates a value across the currently shaded micropolygon.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/interpolate.html",
      "usage": [
        "float  interpolate(float val, float sx, float sy)",
        "vector  interpolate(vector val, float sx, float sy)",
        "vector4  interpolate(vector4 val, float sx, float sy)",
        "bsdf  interpolate(bsdf val, float sx, float sy)"
      ]
    },
    {
      "name": "islpeactive",
      "description": "Returns 1 if Light Path Expressions are enabled. 0 Otherwise.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/islpeactive.html",
      "usage": [
        "int  islpeactive()"
      ]
    },
    {
      "name": "isfogray",
      "description": "Returns 1 if the shader is being called to evaluate illumination for\nfog objects, or 0 if the light or shadow shader is being called to\nevaluate surface illumination.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isfogray.html",
      "usage": [
        "int  isfogray()"
      ]
    },
    {
      "name": "irradiance",
      "description": "Computes irradiance (global illumination) at the point P with the normal N.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/irradiance.html",
      "usage": [
        "vector  irradiance(vector P, vector N, ...)"
      ]
    },
    {
      "name": "isshadowray",
      "description": "Returns 1 if the shader is being called to evaluate opacity for\nshadow rays, or 0 if the shader is being called to evaluate for surface\ncolor.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isshadowray.html",
      "usage": [
        "int  isshadowray()"
      ]
    },
    {
      "name": "isshadingRHS",
      "description": "Detects the orientation of default shading space.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isshadingRHS.html",
      "usage": [
        "int  isshadingRHS()"
      ]
    },
    {
      "name": "israytracing",
      "description": "Indicates whether a shader is being executed for ray tracing.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/israytracing.html",
      "usage": [
        "int  israytracing()"
      ]
    },
    {
      "name": "lightbounces",
      "description": "Returns the bounce mask for a light struct.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/lightbounces.html",
      "usage": [
        "int  lightbounces(light lp)"
      ]
    },
    {
      "name": "lightid",
      "description": "Returns the light id for a light struct.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/lightid.html",
      "usage": [
        "int  lightid(light lp)"
      ]
    },
    {
      "name": "isuvrendering",
      "description": "Indicates whether the shader is being evaluated while doing UV rendering (e.g. texture unwrapping)",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isuvrendering.html",
      "usage": [
        "int  isuvrendering()"
      ]
    },
    {
      "name": "lightstate",
      "description": "Queries the renderer for a named property.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/lightstate.html",
      "usage": [
        "int  lightstate(string query, <type>&value)",
        "int  lightstate(string query, <type>&value[])",
        "lightstate()"
      ]
    },
    {
      "name": "limport",
      "description": "Imports a variable from the light shader for the surface.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/limport.html",
      "usage": [
        "int  limport(string name, <type>&value)"
      ]
    },
    {
      "name": "matchvex_specular",
      "description": "Returns a BSDF that matches the output of the traditional VEX specular function.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/matchvex_specular.html",
      "usage": [
        "bsdf  matchvex_specular(float exponent, ...)",
        "bsdf  matchvex_specular(vector nml, float exponent, ...)"
      ]
    },
    {
      "name": "nbouncetypes",
      "description": "",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/nbouncetypes.html",
      "usage": [
        "int  nbouncetypes()"
      ]
    },
    {
      "name": "occlusion",
      "description": "Computes ambient occlusion.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/occlusion.html",
      "usage": [
        "vector  occlusion(vector P, vector N, ...)",
        "void  occlusion(float &coverage, vector &missed_direction, vector P, vector N, ...)"
      ]
    },
    {
      "name": "objectstate",
      "description": "Queries the renderer for a named property.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/objectstate.html",
      "usage": [
        "int  objectstate(string query, <type>&value)",
        "int  objectstate(string query, <type>&value[])",
        "objectstate()"
      ]
    },
    {
      "name": "matchvex_blinn",
      "description": "Returns a BSDF that matches the output of the traditional VEX blinn function.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/matchvex_blinn.html",
      "usage": [
        "bsdf  matchvex_blinn(float exponent, ...)",
        "bsdf  matchvex_blinn(vector nml, float exponent, ...)"
      ]
    },
    {
      "name": "pathtrace",
      "description": "Computes global illumination using PBR for secondary bounces.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pathtrace.html",
      "usage": [
        "vector  pathtrace(vector P, vector N, ...)"
      ]
    },
    {
      "name": "phongBRDF",
      "description": "",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/phongBRDF.html",
      "usage": [
        "float  phongBRDF(vector L, vector N, vector V, float rough)"
      ]
    },
    {
      "name": "rayimport",
      "description": "Imports a value sent by a shader in a gather loop.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/rayimport.html",
      "usage": [
        "int  rayimport(string name, <type>&value)",
        "int  rayimport(string name, <type>&value[])"
      ]
    },
    {
      "name": "rayhittest",
      "description": "Sends a ray from the position P along the direction D.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/rayhittest.html",
      "usage": [
        "float  rayhittest(vector P, vector D, float bias, ...)",
        "float  rayhittest(vector P, vector D, vector &pHit, vector &nHit, float bias, ...)",
        "rayhittest()"
      ]
    },
    {
      "name": "reflect",
      "description": "Returns the vector representing the reflection of the direction\nagainst the normal.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/reflect.html",
      "usage": [
        "vector  reflect(vector direction, vector normal)"
      ]
    },
    {
      "name": "reflectlight",
      "description": "Computes the amount of reflected light which hits the surface.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/reflectlight.html",
      "usage": [
        "vector  reflectlight(float bias, float max_contrib, ...)",
        "vector  reflectlight(vector P, vector D, float bias, float max_contrib, ...)",
        "vector  reflectlight(vector P, vector N, vector I, float bias, float max_contrib, ...)"
      ]
    },
    {
      "name": "refract",
      "description": "Returns the refraction ray given an incoming direction, the\nnormalized normal and an index of refraction.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/refract.html",
      "usage": [
        "vector  refract(vector direction, vector normal, float index)"
      ]
    },
    {
      "name": "refractlight",
      "description": "Computes the illumination of surfaces refracted by the current\nsurface.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/refractlight.html",
      "usage": [
        "void  refractlight(vector &cf, vector &of, float &af, vector P, vector D, float bias, float max_contrib, ...)",
        "void  refractlight(vector &cf, vector &of, float &af, vector P, vector N, vector I, float eta, float bias, float max_contrib, ...)"
      ]
    },
    {
      "name": "renderstate",
      "description": "Queries the renderer for a named property.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/renderstate.html",
      "usage": [
        "int  renderstate(string query, <type>&value)",
        "int  renderstate(string query, <type>&value[])",
        "int  renderstate(material mat, string query, <type>&value)",
        "renderstate()"
      ]
    },
    {
      "name": "resolvemissedray",
      "description": "Returns the background color for rays that exit the scene.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/resolvemissedray.html",
      "usage": [
        "vector  resolvemissedray(vector dir, float time, int mask, ...)"
      ]
    },
    {
      "name": "scatter",
      "description": "Evaluates a scattering event through the domain of a geometric object.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/scatter.html",
      "usage": [
        "int  scatter(vector ipoint, vector inormal, vector idirection, vector idistribution, float time, float maxdist, vector &opoint, vector &onormal, vector &odirection)"
      ]
    },
    {
      "name": "setcurrentlight",
      "description": "Sets the current light",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setcurrentlight.html",
      "usage": [
        "int  setcurrentlight(int lightid)"
      ]
    },
    {
      "name": "setsamplestore",
      "description": "Stores sample data in a channel, referenced by a point.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setsamplestore.html",
      "usage": [
        "int  setsamplestore(string channel, vector P, int value)",
        "int  setsamplestore(string channel, vector P, float value)",
        "int  setsamplestore(string channel, vector P, vector value)",
        "int  setsamplestore(string channel, vector P, vector4 value)"
      ]
    },
    {
      "name": "shadow",
      "description": "Calls shadow shaders for the current light source.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/shadow.html",
      "usage": [
        "void  shadow(vector &Cl)",
        "vector  shadow(vector Cl)",
        "void  shadow(vector &Cl, vector P, vector L)",
        "vector  shadow(vector Cl, vector P, vector L)"
      ]
    },
    {
      "name": "shimport",
      "description": "Imports a variable from the shadow shader for the surface.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/shimport.html",
      "usage": [
        "int  shimport(string variable_name, <type>&value)"
      ]
    },
    {
      "name": "shadow_light",
      "description": "Executes the shadow shader for a given light and returns the amount of shadowing as a multiplier of the shaded color.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/shadow_light.html",
      "usage": [
        "vector  shadow_light(int lightid, vector pos, vector dir, float time, ...)"
      ]
    },
    {
      "name": "simport",
      "description": "Imports a variable sent by a surface shader in an illuminance loop.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/simport.html",
      "usage": [
        "int  simport(string name, <type>&value)"
      ]
    },
    {
      "name": "specularBRDF",
      "description": "Returns the computed BRDFs for the different lighting models used in VEX shading.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/specularBRDF.html",
      "usage": [
        "float  specularBRDF(vector L, vector N, vector V, float rough)"
      ]
    },
    {
      "name": "switch",
      "description": "Use a different bsdf for direct or indirect lighting.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/switch.html",
      "usage": [
        "bsdf  switch(bsdf direct, bsdf indirect)"
      ]
    },
    {
      "name": "storelightexport",
      "description": "Stores exported data for a light.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/storelightexport.html",
      "usage": [
        "void  storelightexport(string lightname, string exportname, <type>value)",
        "void  storelightexport(string lightname, string exportname, <type>value[])"
      ]
    },
    {
      "name": "translucent",
      "description": "Returns a Lambertian translucence BSDF.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/translucent.html",
      "usage": [
        "bsdf  translucent(vector nml, vector ng, ...)"
      ]
    },
    {
      "name": "trace",
      "description": "Sends a ray from P along the normalized vector D.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/trace.html",
      "usage": [
        "void  trace(vector &cv, vector &of, float &af, vector P, vector D, float shadow_bias, float max_contrib, ...)",
        "int  trace(vector pos, vector dir, float time, ...)"
      ]
    },
    {
      "name": "wireblinn",
      "description": "",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/wireblinn.html",
      "usage": [
        "bsdf  wireblinn(vector tangent, float exponent, ...)"
      ]
    },
    {
      "name": "uvunwrap",
      "description": "Computes the position and normal at given (u, v) coordinates, for use in a lens shader.",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/uvunwrap.html",
      "usage": [
        "int  uvunwrap(string object_path, float u, float v, float time, vector &P, vector &I)",
        "int  uvunwrap(string object_path, float u, float v, float time, vector &P, vector &I, vector &mikkelsenUtan, vector &mikkelsenVtan)"
      ]
    },
    {
      "name": "wirediffuse",
      "description": "",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/wirediffuse.html",
      "usage": [
        "bsdf  wirediffuse(vector tangent, ...)"
      ]
    },
    {
      "name": "writepixel",
      "description": "Writes color information to a pixel in the output image",
      "category": "Shading and Rendering",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/writepixel.html",
      "usage": [
        "void  writepixel(string channel, float ndc_x, float ndc_y, vector clr)"
      ]
    },
    {
      "name": "abspath",
      "description": "Returns the full path of a file.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/abspath.html",
      "usage": [
        "string  abspath(string relpath)"
      ]
    },
    {
      "name": "chr",
      "description": "Converts an unicode codepoint to a UTF8 string.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/chr.html",
      "usage": [
        "string  chr(int value)"
      ]
    },
    {
      "name": "concat",
      "description": "Concatenate all the strings specified to form a single string.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/concat.html",
      "usage": [
        "string  concat(string s1, string s2, ...)",
        "concat()"
      ]
    },
    {
      "name": "decodeparm",
      "description": "Decodes a node parameter name that was previously encoded.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/decodeparm.html",
      "usage": [
        "string  decodeparm(string str)"
      ]
    },
    {
      "name": "decode",
      "description": "Decodes a variable name that was previously encoded.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/decode.html",
      "usage": [
        "string  decode(string str)"
      ]
    },
    {
      "name": "decodeattrib",
      "description": "Decodes a geometry attribute name that was previously encoded.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/decodeattrib.html",
      "usage": [
        "string  decodeattrib(string str)"
      ]
    },
    {
      "name": "decodeutf8",
      "description": "Decodes a UTF8 string into a series of codepoints.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/decodeutf8.html",
      "usage": [
        "int [] decodeutf8(string str)"
      ]
    },
    {
      "name": "encode",
      "description": "Encodes any string into a valid variable name.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/encode.html",
      "usage": [
        "string  encode(string str)"
      ]
    },
    {
      "name": "encodeattrib",
      "description": "Encodes any string into a valid geometry attribute name.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/encodeattrib.html",
      "usage": [
        "string  encodeattrib(string str)"
      ]
    },
    {
      "name": "encodeparm",
      "description": "Encodes any string into a valid node parameter name.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/encodeparm.html",
      "usage": [
        "string  encodeparm(string str)"
      ]
    },
    {
      "name": "encodeutf8",
      "description": "Encodes a UTF8 string from a series of codepoints.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/encodeutf8.html",
      "usage": [
        "string  encodeutf8(int codepoints[])"
      ]
    },
    {
      "name": "endswith",
      "description": "Indicates the string ends with the specified string.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/endswith.html",
      "usage": [
        "int  endswith(string haystack, string needle)"
      ]
    },
    {
      "name": "find",
      "description": "Finds an item in an array or string.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/find.html",
      "usage": [
        "int  find(string haystack, string needle)",
        "int  find(string haystack, string needle, int start)",
        "int  find(string haystack, string needle, int start, int end)",
        "int [] find(string haystack, string needle)",
        "int [] find(string haystack, string needle, int start)",
        "int [] find(string haystack, string needle, int start, int end)",
        "int  find(<type>array[], <type>target)",
        "int  find(<type>array[], <type>target, int start)",
        "int  find(<type>array[], <type>target, int start, int end)",
        "int [] find(<type>array[], <type>target)",
        "int [] find(<type>array[], <type>target, int start)",
        "int [] find(<type>array[], <type>target, int start, int end)"
      ]
    },
    {
      "name": "isalpha",
      "description": "Returns 1 if all the characters in the string are alphabetic",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isalpha.html",
      "usage": [
        "int  isalpha(string str)"
      ]
    },
    {
      "name": "isdigit",
      "description": "Returns 1 if all the characters in the string are numeric",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isdigit.html",
      "usage": [
        "int  isdigit(string str)"
      ]
    },
    {
      "name": "join",
      "description": "Concatenate all the strings of an array inserting a common spacer.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/join.html",
      "usage": [
        "string  join(string s[], string spacer)"
      ]
    },
    {
      "name": "lstrip",
      "description": "Strips leading whitespace from a string.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/lstrip.html",
      "usage": [
        "string  lstrip(string value)",
        "string  lstrip(string value, string whitespace)"
      ]
    },
    {
      "name": "itoa",
      "description": "Converts an integer to a string.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/itoa.html",
      "usage": [
        "string  itoa(int number)"
      ]
    },
    {
      "name": "match",
      "description": "This function returns 1 if the subject matches the pattern specified,\nor 0 if the subject doesn\u2019t match.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/match.html",
      "usage": [
        "int  match(string pattern, string subject)"
      ]
    },
    {
      "name": "opdigits",
      "description": "Returns the integer value of the last sequence of digits of a string",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/opdigits.html",
      "usage": [
        "int  opdigits(string str)",
        "int  opdigits()",
        "opdigits(\"/obj/geo34/box21\")",
        "opdigits(\"/obj/geo34/box\")",
        "opdigits(\"/obj/geo34/box2.1\")"
      ]
    },
    {
      "name": "makevalidvarname",
      "description": "Forces a string to conform to the rules for variable names.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/makevalidvarname.html",
      "usage": [
        "string  makevalidvarname(string name)",
        "string  makevalidvarname(string name, string safe_chars)"
      ]
    },
    {
      "name": "pluralize",
      "description": "Converts an English noun to its plural.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pluralize.html",
      "usage": [
        "string  pluralize(string noun)"
      ]
    },
    {
      "name": "ord",
      "description": "Converts an UTF8 string into a codepoint.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ord.html",
      "usage": [
        "int  ord(string value)"
      ]
    },
    {
      "name": "re_find",
      "description": "Matches a regular expression in a string",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/re_find.html",
      "usage": [
        "int  re_find(string regex, string input)",
        "int  re_find(string regex, string input, int start)",
        "int  re_find(string regex, string input, int start, int end)",
        "string  re_find(string regex, string input)",
        "string  re_find(string regex, string input, int start)",
        "string  re_find(string regex, string input, int start, int end)",
        "int  re_find(int &start_pos[], int &end_pos[], string regex, string input)",
        "int  re_find(int &start_pos[], int &end_pos[], string regex, string input, int start)",
        "int  re_find(int &start_pos[], int &end_pos[], string regex, string input, int start, int end)",
        "string [] re_find(string regex, string input)",
        "string [] re_find(string regex, string input, int start)",
        "string [] re_find(string regex, string input, int start, int end)"
      ]
    },
    {
      "name": "re_match",
      "description": "Returns 1 if the entire input string matches the expression",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/re_match.html",
      "usage": [
        "int  re_match(string regex, string input)"
      ]
    },
    {
      "name": "re_split",
      "description": "Splits the given string based on regex match.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/re_split.html",
      "usage": [
        "string [] re_split(string regex, string input, int maxsplits=0)"
      ]
    },
    {
      "name": "re_replace",
      "description": "Replaces instances of regex_find with regex_replace",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/re_replace.html",
      "usage": [
        "string  re_replace(string regex, string replacement, string input, int maxreplace=0)"
      ]
    },
    {
      "name": "re_findall",
      "description": "Finds all instances of the given regular expression in the string",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/re_findall.html",
      "usage": [
        "string [] re_findall(string regex, string input)",
        "string [] re_findall(string regex, string input, int start)",
        "string [] re_findall(string regex, string input, int start, int end)"
      ]
    },
    {
      "name": "relativepath",
      "description": "Computes the relative path for two full paths.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/relativepath.html",
      "usage": [
        "string  relativepath(string src, string dest)",
        "relativepath(\"/obj/geo1/box\", \"/obj/ropnet1/mantra1\")"
      ]
    },
    {
      "name": "relpath",
      "description": "Returns the relative path to a file.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/relpath.html",
      "usage": [
        "string  relpath(string abspath)"
      ]
    },
    {
      "name": "split",
      "description": "Splits a string into tokens.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/split.html",
      "usage": [
        "string [] split(string s)",
        "string [] split(string s, string separators)",
        "string [] split(string s, string separators, int maxsplits)"
      ]
    },
    {
      "name": "rstrip",
      "description": "Strips trailing whitespace from a string.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/rstrip.html",
      "usage": [
        "string  rstrip(string value)",
        "string  rstrip(string value, string whitespace)"
      ]
    },
    {
      "name": "replace",
      "description": "Replaces occurrences of a substring.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/replace.html",
      "usage": [
        "string  replace(string str, string old, string new)",
        "string  replace(string str, string old, string new, int count)"
      ]
    },
    {
      "name": "replace_match",
      "description": "Replaces the matched string pattern with another pattern.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/replace_match.html",
      "usage": [
        "string  replace_match(string str, string pattern_from, string pattern_to)"
      ]
    },
    {
      "name": "startswith",
      "description": "Returns 1 if the string starts with the specified string.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/startswith.html",
      "usage": [
        "int  startswith(string str, string startswith)"
      ]
    },
    {
      "name": "splitpath",
      "description": "Splits a file path into the directory and name parts.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/splitpath.html",
      "usage": [
        "void  splitpath(string fullpath, string &dir, string &name)"
      ]
    },
    {
      "name": "sprintf",
      "description": "Formats a string like printf but returns the result as a string\ninstead of printing it.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sprintf.html",
      "usage": [
        "string  sprintf(string format, ...)",
        "sprintf(\"texture%04d.exr\", @Frame)"
      ]
    },
    {
      "name": "strip",
      "description": "Strips leading and trailing whitespace from a string.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/strip.html",
      "usage": [
        "string  strip(string value)",
        "string  strip(string value, string whitespace)"
      ]
    },
    {
      "name": "titlecase",
      "description": "Returns a string that is the titlecase version of the input string.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/titlecase.html",
      "usage": [
        "string  titlecase(string str)"
      ]
    },
    {
      "name": "strlen",
      "description": "Returns the length of the string.",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/strlen.html",
      "usage": [
        "int  strlen(string string)"
      ]
    },
    {
      "name": "tolower",
      "description": "Converts all characters in string to lower case",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/tolower.html",
      "usage": [
        "string  tolower(string str)"
      ]
    },
    {
      "name": "osd_firstpatch",
      "description": "",
      "category": "Subdivision Surfaces",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/osd_firstpatch.html",
      "usage": [
        "int  osd_firstpatch(<geometry>geometry, int face_id)"
      ]
    },
    {
      "name": "toupper",
      "description": "Converts all characters in string to upper case",
      "category": "Strings",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/toupper.html",
      "usage": [
        "string  toupper(string str)"
      ]
    },
    {
      "name": "osd_facecount",
      "description": "",
      "category": "Subdivision Surfaces",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/osd_facecount.html",
      "usage": [
        "int  osd_facecount(<geometry>geometry)"
      ]
    },
    {
      "name": "osd_limitsurfacevertex",
      "description": "Evaluates a vertex attribute at the subdivision limit surface using Open Subdiv.",
      "category": "Subdivision Surfaces",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/osd_limitsurfacevertex.html",
      "usage": [
        "int  osd_limitsurfacevertex(<geometry>geometry, string attrib_name, int face_id, float u, float v, <type>&result)",
        "int  osd_limitsurfacevertex(<geometry>geometry, string attrib_name, int face_id, float u, float v, float &result[])"
      ]
    },
    {
      "name": "osd_limitsurface",
      "description": "Evaluates a point attribute at the subdivision limit surface using Open Subdiv.",
      "category": "Subdivision Surfaces",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/osd_limitsurface.html",
      "usage": [
        "int  osd_limitsurface(<geometry>geometry, string attrib_name, int patch_id, float u, float v, <type>&result)",
        "int  osd_limitsurface(<geometry>geometry, string attrib_name, int patch_id, float u, float v, float &result[])"
      ]
    },
    {
      "name": "osd_lookupface",
      "description": "Outputs the Houdini face and UV coordinates corresponding to the given coordinates on an OSD patch.",
      "category": "Subdivision Surfaces",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/osd_lookupface.html",
      "usage": [
        "int  osd_lookupface(<geometry>geometry, int patch_id, float patch_u, float patch_v, int &face_id, float &face_u, float &face_v)",
        "int  osd_lookupface(<geometry>geometry, int patch_id, float patch_u, float patch_v, int &face_id, float &face_u, float &face_v, string attribute)"
      ]
    },
    {
      "name": "osd_lookuppatch",
      "description": "Outputs the OSD patch and UV coordinates corresponding to the given coordinates on a Houdini polygon face.",
      "category": "Subdivision Surfaces",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/osd_lookuppatch.html",
      "usage": [
        "int  osd_lookuppatch(<geometry>geometry, int face_id, float face_u, float face_v, int &patch_id, float &patch_u, float &patch_v)",
        "int  osd_lookuppatch(<geometry>geometry, int face_id, float face_u, float face_v, int &patch_id, float &patch_u, float &patch_v, string attribute)"
      ]
    },
    {
      "name": "osd_patchcount",
      "description": "",
      "category": "Subdivision Surfaces",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/osd_patchcount.html",
      "usage": [
        "int  osd_patchcount(<geometry>geometry)",
        "int  osd_patchcount(<geometry>geometry, int face_id)"
      ]
    },
    {
      "name": "osd_patches",
      "description": "Returns a list of patch IDs for the patches in a subdivision hull.",
      "category": "Subdivision Surfaces",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/osd_patches.html",
      "usage": [
        "int [] osd_patches(<geometry>geometry, int face_id)"
      ]
    },
    {
      "name": "tet_adjacent",
      "description": "Returns primitive number of an adjacent tetrahedron.",
      "category": "Tetrahedrons",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/tet_adjacent.html",
      "usage": [
        "int  tet_adjacent(<geometry>geometry, int primindex, int faceno)"
      ]
    },
    {
      "name": "tet_faceindex",
      "description": "Returns vertex indices of each face of a tetrahedron.",
      "category": "Tetrahedrons",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/tet_faceindex.html",
      "usage": [
        "int  tet_faceindex(int faceno, int vtxno)"
      ]
    },
    {
      "name": "environment",
      "description": "Returns the color of the environment texture.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/environment.html",
      "usage": [
        "vector  environment(string texture_filename, vector reflect_dir, ...)",
        "vector4  environment(string texture_filename, vector reflect_dir, ...)",
        "vector  environment(string texture_filename, vector reflect_dir0, vector reflect_dir1, vector reflect_dir2, vector reflect_dir3, ...)",
        "vector4  environment(string texture_filename, vector reflect_dir0, vector reflect_dir1, vector reflect_dir2, vector reflect_dir3, ...)",
        "vector  environment(string texture_filename, vector reflect_dir, float filter_angle, ...)",
        "vector4  environment(string texture_filename, vector reflect_dir, float filter_angle, ...)",
        "environment()"
      ]
    },
    {
      "name": "colormap",
      "description": "Looks up a (filtered) color from a texture file.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/colormap.html",
      "usage": [
        "vector|vector4 colormap(string filename, vector uvw, ...)",
        "vector|vector4 colormap(string filename, float u, float v, ...)",
        "vector|vector4 colormap(string filename, vector uv, vector du, vector dv, int samples, ...)",
        "vector|vector4 colormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, ...)",
        "vector|vector4 colormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, int samples, ...)",
        "vector|vector4 colormap(string filename, float u0, float v0, float u1, float v1, float u2, float v2, float u3, float v3, int samples, ...)"
      ]
    },
    {
      "name": "depthmap",
      "description": "The depthmap functions work on an image which was rendered as a\nz-depth image from mantra.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/depthmap.html",
      "usage": [
        "float  depthmap(string filename, vector uvw)",
        "float  depthmap(string filename, float u, float v)"
      ]
    },
    {
      "name": "has_udim",
      "description": "Test string for UDIM or UVTILE patterns.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/has_udim.html",
      "usage": [
        "int  has_udim(string path)"
      ]
    },
    {
      "name": "expand_udim",
      "description": "Perform UDIM or UVTILE texture filename expansion.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/expand_udim.html",
      "usage": [
        "string  expand_udim(float u, float v, string path, ...)",
        "expand_udim(3.1, 4.15, \"map_<UDIM>.rat\")",
        "expand_udim(3.1, 4.15, \"map_%(U)02d_%(V)02d.rat\")",
        "expand_udim(3.14, 11.5, \"map_u%(U)d_v%(V)d.rat\")",
        "expand_udim(3.14, 11.5, \"missing_file<UDIM>.rat\")",
        "expand_udim(3.14, 11.5, \"missing_file<UDIM>.rat\", \"checkfile\", 0)",
        "expand_udim(3.14, 11.5, \"/path/file.rat\")"
      ]
    },
    {
      "name": "importance_remap",
      "description": "Remaps a texture coordinate to another coordinate in the map to optimize sampling of brighter areas.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/importance_remap.html",
      "usage": [
        "vector2  importance_remap(string map, vector2 uv, ...)"
      ]
    },
    {
      "name": "ocean_sample",
      "description": "Evaluates an ocean spectrum and samples the result at a given time and location.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ocean_sample.html",
      "usage": [
        "vector  ocean_sample(string geometry, int phase, int frequency, int amplitude, float hscale, float time, int mode, int downsample, vector pos)"
      ]
    },
    {
      "name": "ptexture",
      "description": "Computes a filtered sample from a ptex texture map. Use texture instead.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ptexture.html",
      "usage": [
        "<type> ptexture(string map, int face_id, ...)",
        "<type> ptexture(string map, int face_id, float s, float t, ...)"
      ]
    },
    {
      "name": "rawcolormap",
      "description": "Looks up an unfiltered color from a texture file.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/rawcolormap.html",
      "usage": [
        "vector|vector4 rawcolormap(string filename, vector uvw, ...)",
        "vector|vector4 rawcolormap(string filename, float u, float v, ...)",
        "vector|vector4 rawcolormap(string filename, vector uv, vector du, vector dv, int samples, ...)",
        "vector|vector4 rawcolormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, ...)",
        "vector|vector4 rawcolormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, int samples, ...)",
        "vector|vector4 rawcolormap(string filename, float u0, float v0, float u1, float v1, float u2, float v2, float u3, float v3, int samples, ...)"
      ]
    },
    {
      "name": "shadowmap",
      "description": "The shadowmap function will treat the shadow map as if the image were\nrendered from a light source.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/shadowmap.html",
      "usage": [
        "float|vector shadowmap(string filename, vector Pndc, float spread, float bias, float quality, ...)",
        "float|vector shadowmap(string filename, vector Pndc, float spread, float bias, float quality, ...)",
        "vector  shadowmap(string filename, vector Pndc1, vector Pndc2, vector Pndc3, vector Pndc4, float spread, float bias, float quality, ...)"
      ]
    },
    {
      "name": "teximport",
      "description": "Imports attributes from texture files.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/teximport.html",
      "usage": [
        "int  teximport(string map, string attribute, <type>&value)",
        "int  teximport(string map, string token, int|string&values[])",
        "teximport()"
      ]
    },
    {
      "name": "texture",
      "description": "Computes a filtered sample of the texture map specified.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/texture.html",
      "usage": [
        "vector|vector4 texture(string map, ...)",
        "vector|vector4 texture(string map, float ss, float tt, ...)",
        "vector|vector4 texture(string map, float s0, float t0, float s1, float t1, float s2, float t2, float s3, float t3, ...)",
        "texture(map, 1-t, s)",
        "texture(map, s, t)"
      ]
    },
    {
      "name": "texprintf",
      "description": "Similar to sprintf, but does expansion of UDIM or UVTILE texture filename expansion.",
      "category": "Texturing",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/texprintf.html",
      "usage": [
        "string  texprintf(float u, float v, string format, ...)"
      ]
    },
    {
      "name": "dihedral",
      "description": "Computes the rotation matrix or quaternion which rotates the vector a onto the vector b.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/dihedral.html",
      "usage": [
        "matrix3  dihedral(vector a, vector b)",
        "vector4  dihedral(vector a, vector b)"
      ]
    },
    {
      "name": "fromNDC",
      "description": "Transforms a position from normal device coordinates to the\ncoordinates in the appropriate space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/fromNDC.html",
      "usage": [
        "vector  fromNDC(vector v)",
        "vector  fromNDC(string space, vector v)"
      ]
    },
    {
      "name": "getpackedtransform",
      "description": "Gets the transform of a packed primitive.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getpackedtransform.html",
      "usage": [
        "matrix  getpackedtransform(int input, int primnum)"
      ]
    },
    {
      "name": "getspace",
      "description": "Returns a transform from one space to another.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getspace.html",
      "usage": [
        "matrix  getspace(string fromspace, string tospace)"
      ]
    },
    {
      "name": "instance",
      "description": "Creates an instance transform matrix.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/instance.html",
      "usage": [
        "matrix  instance(vector P, vector N)",
        "matrix  instance(vector P, vector N, vector scale)",
        "matrix  instance(vector P, vector N, vector scale, vector pivot)",
        "matrix  instance(vector P, vector N, vector scale, vector4 rotate, vector up)",
        "matrix  instance(vector P, vector N, vector scale, vector4 rotate, vector up, vector pivot)",
        "matrix  instance(vector P, vector N, vector scale, vector4 rotate, vector4 orient)",
        "matrix  instance(vector P, vector N, vector scale, vector4 rotate, vector4 orient, vector pivot)"
      ]
    },
    {
      "name": "lookat",
      "description": "Computes a rotation matrix or angles to orient the negative z-axis along the vector (to-from) under the transformation.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/lookat.html",
      "usage": [
        "matrix3  lookat(vector from, vector to)",
        "matrix3  lookat(vector from, vector to, float roll)",
        "matrix3  lookat(vector from, vector to, vector up)",
        "vector  lookat(vector from, vector to, float roll, int xyz)",
        "vector  lookat(vector from, vector to, vector up, int xyz)"
      ]
    },
    {
      "name": "maketransform",
      "description": "Builds a 3\u00d73 or 4\u00d74 transform matrix.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/maketransform.html",
      "usage": [
        "matrix3  maketransform(vector zaxis, vector yaxis)",
        "matrix3  maketransform(int xyz, vector angles)",
        "matrix  maketransform(vector zaxis, vector yaxis, vector translate)",
        "matrix  maketransform(int trs, int xyz, vector t, vector r)",
        "matrix  maketransform(int trs, int xyz, vector t, vector r, vector s)",
        "matrix  maketransform(int trs, int xyz, vector t, vector r, vector s, vector p)",
        "matrix  maketransform(int trs, int xyz, vector t, vector r, vector s, vector p, vector pr)",
        "matrix  maketransform(int trs, int xyz, vector t, vector r, vector s, vector p, vector pr, vector shears)",
        "maketransform(int trs, ...)",
        "maketransform(int xyz, vector angles)",
        "maketransform(int trs, ...)",
        "maketransform(vector zaxis, yaxis, ...)"
      ]
    },
    {
      "name": "ntransform",
      "description": "Transforms a normal vector.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ntransform.html",
      "usage": [
        "vector  ntransform(vector v, matrix transform)",
        "vector  ntransform(string tospace, vector v)",
        "vector  ntransform(string fromspace, string tospace, vector v)"
      ]
    },
    {
      "name": "ndcdepth",
      "description": "Returns the camera space z-depth of the NDC z-depth value.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ndcdepth.html",
      "usage": [
        "float  ndcdepth(float z)"
      ]
    },
    {
      "name": "orthographic",
      "description": "Create an orthographic projection matrix.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/orthographic.html",
      "usage": [
        "matrix  orthographic(float zoom, float orthowidth, float image_aspect, float pixel_aspect, float clip_near, float clip_far)",
        "matrix  orthographic(float zoom, float orthowidth, float image_aspect, float pixel_aspect, float clip_near, float clip_far, vector4 window)"
      ]
    },
    {
      "name": "ow_vspace",
      "description": "Transforms a direction vector from Object to World space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ow_vspace.html",
      "usage": [
        "vector  ow_vspace(vector v)"
      ]
    },
    {
      "name": "ow_nspace",
      "description": "Transforms a normal vector from Object to World space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ow_nspace.html",
      "usage": [
        "vector  ow_nspace(vector v)"
      ]
    },
    {
      "name": "ow_space",
      "description": "Transforms a position value from Object to World space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ow_space.html",
      "usage": [
        "matrix  ow_space()",
        "vector  ow_space(vector v)",
        "vector4  ow_space(vector4 v)"
      ]
    },
    {
      "name": "packedtransform",
      "description": "Transforms a packed primitive.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/packedtransform.html",
      "usage": [
        "void  packedtransform(int input, int primnum, matrix transform)"
      ]
    },
    {
      "name": "perspective",
      "description": "Create a perspective projection matrix.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/perspective.html",
      "usage": [
        "matrix  perspective(float zoom, float image_aspect, float pixel_aspect, float clip_near, float clip_far)",
        "matrix  perspective(float zoom, float image_aspect, float pixel_aspect, float clip_near, float clip_far, vector4 window)"
      ]
    },
    {
      "name": "polardecomp",
      "description": "Computes the polar decomposition of a matrix.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/polardecomp.html",
      "usage": [
        "matrix3  polardecomp(matrix3 transform)",
        "void  polardecomp(matrix3 transform, matrix3 &rot, matrix3 &stretch, int check_determinant=1)"
      ]
    },
    {
      "name": "prescale",
      "description": "Prescales the given matrix in three directions simultaneously (X, Y, Z -\ngiven by the components of the scale_vector).",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/prescale.html",
      "usage": [
        "void  prescale(matrix &m, vector scale_vector)",
        "void  prescale(matrix3 &m, vector scale_vector)"
      ]
    },
    {
      "name": "pretranslate",
      "description": "Pretranslates a matrix by a vector.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pretranslate.html",
      "usage": [
        "void  pretranslate(matrix &m, vector amount)"
      ]
    },
    {
      "name": "prerotate",
      "description": "Applies a pre rotation to the given matrix.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/prerotate.html",
      "usage": [
        "void  prerotate(matrix3 &m, float amount, vector axis)",
        "void  prerotate(matrix &m, float amount, vector axis)",
        "void  prerotate(matrix3 &m, vector angles, int xyz)",
        "void  prerotate(matrix &m, vector angles, int xyz)",
        "void  prerotate(matrix3 &m, float angle, int axis)",
        "void  prerotate(matrix &m, float angle, int axis)"
      ]
    },
    {
      "name": "rotate_x_to",
      "description": "Rotates a vector by a rotation that would bring the x-axis to a given direction.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/rotate_x_to.html",
      "usage": [
        "vector2  rotate_x_to(vector2 direction, vector2 v)",
        "vector  rotate_x_to(vector direction, vector v)",
        "vector4  rotate_x_to(vector4 direction, vector4 v)"
      ]
    },
    {
      "name": "rotate",
      "description": "Applies a rotation to the given matrix.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/rotate.html",
      "usage": [
        "void  rotate(matrix2 &m, float amount)",
        "void  rotate(matrix3 &m, float amount, vector axis)",
        "void  rotate(matrix &m, float amount, vector axis)",
        "void  rotate(matrix3 &m, vector angles, int xyz)",
        "void  rotate(matrix &m, vector angles, int xyz)",
        "void  rotate(matrix3 &m, float angle, int axis)",
        "void  rotate(matrix &m, float angle, int axis)"
      ]
    },
    {
      "name": "ptransform",
      "description": "Transforms a vector from one space to another.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ptransform.html",
      "usage": [
        "vector  ptransform(vector vec, matrix transform)",
        "vector4  ptransform(vector4 vec, matrix transform)",
        "vector  ptransform(string tospace, vector vec)",
        "vector4  ptransform(string tospace, vector4 vec)",
        "vector  ptransform(string fromspace, string tospace, vector vec)",
        "vector4  ptransform(string fromspace, string tospace, vector4 vec)"
      ]
    },
    {
      "name": "smoothrotation",
      "description": "Returns the closest equivalent Euler rotations to a reference rotation.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/smoothrotation.html",
      "usage": [
        "vector  smoothrotation(int order, vector r, vector r_reference)"
      ]
    },
    {
      "name": "setpackedtransform",
      "description": "Sets the transform of a packed primitive.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setpackedtransform.html",
      "usage": [
        "void  setpackedtransform(int input, int primnum, matrix transform)"
      ]
    },
    {
      "name": "scale",
      "description": "Scales the given matrix in three directions simultaneously (X, Y, Z -\ngiven by the components of the scale_vector).",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/scale.html",
      "usage": [
        "void  scale(matrix2 &m, vector2 scale_vector)",
        "void  scale(matrix &m, vector scale_vector)",
        "void  scale(matrix3 &m, vector scale_vector)"
      ]
    },
    {
      "name": "solveconstraint",
      "description": "Applies an inverse kinematics algorithm to a skeleton.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/solveconstraint.html",
      "usage": [
        "vector [] solveconstraint(float lengths[], vector targetpos, float tolerance, matrix relmat, vector constraints[])"
      ]
    },
    {
      "name": "solvecurve",
      "description": "Applies a curve inverse kinematics algorithm to a skeleton.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/solvecurve.html",
      "usage": [
        "vector [] solvecurve(float lengths[], int closed, int orienttonormal, vector tangent, vector points[], vector normals[])",
        "matrix3 [] solvecurve(float lengths[], int closed, int orienttonormal, vector tangent, vector points[], vector normals[])",
        "vector [] solvecurve(float &outlength, vector &outpos, float lengths[], int closed, int orienttonormal, int normalmode, vector tangent, vector points[], vector normals[])",
        "matrix3 [] solvecurve(float &outlength, vector &outpos, float lengths[], int closed, int orienttonormal, int normalmode, vector tangent, vector points[], vector normals[])",
        "vector [] solvecurve(float &outlength, vector &outpos, float lengths[], int closed, int orienttonormal, int normalmode, vector tangent, vector points[], vector normals[], float twists[], float initialtwists[], int fmt, int order, float lod)",
        "matrix3 [] solvecurve(float &outlength, vector &outpos, float lengths[], int closed, int orienttonormal, int normalmode, vector tangent, vector points[], vector normals[], float twists[], float initialtwists[], int fmt, int order, float lod)",
        "vector [] solvecurve(string op, float lengths[], int closed, int orienttonormal, vector tangent, int normalcalcmethod, matrix relmat)",
        "matrix3 [] solvecurve(string op, float lengths[], int closed, int orienttonormal, vector tangent, int normalcalcmethod, matrix relmat)",
        "vector [] solvecurve(string op, float lengths[], int closed, int orienttonormal, vector tangent, int normalcalcmethod, matrix relmat, int primnum, float lod)",
        "matrix3 [] solvecurve(string op, float lengths[], int closed, int orienttonormal, vector tangent, int normalcalcmethod, matrix relmat, int primnum, float lod)"
      ]
    },
    {
      "name": "solvefbik",
      "description": "Applies a full-body inverse kinematics algorithm to a skeleton.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/solvefbik.html",
      "usage": [
        "matrix [] solvefbik(matrix xforms[], int parents[], dict jointoptions[], matrix targetxforms[], int targets[], dict targetoptions[], int iters, float tolerance, int pinroot)",
        "matrix [] solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters)",
        "matrix [] solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters, float tolerance, int pinroot)",
        "matrix [] solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[])",
        "matrix [] solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], int targettypes[], matrix targetoffsets[])",
        "matrix [] solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], matrix goalxforms[], vector4 constrainedxforms[], vector jointlimits[])",
        "matrix [] solvefbik(matrix xforms[], int parents[], int targets[], matrix targetxforms[], int iters, float tolerance, int pinroot, float targetweights[], int targetpriorities[], int targetdepths[], int targettypes[], matrix targetoffsets[], matrix goalxforms[], vector4 constrainedxforms[], vector jointlimits[])"
      ]
    },
    {
      "name": "solveik",
      "description": "Applies an inverse kinematics algorithm to a skeleton.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/solveik.html",
      "usage": [
        "vector [] solveik(float lengths[], vector targetpos, vector twistpos, float twist, int twistflag, float dampen, int resiststraight, float trackingthres, matrix relmat, vector constraints[])",
        "matrix3 [] solveik(float lengths[], vector targetpos, vector twistpos, float twist, int twistflag, float dampen, int resiststraight, float trackingthres, matrix relmat, vector constraints[])"
      ]
    },
    {
      "name": "toNDC",
      "description": "Transforms a position into normal device coordinates.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/toNDC.html",
      "usage": [
        "vector  toNDC(vector point)",
        "vector  toNDC(string camera_name, vector point)"
      ]
    },
    {
      "name": "solvephysfbik",
      "description": "Applies a full-body inverse kinematics algorithm to a skeleton, with optional control over the center of mass.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/solvephysfbik.html",
      "usage": [
        "matrix [] solvephysfbik(matrix xforms[], int parents[], dict jointoptions[], matrix targetxforms[], int targets[], dict targetoptions[], int iters, float damping, float tolerance)"
      ]
    },
    {
      "name": "tw_nspace",
      "description": "Transforms a normal vector from Texture to World space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/tw_nspace.html",
      "usage": [
        "vector  tw_nspace(vector v)"
      ]
    },
    {
      "name": "translate",
      "description": "Translates a matrix by a vector.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/translate.html",
      "usage": [
        "void  translate(matrix &m, vector amount)",
        "void  translate(matrix &m, vector4 amount)"
      ]
    },
    {
      "name": "tw_space",
      "description": "Transforms a position value from Texture to World space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/tw_space.html",
      "usage": [
        "matrix  tw_space()",
        "vector  tw_space(vector v)",
        "vector4  tw_space(vector4 v)"
      ]
    },
    {
      "name": "tw_vspace",
      "description": "Transforms a direction vector from Texture to World space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/tw_vspace.html",
      "usage": [
        "vector  tw_vspace(vector v)"
      ]
    },
    {
      "name": "vtransform",
      "description": "Transforms a directional vector.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/vtransform.html",
      "usage": [
        "vector  vtransform(vector v, matrix transform)",
        "vector  vtransform(string tospace, vector v)",
        "vector  vtransform(string fromspace, string tospace, vector v)"
      ]
    },
    {
      "name": "wo_space",
      "description": "Transforms a position value from World to Object space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/wo_space.html",
      "usage": [
        "matrix  wo_space()",
        "vector  wo_space(vector pos)",
        "vector4  wo_space(vector4 pos)"
      ]
    },
    {
      "name": "wo_nspace",
      "description": "Transforms a normal vector from World to Object space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/wo_nspace.html",
      "usage": [
        "vector  wo_nspace(vector v)"
      ]
    },
    {
      "name": "wt_nspace",
      "description": "Transforms a normal vector from World to Texture space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/wt_nspace.html",
      "usage": [
        "vector  wt_nspace(vector v)"
      ]
    },
    {
      "name": "wo_vspace",
      "description": "Transforms a direction vector from World to Object space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/wo_vspace.html",
      "usage": [
        "vector  wo_vspace(vector v)"
      ]
    },
    {
      "name": "wt_vspace",
      "description": "Transforms a direction vector from World to Texture space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/wt_vspace.html",
      "usage": [
        "vector  wt_vspace(vector v)"
      ]
    },
    {
      "name": "wt_space",
      "description": "Transforms a position value from World to Texture space.",
      "category": "Transforms and Space",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/wt_space.html",
      "usage": [
        "matrix  wt_space()",
        "vector  wt_space(vector v)",
        "vector4  wt_space(vector4 v)"
      ]
    },
    {
      "name": "usd_addattrib",
      "description": "Creates an attribute of a given type on a primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addattrib.html",
      "usage": [
        "int  usd_addattrib(int stagehandle, string primpath, string name, string typename)"
      ]
    },
    {
      "name": "usd_addcollectionexclude",
      "description": "Excludes an object from the collection",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addcollectionexclude.html",
      "usage": [
        "int  usd_addcollectionexclude(int stagehandle, string collectionpath, string path)"
      ]
    },
    {
      "name": "usd_addcollectioninclude",
      "description": "Includes an object in the collection",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addcollectioninclude.html",
      "usage": [
        "int  usd_addcollectioninclude(int stagehandle, string collectionpath, string path)"
      ]
    },
    {
      "name": "usd_addinversetotransformorder",
      "description": "Appends an inversed transform operation to the primitive\u2019s transform order",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addinversetotransformorder.html",
      "usage": [
        "int  usd_addinversetotransformorder(int stagehandle, string primpath, string name)"
      ]
    },
    {
      "name": "usd_addprim",
      "description": "Creates a primitive of a given type.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addprim.html",
      "usage": [
        "int  usd_addprim(int stagehandle, string primpath, string typename)"
      ]
    },
    {
      "name": "usd_addorient",
      "description": "Applies a quaternion orientation to the primitive",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addorient.html",
      "usage": [
        "int  usd_addorient(int stagehandle, string primpath, string suffix, vector4 orient)"
      ]
    },
    {
      "name": "usd_addprimvar",
      "description": "Creates a primvar of a given type on a primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addprimvar.html",
      "usage": [
        "int  usd_addprimvar(int stagehandle, string primpath, string name, string typename)",
        "int  usd_addprimvar(int stagehandle, string primpath, string name, string typename, string interpolation)"
      ]
    },
    {
      "name": "usd_addrelationshiptarget",
      "description": "Adds a target to the primitive\u2019s relationship",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addrelationshiptarget.html",
      "usage": [
        "int  usd_addrelationshiptarget(int stagehandle, string primpath, string name, string target)"
      ]
    },
    {
      "name": "usd_addschemaattrib",
      "description": "Creates an attribute of a given type on a primitive, and sets the custom metadata flag to False.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addschemaattrib.html",
      "usage": [
        "int  usd_addschemaattrib(int stagehandle, string primpath, string name, string typename)"
      ]
    },
    {
      "name": "usd_addscale",
      "description": "Applies a scale to the primitive",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addscale.html",
      "usage": [
        "int  usd_addscale(int stagehandle, string primpath, string suffix, vector scale)"
      ]
    },
    {
      "name": "usd_addrotate",
      "description": "Applies a rotation to the primitive",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addrotate.html",
      "usage": [
        "int  usd_addrotate(int stagehandle, string primpath, string suffix, int axis, float angle)",
        "int  usd_addrotate(int stagehandle, string primpath, string suffix, int xyz, vector angles)"
      ]
    },
    {
      "name": "usd_addtotransformorder",
      "description": "Appends a transform operation to the primitive\u2019s transform order",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addtotransformorder.html",
      "usage": [
        "int  usd_addtotransformorder(int stagehandle, string primpath, string name)"
      ]
    },
    {
      "name": "usd_applyapi",
      "description": "Apply an API schema to a primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_applyapi.html",
      "usage": [
        "int  usd_applyapi(int stagehandle, string primpath, string apischemaname)"
      ]
    },
    {
      "name": "usd_attrib",
      "description": "Reads the value of an attribute from the USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_attrib.html",
      "usage": [
        "<type> usd_attrib(<stage>stage, string primpath, string name)",
        "<type>[] usd_attrib(<stage>stage, string primpath, string name)",
        "<type> usd_attrib(<stage>stage, string primpath, string name, float timecode)",
        "<type>[] usd_attrib(<stage>stage, string primpath, string name, float timecode)"
      ]
    },
    {
      "name": "usd_addtranslate",
      "description": "Applies a translation to the primitive",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addtranslate.html",
      "usage": [
        "int  usd_addtranslate(int stagehandle, string primpath, string suffix, vector amount)"
      ]
    },
    {
      "name": "usd_addtransform",
      "description": "Applies a transformation to the primitive",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_addtransform.html",
      "usage": [
        "int  usd_addtransform(int stagehandle, string primpath, string suffix, matrix xform)"
      ]
    },
    {
      "name": "usd_attribelement",
      "description": "Reads the value of an element from an array attribute.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_attribelement.html",
      "usage": [
        "<type> usd_attribelement(<stage>stage, string primpath, string name, int index)",
        "<type> usd_attribelement(<stage>stage, string primpath, string name, int index, float timecode)"
      ]
    },
    {
      "name": "usd_attriblen",
      "description": "Returns the length of the array attribute.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_attriblen.html",
      "usage": [
        "int  usd_attriblen(<stage>stage, string primpath, string name)",
        "int  usd_attriblen(<stage>stage, string primpath, string name, float timecode)"
      ]
    },
    {
      "name": "usd_attribnames",
      "description": "Returns the names of the attributes available on the primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_attribnames.html",
      "usage": [
        "string [] usd_attribnames(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_attribtypename",
      "description": "Returns the name of the attribute type.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_attribtypename.html",
      "usage": [
        "string  usd_attribtypename(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_attribsize",
      "description": "Returns the tuple size of the attribute.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_attribsize.html",
      "usage": [
        "int  usd_attribsize(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_attribtimesamples",
      "description": "Returns the time codes at which the attribute values are authored.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_attribtimesamples.html",
      "usage": [
        "float [] usd_attribtimesamples(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_bindmaterial",
      "description": "Binds a material to a given primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_bindmaterial.html",
      "usage": [
        "int  usd_bindmaterial(int stagehandle, string primpath, string materialpath)"
      ]
    },
    {
      "name": "usd_blockprimvar",
      "description": "Blocks the primvar.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_blockprimvar.html",
      "usage": [
        "int  usd_blockprimvar(int stagehandle, string primpath, string name)"
      ]
    },
    {
      "name": "usd_blockattrib",
      "description": "Blocks the attribute.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_blockattrib.html",
      "usage": [
        "int  usd_blockattrib(int stagehandle, string primpath, string name)"
      ]
    },
    {
      "name": "usd_blockrelationship",
      "description": "Blocks the primitive\u2019s relationship",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_blockrelationship.html",
      "usage": [
        "int  usd_blockrelationship(int stagehandle, string primpath, string name)"
      ]
    },
    {
      "name": "usd_cleartransformorder",
      "description": "Clears the primitive\u2019s transform order",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_cleartransformorder.html",
      "usage": [
        "int  usd_cleartransformorder(int stagehandle, string primpath)"
      ]
    },
    {
      "name": "usd_boundmaterialpath",
      "description": "Returns the material path bound to a given primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_boundmaterialpath.html",
      "usage": [
        "string  usd_boundmaterialpath(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_blockprimvarindices",
      "description": "Blocks the primvar.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_blockprimvarindices.html",
      "usage": [
        "int  usd_blockprimvarindices(int stagehandle, string primpath, string name)"
      ]
    },
    {
      "name": "usd_childnames",
      "description": "Returns the names of the primitive\u2019s children.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_childnames.html",
      "usage": [
        "string [] usd_childnames(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_clearmetadata",
      "description": "Clears the value of the metadata.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_clearmetadata.html",
      "usage": [
        "int  usd_clearmetadata(int stagehandle, string path, string name)"
      ]
    },
    {
      "name": "usd_collectioncomputedpaths",
      "description": "Obtains the list of all objects that belong to the collection",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_collectioncomputedpaths.html",
      "usage": [
        "string [] usd_collectioncomputedpaths(<stage>stage, string collectionpath)"
      ]
    },
    {
      "name": "usd_collectionexcludes",
      "description": "Obtains the object paths that are in the collection\u2019s exclude list",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_collectionexcludes.html",
      "usage": [
        "string [] usd_collectionexcludes(<stage>stage, string collectionpath)"
      ]
    },
    {
      "name": "usd_collectionincludes",
      "description": "Obtains the object paths that are in the collection\u2019s include list",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_collectionincludes.html",
      "usage": [
        "string [] usd_collectionincludes(<stage>stage, string collectionpath)"
      ]
    },
    {
      "name": "usd_collectionexpansionrule",
      "description": "Obtains the collection\u2019s expansion rule",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_collectionexpansionrule.html",
      "usage": [
        "string  usd_collectionexpansionrule(<stage>stage, string collectionpath)"
      ]
    },
    {
      "name": "usd_collectioncontains",
      "description": "Checks if an object path belongs to the collection",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_collectioncontains.html",
      "usage": [
        "int  usd_collectioncontains(<stage>stage, string collectionpath, string path)"
      ]
    },
    {
      "name": "usd_flattenediprimvar",
      "description": "Reads the value of a flattened primvar directly from the USD primitive or from USD primitive\u2019s ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_flattenediprimvar.html",
      "usage": [
        "<type>[] usd_flattenediprimvar(<stage>stage, string primpath, string name)",
        "<type>[] usd_flattenediprimvar(<stage>stage, string primpath, string name, float timecode)"
      ]
    },
    {
      "name": "usd_drawmode",
      "description": "Returns the primitive\u2019s draw mode.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_drawmode.html",
      "usage": [
        "string  usd_drawmode(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_flattenedprimvarelement",
      "description": "Reads an element value of a flattened array primvar directly from a USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_flattenedprimvarelement.html",
      "usage": [
        "<type> usd_flattenedprimvarelement(<stage>stage, string primpath, string name, int index)",
        "<type> usd_flattenedprimvarelement(<stage>stage, string primpath, string name, int index, float timecode)"
      ]
    },
    {
      "name": "usd_flattenediprimvarelement",
      "description": "Reads an element value of a flattened array primvar directly from the USD primitive or from its ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_flattenediprimvarelement.html",
      "usage": [
        "<type> usd_flattenediprimvarelement(<stage>stage, string primpath, string name, int index)",
        "<type> usd_flattenediprimvarelement(<stage>stage, string primpath, string name, int index, float timecode)"
      ]
    },
    {
      "name": "usd_flattenedprimvar",
      "description": "Reads the value of an flattened primvar directly from the USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_flattenedprimvar.html",
      "usage": [
        "<type>[] usd_flattenedprimvar(<stage>stage, string primpath, string name)",
        "<type>[] usd_flattenedprimvar(<stage>stage, string primpath, string name, float timecode)"
      ]
    },
    {
      "name": "usd_findtransformname",
      "description": "Retrurns primitive\u2019s transform operation full name for given the transform operation suffix",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_findtransformname.html",
      "usage": [
        "string  usd_findtransformname(<stage>stage, string primpath, string suffix)"
      ]
    },
    {
      "name": "usd_getbbox_center",
      "description": "Returns the center of the bounding box for the primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_getbbox_center.html",
      "usage": [
        "vector  usd_getbbox_center(<stage>stage, string primpath, string purpose)"
      ]
    },
    {
      "name": "usd_getbbox",
      "description": "Sets two vectors to the minimum and maximum corners of the bounding box for the primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_getbbox.html",
      "usage": [
        "int  usd_getbbox(<stage>stage, string primpath, string purpose, vector &min, vector &max)"
      ]
    },
    {
      "name": "usd_getbbox_max",
      "description": "Returns the maximum of the bounding box for the primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_getbbox_max.html",
      "usage": [
        "vector  usd_getbbox_max(<stage>stage, string primpath, string purpose)"
      ]
    },
    {
      "name": "usd_getbounds",
      "description": "Obtains the primitive\u2019s bounds",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_getbounds.html",
      "usage": [
        "int  usd_getbounds(<stage>stage, string primpath, string purpose, vector &min, vector &max)",
        "int  usd_getbounds(<stage>stage, string primpath, string purpose, float timecode, vector &min, vector &max)",
        "int  usd_getbounds(<stage>stage, string primpath, string purpose[], vector &min, vector &max)",
        "int  usd_getbounds(<stage>stage, string primpath, string purpose[], float timecode, vector &min, vector &max)"
      ]
    },
    {
      "name": "usd_getbbox_size",
      "description": "Returns the size of the bounding box for the primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_getbbox_size.html",
      "usage": [
        "vector  usd_getbbox_size(<stage>stage, string primpath, string purpose)"
      ]
    },
    {
      "name": "usd_getbbox_min",
      "description": "Returns the minimum of the bounding box for the primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_getbbox_min.html",
      "usage": [
        "vector  usd_getbbox_min(<stage>stage, string primpath, string purpose)"
      ]
    },
    {
      "name": "usd_getpointinstancebounds",
      "description": "Obtains the primitive\u2019s bounds",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_getpointinstancebounds.html",
      "usage": [
        "int  usd_getpointinstancebounds(<stage>stage, string primpath, int instance_index, string purpose, vector &min, vector &max)",
        "int  usd_getpointinstancebounds(<stage>stage, string primpath, int instance_index, string purpose[], vector &min, vector &max)",
        "int  usd_getpointinstancebounds(<stage>stage, string primpath, int instance_index, string purpose, float timecode, vector &min, vector &max)",
        "int  usd_getpointinstancebounds(<stage>stage, string primpath, int instance_index, string purpose[], float timecode, vector &min, vector &max)"
      ]
    },
    {
      "name": "usd_haspayload",
      "description": "Checks if the primitive adheres to the given API.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_haspayload.html",
      "usage": [
        "int  usd_haspayload(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_hasapi",
      "description": "Checks if the primitive adheres to the given API.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_hasapi.html",
      "usage": [
        "int  usd_hasapi(<stage>stage, string primpath, string api)"
      ]
    },
    {
      "name": "usd_iprimvar",
      "description": "Reads the value of a primvar directly from the USD primitive or from USD primitive\u2019s ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iprimvar.html",
      "usage": [
        "<type> usd_iprimvar(<stage>stage, string primpath, string name)",
        "<type>[] usd_iprimvar(<stage>stage, string primpath, string name)",
        "<type> usd_iprimvar(<stage>stage, string primpath, string name, float timecode)",
        "<type>[] usd_iprimvar(<stage>stage, string primpath, string name, float timecode)"
      ]
    },
    {
      "name": "usd_iprimvarelementsize",
      "description": "Returns the element size of the primvar directly from the USD primitive or from USD primitive\u2019s ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iprimvarelementsize.html",
      "usage": [
        "int  usd_iprimvarelementsize(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_iprimvarelement",
      "description": "Reads the value of an element from the array primvar directly from the USD primitive or from USD primitive\u2019s ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iprimvarelement.html",
      "usage": [
        "<type> usd_iprimvarelement(<stage>stage, string primpath, string name, int index)",
        "<type> usd_iprimvarelement(<stage>stage, string primpath, string name, int index, float timecode)"
      ]
    },
    {
      "name": "usd_iprimvarinterpolation",
      "description": "Returns the element size of the primvar directly on the USD primitive or on USD primitive\u2019s ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iprimvarinterpolation.html",
      "usage": [
        "string  usd_iprimvarinterpolation(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_iprimvarindices",
      "description": "Returns the index array of an indexed primvar directly on the USD primitive or on USD primitive\u2019s ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iprimvarindices.html",
      "usage": [
        "int [] usd_iprimvarindices(<stage>stage, string primpath, string name)",
        "int [] usd_iprimvarindices(<stage>stage, string primpath, string name, float timecode)"
      ]
    },
    {
      "name": "usd_iprimvarlen",
      "description": "Returns the length of the array primvar directly on the USD primitive or on USD primitive\u2019s ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iprimvarlen.html",
      "usage": [
        "int  usd_iprimvarlen(<stage>stage, string primpath, string name)",
        "int  usd_iprimvarlen(<stage>stage, string primpath, string name, float timecode)"
      ]
    },
    {
      "name": "usd_iprimvarnames",
      "description": "Returns the names of the primvars available directly on the given USD primitive or on USD primitive\u2019s ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iprimvarnames.html",
      "usage": [
        "string [] usd_iprimvarnames(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_iprimvartimesamples",
      "description": "Returns the time codes at which the primvar values are authored directly on the given primitive or on its ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iprimvartimesamples.html",
      "usage": [
        "float [] usd_iprimvartimesamples(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_iprimvarsize",
      "description": "Returns the tuple size of the primvar directly on the USD primitive or on USD primitive\u2019s ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iprimvarsize.html",
      "usage": [
        "int  usd_iprimvarsize(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_iprimvartypename",
      "description": "Returns the name of the primvar type found on the given primitive or its ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iprimvartypename.html",
      "usage": [
        "string  usd_iprimvartypename(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_isabstract",
      "description": "Checks if the primitive is abstract.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isabstract.html",
      "usage": [
        "int  usd_isabstract(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_isactive",
      "description": "Checks if the primitive is active.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isactive.html",
      "usage": [
        "int  usd_isactive(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_isarray",
      "description": "Checks if the attribute is an array.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isarray.html",
      "usage": [
        "int  usd_isarray(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_isarrayiprimvar",
      "description": "Checks if there is an array primvar directly on the USD primitive or on USD primitive\u2019s ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isarrayiprimvar.html",
      "usage": [
        "int  usd_isarrayiprimvar(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_isarrayprimvar",
      "description": "Checks if there is an array primvar directly on the USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isarrayprimvar.html",
      "usage": [
        "int  usd_isarrayprimvar(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_isattrib",
      "description": "Checks if the primitive has an attribute by the given name.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isattrib.html",
      "usage": [
        "int  usd_isattrib(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_isarraymetadata",
      "description": "Checks if the given metadata is an array.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isarraymetadata.html",
      "usage": [
        "int  usd_isarraymetadata(<stage>stage, string path, string name)"
      ]
    },
    {
      "name": "usd_iscollection",
      "description": "Checks if the collection exists.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iscollection.html",
      "usage": [
        "int  usd_iscollection(<stage>stage, string collectionpath)"
      ]
    },
    {
      "name": "usd_iscollectionpath",
      "description": "Checks if the path is a valid collection path.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iscollectionpath.html",
      "usage": [
        "int  usd_iscollectionpath(<stage>stage, string collectionpath)"
      ]
    },
    {
      "name": "usd_isindexedprimvar",
      "description": "Checks if there is an indexed primvar directly on the USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isindexedprimvar.html",
      "usage": [
        "int  usd_isindexedprimvar(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_isindexediprimvar",
      "description": "Checks if there is an indexed primvar directly on the USD primitive or on USD primitive\u2019s ancestor.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isindexediprimvar.html",
      "usage": [
        "int  usd_isindexediprimvar(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_isinstance",
      "description": "Checks if the primitive is an instance.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isinstance.html",
      "usage": [
        "int  usd_isinstance(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_iskind",
      "description": "Checks if the primitive is of a given kind.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_iskind.html",
      "usage": [
        "int  usd_iskind(<stage>stage, string primpath, string kind)"
      ]
    },
    {
      "name": "usd_isiprimvar",
      "description": "Checks if the primitive or its ancestor has a primvar of the given name.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isiprimvar.html",
      "usage": [
        "int  usd_isiprimvar(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_ismetadata",
      "description": "Checks if the primitive has metadata by the given name.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_ismetadata.html",
      "usage": [
        "int  usd_ismetadata(<stage>stage, string path, string name)"
      ]
    },
    {
      "name": "usd_isprimvar",
      "description": "Checks if the primitive has a primvar of the given name.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isprimvar.html",
      "usage": [
        "int  usd_isprimvar(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_ismodel",
      "description": "Checks if the primitive is a model.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_ismodel.html",
      "usage": [
        "int  usd_ismodel(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_isprim",
      "description": "Checks if the path refers to a valid primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isprim.html",
      "usage": [
        "int  usd_isprim(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_isstage",
      "description": "Checks if the stage is valid.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isstage.html",
      "usage": [
        "int  usd_isstage(<stage>stage)"
      ]
    },
    {
      "name": "usd_isrelationship",
      "description": "Checks if the primitive has a relationship by the given name.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isrelationship.html",
      "usage": [
        "int  usd_isrelationship(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_istransformreset",
      "description": "Checks if the primitive transform is reset",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_istransformreset.html",
      "usage": [
        "int  usd_istransformreset(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_isvisible",
      "description": "Checks if the primitive is visible.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_isvisible.html",
      "usage": [
        "int  usd_isvisible(<stage>stage, string primpath)",
        "int  usd_isvisible(<stage>stage, string primpath, float timecode)"
      ]
    },
    {
      "name": "usd_istype",
      "description": "Checks if the primitive is of a given type.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_istype.html",
      "usage": [
        "int  usd_istype(<stage>stage, string primpath, string type)"
      ]
    },
    {
      "name": "usd_kind",
      "description": "Returns the primitive\u2019s kind.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_kind.html",
      "usage": [
        "string  usd_kind(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_localtransform",
      "description": "Obtains the primitive\u2019s local transform",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_localtransform.html",
      "usage": [
        "matrix  usd_localtransform(<stage>stage, string primpath)",
        "matrix  usd_localtransform(<stage>stage, string primpath, float timecode)"
      ]
    },
    {
      "name": "usd_makepropertypath",
      "description": "Constructs an property path from a primitive path and an property name.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_makepropertypath.html",
      "usage": [
        "string  usd_makepropertypath(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_makecollectionpath",
      "description": "Constructs a collection path from a primitive path and a collection name.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_makecollectionpath.html",
      "usage": [
        "string  usd_makecollectionpath(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_makeattribpath",
      "description": "Constructs an attribute path from a primitive path and an attribute name.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_makeattribpath.html",
      "usage": [
        "string  usd_makeattribpath(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_makevalidprimname",
      "description": "Forces a string to conform to the rules for naming USD primitives.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_makevalidprimname.html",
      "usage": [
        "string  usd_makevalidprimname(string name)"
      ]
    },
    {
      "name": "usd_makerelationshippath",
      "description": "Constructs an relationship path from a primitive path and a relationship name.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_makerelationshippath.html",
      "usage": [
        "string  usd_makerelationshippath(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_makevalidprimpath",
      "description": "Forces a string to conform to the rules for paths to USD primitives.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_makevalidprimpath.html",
      "usage": [
        "string  usd_makevalidprimpath(string path, int allow_relative)"
      ]
    },
    {
      "name": "usd_metadataelement",
      "description": "Reads the value of an element from the array metadata.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_metadataelement.html",
      "usage": [
        "<type> usd_metadataelement(<stage>stage, string path, string name, int index)"
      ]
    },
    {
      "name": "usd_metadata",
      "description": "Reads the value of metadata from the USD object.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_metadata.html",
      "usage": [
        "<type> usd_metadata(<stage>stage, string path, string name)",
        "<type>[] usd_metadata(<stage>stage, string path, string name)"
      ]
    },
    {
      "name": "usd_name",
      "description": "Returns the name of the primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_name.html",
      "usage": [
        "string  usd_name(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_metadatanames",
      "description": "Returns the names of the metadata available on the object.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_metadatanames.html",
      "usage": [
        "string [] usd_metadatanames(<stage>stage, string path)"
      ]
    },
    {
      "name": "usd_metadatalen",
      "description": "Returns the length of the array metadata.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_metadatalen.html",
      "usage": [
        "int  usd_metadatalen(<stage>stage, string path, string name)"
      ]
    },
    {
      "name": "usd_pointinstance_getbbox",
      "description": "Sets two vectors to the minimum and maximum corners of the bounding box for the given instance inside point instancer.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_pointinstance_getbbox.html",
      "usage": [
        "int  usd_pointinstance_getbbox(<stage>stage, string primpath, int instance_index, string purpose, vector &min, vector &max)"
      ]
    },
    {
      "name": "usd_pointinstance_getbbox_max",
      "description": "Returns the maximum position of the bounding box for the instance inside a point instancer primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_pointinstance_getbbox_max.html",
      "usage": [
        "vector  usd_pointinstance_getbbox_max(<stage>stage, string primpath, int instance_index, string purpose)"
      ]
    },
    {
      "name": "usd_pointinstance_getbbox_min",
      "description": "Returns the minimum position of the bounding box for the instance inside a point instancer primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_pointinstance_getbbox_min.html",
      "usage": [
        "vector  usd_pointinstance_getbbox_min(<stage>stage, string primpath, int instance_index, string purpose)"
      ]
    },
    {
      "name": "usd_parentpath",
      "description": "Returns the path of the primitive\u2019s parent.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_parentpath.html",
      "usage": [
        "string  usd_parentpath(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_pointinstance_getbbox_size",
      "description": "Returns the size of the bounding box for the instance inside a point instancer primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_pointinstance_getbbox_size.html",
      "usage": [
        "vector  usd_pointinstance_getbbox_size(<stage>stage, string primpath, int instance_index, string purpose)"
      ]
    },
    {
      "name": "usd_pointinstance_getbbox_center",
      "description": "Returns the center of the bounding box for the instance inside a point instancer primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_pointinstance_getbbox_center.html",
      "usage": [
        "vector  usd_pointinstance_getbbox_center(<stage>stage, string primpath, int instance_index, string purpose)"
      ]
    },
    {
      "name": "usd_pointinstance_relbbox",
      "description": "Returns the relative position of the point given with respect to the bounding box of the geometry.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_pointinstance_relbbox.html",
      "usage": [
        "vector  usd_pointinstance_relbbox(<stage>stage, string primpath, int instance_index, string purpose, vector position)"
      ]
    },
    {
      "name": "usd_primvarattribname",
      "description": "Returns the namespaced attribute name for the given primvar.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_primvarattribname.html",
      "usage": [
        "string  usd_primvarattribname(<stage>stage, string name)"
      ]
    },
    {
      "name": "usd_pointinstancetransform",
      "description": "Obtains the transform for the given point instance",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_pointinstancetransform.html",
      "usage": [
        "matrix  usd_pointinstancetransform(<stage>stage, string primpath, int index)",
        "matrix  usd_pointinstancetransform(<stage>stage, string primpath, int index, float timecode)"
      ]
    },
    {
      "name": "usd_primvar",
      "description": "Reads the value of a primvar directly from the USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_primvar.html",
      "usage": [
        "<type> usd_primvar(<stage>stage, string primpath, string name)",
        "<type>[] usd_primvar(<stage>stage, string primpath, string name)",
        "<type> usd_primvar(<stage>stage, string primpath, string name, float timecode)",
        "<type>[] usd_primvar(<stage>stage, string primpath, string name, float timecode)"
      ]
    },
    {
      "name": "usd_primvarelement",
      "description": "Reads the value of an element from the array primvar directly from the USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_primvarelement.html",
      "usage": [
        "<type> usd_primvarelement(<stage>stage, string primpath, string name, int index)",
        "<type> usd_primvarelement(<stage>stage, string primpath, string name, int index, float timecode)"
      ]
    },
    {
      "name": "usd_primvarelementsize",
      "description": "Returns the element size of the primvar directly from the USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_primvarelementsize.html",
      "usage": [
        "int  usd_primvarelementsize(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_primvarindices",
      "description": "Returns the index array of an indexed primvar directly on the USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_primvarindices.html",
      "usage": [
        "int [] usd_primvarindices(<stage>stage, string primpath, string name)",
        "int [] usd_primvarindices(<stage>stage, string primpath, string name, float timecode)"
      ]
    },
    {
      "name": "usd_primvarinterpolation",
      "description": "Returns the element size of the primvar directly on the USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_primvarinterpolation.html",
      "usage": [
        "string  usd_primvarinterpolation(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_primvarsize",
      "description": "Returns the tuple size of the primvar directly on the USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_primvarsize.html",
      "usage": [
        "int  usd_primvarsize(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_primvartypename",
      "description": "Returns the name of the primvar type found on the given primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_primvartypename.html",
      "usage": [
        "string  usd_primvartypename(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_primvartimesamples",
      "description": "Returns the time codes at which the primvar values are authored directly on\nthe given primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_primvartimesamples.html",
      "usage": [
        "float [] usd_primvartimesamples(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_primvarlen",
      "description": "Returns the length of the array primvar directly on the USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_primvarlen.html",
      "usage": [
        "int  usd_primvarlen(<stage>stage, string primpath, string name)",
        "int  usd_primvarlen(<stage>stage, string primpath, string name, float timecode)"
      ]
    },
    {
      "name": "usd_relationshipforwardedtargets",
      "description": "Obtains the relationship forwarded targets.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_relationshipforwardedtargets.html",
      "usage": [
        "string [] usd_relationshipforwardedtargets(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_purpose",
      "description": "Returns the primitive\u2019s purpose.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_purpose.html",
      "usage": [
        "string  usd_purpose(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_relationshipnames",
      "description": "Returns the names of the relationships available on the primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_relationshipnames.html",
      "usage": [
        "string [] usd_relationshipnames(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_primvarnames",
      "description": "Returns the names of the primvars available on the given USD primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_primvarnames.html",
      "usage": [
        "string [] usd_primvarnames(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_relationshiptargets",
      "description": "Obtains the relationship targets.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_relationshiptargets.html",
      "usage": [
        "string [] usd_relationshiptargets(<stage>stage, string primpath, string name)"
      ]
    },
    {
      "name": "usd_relbbox",
      "description": "Returns the relative position of the point given with respect to the bounding box of the geometry.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_relbbox.html",
      "usage": [
        "vector  usd_relbbox(<stage>stage, string primpath, string purpose, vector position)"
      ]
    },
    {
      "name": "usd_removerelationshiptarget",
      "description": "Remove a target from the primitive\u2019s relationship",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_removerelationshiptarget.html",
      "usage": [
        "int  usd_removerelationshiptarget(int stagehandle, string primpath, string name, string target)"
      ]
    },
    {
      "name": "usd_setactive",
      "description": "Sets the primitive active state.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setactive.html",
      "usage": [
        "int  usd_setactive(int stagehandle, string primpath, int flag)"
      ]
    },
    {
      "name": "usd_setattribelement",
      "description": "Sets the value of an element in an array attribute.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setattribelement.html",
      "usage": [
        "int  usd_setattribelement(int stagehandle, string primpath, string name, int index, <type>value)"
      ]
    },
    {
      "name": "usd_setattrib",
      "description": "Sets the value of an attribute.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setattrib.html",
      "usage": [
        "int  usd_setattrib(int stagehandle, string primpath, string name, <type>value)",
        "int  usd_setattrib(int stagehandle, string primpath, string name, <type>value[])"
      ]
    },
    {
      "name": "usd_setcollectionexcludes",
      "description": "Sets the excludes list on the collection",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setcollectionexcludes.html",
      "usage": [
        "int  usd_setcollectionexcludes(int stagehandle, string collectionpath, string excludes[])"
      ]
    },
    {
      "name": "usd_setcollectionexpansionrule",
      "description": "Sets the expansion rule on the collection",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setcollectionexpansionrule.html",
      "usage": [
        "int  usd_setcollectionexpansionrule(int stagehandle, string collectionpath, string rule)"
      ]
    },
    {
      "name": "usd_setdrawmode",
      "description": "Sets the primitive\u2019s draw mode.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setdrawmode.html",
      "usage": [
        "int  usd_setdrawmode(int stagehandle, string primpath, string mode)"
      ]
    },
    {
      "name": "usd_setcollectionincludes",
      "description": "Sets the includes list on the collection",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setcollectionincludes.html",
      "usage": [
        "int  usd_setcollectionincludes(int stagehandle, string collectionpath, string includes[])"
      ]
    },
    {
      "name": "usd_setkind",
      "description": "Sets the primitive\u2019s kind.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setkind.html",
      "usage": [
        "int  usd_setkind(int stagehandle, string primpath, string kind)"
      ]
    },
    {
      "name": "usd_setmetadataelement",
      "description": "Sets the value of an element in an array metadata.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setmetadataelement.html",
      "usage": [
        "int  usd_setmetadataelement(int stagehandle, string path, string name, int index, <type>value)"
      ]
    },
    {
      "name": "usd_setmetadata",
      "description": "Sets the value of an metadata.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setmetadata.html",
      "usage": [
        "int  usd_setmetadata(int stagehandle, string path, string name, <type>value)",
        "int  usd_setmetadata(int stagehandle, string path, string name, <type>value[])"
      ]
    },
    {
      "name": "usd_setprimvar",
      "description": "Sets the value of a primvar.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setprimvar.html",
      "usage": [
        "int  usd_setprimvar(int stagehandle, string primpath, string name, <type>value)",
        "int  usd_setprimvar(int stagehandle, string primpath, string name, <type>value[])"
      ]
    },
    {
      "name": "usd_setprimvarelement",
      "description": "Sets the value of an element in an array primvar.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setprimvarelement.html",
      "usage": [
        "int  usd_setprimvarelement(int stagehandle, string primpath, string name, int index, <type>value)"
      ]
    },
    {
      "name": "usd_setprimvarelementsize",
      "description": "Sets the element size of a primvar.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setprimvarelementsize.html",
      "usage": [
        "int  usd_setprimvarelementsize(int stagehandle, string primpath, string name, int size)"
      ]
    },
    {
      "name": "usd_setprimvarinterpolation",
      "description": "Sets the interpolation of a primvar.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setprimvarinterpolation.html",
      "usage": [
        "int  usd_setprimvarinterpolation(int stagehandle, string primpath, string name, string interpolation)"
      ]
    },
    {
      "name": "usd_settransformorder",
      "description": "Sets the primitive\u2019s transform order",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_settransformorder.html",
      "usage": [
        "int  usd_settransformorder(int stagehandle, string primpath, string transformorder[])"
      ]
    },
    {
      "name": "usd_setpurpose",
      "description": "Sets the primitive\u2019s purpose.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setpurpose.html",
      "usage": [
        "int  usd_setpurpose(int stagehandle, string primpath, string purpose)"
      ]
    },
    {
      "name": "usd_setrelationshiptargets",
      "description": "Sets the targets in the primitive\u2019s relationship",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setrelationshiptargets.html",
      "usage": [
        "int  usd_setrelationshiptargets(int stagehandle, string primpath, string name, string targets[])"
      ]
    },
    {
      "name": "usd_setprimvarindices",
      "description": "Sets the indices for the given primvar.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setprimvarindices.html",
      "usage": [
        "int  usd_setprimvarindices(int stagehandle, string primpath, string name, int indices[])"
      ]
    },
    {
      "name": "usd_setvariantselection",
      "description": "Sets the selected variant in the given variant set.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setvariantselection.html",
      "usage": [
        "int  usd_setvariantselection(<stage>stage, string primpath, string variantset, string variant)"
      ]
    },
    {
      "name": "usd_settransformreset",
      "description": "Sets/clears the primitive\u2019s transform reset flag",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_settransformreset.html",
      "usage": [
        "int  usd_settransformreset(int stagehandle, string primpath, int flag)"
      ]
    },
    {
      "name": "usd_setvisibility",
      "description": "Configures the primitive to be visible, invisible, or to inherit visibility\nfrom the parent.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setvisibility.html",
      "usage": [
        "int  usd_setvisibility(int stagehandle, string primpath, int code)"
      ]
    },
    {
      "name": "usd_setvisible",
      "description": "Makes the primitive visible or invisible.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_setvisible.html",
      "usage": [
        "int  usd_setvisible(int stagehandle, string primpath, int flag)"
      ]
    },
    {
      "name": "usd_transformname",
      "description": "Constructs a full name of a transform operation",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_transformname.html",
      "usage": [
        "string  usd_transformname(int transformtype, string suffix)"
      ]
    },
    {
      "name": "usd_specifier",
      "description": "Returns the primitive\u2019s specifier.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_specifier.html",
      "usage": [
        "string  usd_specifier(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_transformorder",
      "description": "Obtains the primitive\u2019s transform order",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_transformorder.html",
      "usage": [
        "string [] usd_transformorder(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_transformsuffix",
      "description": "Extracts the transform operation suffix from the full name",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_transformsuffix.html",
      "usage": [
        "string  usd_transformsuffix(string name)"
      ]
    },
    {
      "name": "usd_uniquetransformname",
      "description": "Constructs a unique full name of a transform operation",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_uniquetransformname.html",
      "usage": [
        "string  usd_uniquetransformname(<stage>stage, string primpath, int transformtype, string suffix)"
      ]
    },
    {
      "name": "usd_transformtype",
      "description": "Infers the transform operation type from the full name",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_transformtype.html",
      "usage": [
        "int  usd_transformtype(string name)"
      ]
    },
    {
      "name": "usd_typename",
      "description": "Returns the name of the primitive\u2019s type.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_typename.html",
      "usage": [
        "string  usd_typename(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_variants",
      "description": "Returns the variants belonging to the given variant set on a primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_variants.html",
      "usage": [
        "string [] usd_variants(<stage>stage, string primpath, string variantset)"
      ]
    },
    {
      "name": "assert_enabled",
      "description": "Returns 1 if the VEX assertions are enabled (see HOUDINI_VEX_ASSERT) or 0 if assertions are disabled. Used the implement the assert macro.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/assert_enabled.html",
      "usage": [
        "int  assert_enabled()"
      ]
    },
    {
      "name": "usd_variantselection",
      "description": "Returns the currently selected variant in a given variant set.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_variantselection.html",
      "usage": [
        "string  usd_variantselection(<stage>stage, string primpath, string variantset)"
      ]
    },
    {
      "name": "usd_variantsets",
      "description": "Returns the variant sets available on a primitive.",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_variantsets.html",
      "usage": [
        "string [] usd_variantsets(<stage>stage, string primpath)"
      ]
    },
    {
      "name": "usd_worldtransform",
      "description": "Obtains the primitive\u2019s world transform",
      "category": "usd",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/usd_worldtransform.html",
      "usage": [
        "matrix  usd_worldtransform(<stage>stage, string primpath)",
        "matrix  usd_worldtransform(<stage>stage, string primpath, float timecode)"
      ]
    },
    {
      "name": "assign",
      "description": "An efficient way of extracting the components of a vector or matrix into float variables.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/assign.html",
      "usage": [
        "void  assign(float &c1, float &c2, vector2 source)",
        "void  assign(float &c1, float &c2, float &c3, vector source)",
        "void  assign(float &c1, float &c2, float &c3, float &c4, vector4 source)",
        "void  assign(float &c1, float &c2, float &c3, float &c4, matrix2 source)",
        "void  assign(float &c1, float &c2, float &c3, float &c4, float &c5, float &c6, float &c7, float &c8, float &c9, matrix3 source)",
        "void  assign(float &c1, float &c2, float &c3, float &c4, float &c5, float &c6, float &c7, float &c8, float &c9, float &c10, float &c11, float &c12, float &c13, float &c14, float &c15, float &c16, matrix source)"
      ]
    },
    {
      "name": "forpoints",
      "description": "",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/forpoints.html",
      "usage": []
    },
    {
      "name": "error",
      "description": "Reports a custom runtime VEX error.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/error.html",
      "usage": [
        "void  error(string format, ...)"
      ]
    },
    {
      "name": "getcomp",
      "description": "Extracts a single component of a vector type, matrix type, or array.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/getcomp.html",
      "usage": [
        "float  getcomp(<vector>v, int index)",
        "float  getcomp(<matrix>m, int row, int column)",
        "<type> getcomp(<type>array[], int index)",
        "<type> getcomp(<vector>array[], int i, int j)",
        "getcomp(array[i], j)",
        "<type> getcomp(<matrix>array[], int i, int j, int k)",
        "getcomp(array[i], j, k)",
        "<type> getcomp(dict d, string index)",
        "<type>[] getcomp(dict d, string index)",
        "<type> getcomp(dict d, string index, <type>defvalue)",
        "<type>[] getcomp(dict d, string index, <type>defvalue[])",
        "string  getcomp(string value, int index)"
      ]
    },
    {
      "name": "isbound",
      "description": "Parameters in VEX can be overridden by geometry attributes (if the attributes exist on the surface being rendered).",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isbound.html",
      "usage": [
        "int  isbound(string variable_name)"
      ]
    },
    {
      "name": "isvarying",
      "description": "Check whether a VEX variable is varying or uniform.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/isvarying.html",
      "usage": [
        "int  isvarying(<type>x)",
        "int  isvarying(<type>x[])",
        "isvarying()"
      ]
    },
    {
      "name": "opend",
      "description": "Ends a long operation.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/opend.html",
      "usage": [
        "void  opend(int handle)"
      ]
    },
    {
      "name": "pack_inttosafefloat",
      "description": "Reversibly packs an integer into a finite, non-denormal float.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/pack_inttosafefloat.html",
      "usage": [
        "float  pack_inttosafefloat(int i)"
      ]
    },
    {
      "name": "print_once",
      "description": "Prints a message only once, even in a loop.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/print_once.html",
      "usage": [
        "void  print_once(string msg, ...)",
        "print_once()",
        "print_once()",
        "print_once()"
      ]
    },
    {
      "name": "opstart",
      "description": "Start a long operation.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/opstart.html",
      "usage": [
        "int  opstart(string message)"
      ]
    },
    {
      "name": "printf",
      "description": "Prints values to the console which started the VEX program.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/printf.html",
      "usage": [
        "void  printf(string format, ...)"
      ]
    },
    {
      "name": "ramp_pack",
      "description": "Packs a set of arrays into a string-encoded ramp.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ramp_pack.html",
      "usage": [
        "string  ramp_pack(string basis[], float pos[], float value[])",
        "string  ramp_pack(string basis[], float pos[], vector value[])",
        "string  ramp_pack(string basis[], float pos[], vector4 value[])"
      ]
    },
    {
      "name": "ramp_lookup",
      "description": "Evaluates a Houdini-style ramp at a specific location.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ramp_lookup.html",
      "usage": [
        "float  ramp_lookup(float pos, string ramp)",
        "vector  ramp_lookup(float pos, string ramp)",
        "float  ramp_lookup(float pos, string basis[], float key[], float val[])",
        "vector  ramp_lookup(float pos, string basis[], float key[], vector val[])"
      ]
    },
    {
      "name": "setcomp",
      "description": "Sets a single component of a vector or matrix type, or an item in an array.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/setcomp.html",
      "usage": [
        "float|void setcomp(<vector>&target, float value, int index)",
        "float|void setcomp(<matrix>&target, float value, int row, int column)",
        "<type> setcomp(<type>&array[], <type>value, int index)",
        "float  setcomp(<vector>&array[], float value, int i, int j)",
        "setcomp(array[i], value, j)",
        "float  setcomp(<matrix>&array[], float value, int i, int j, int k)",
        "setcomp(array[i], value, j, k)",
        "<type> setcomp(dict &d, <type>value, string index)",
        "<type>[] setcomp(dict &d, <type>value[], string index)"
      ]
    },
    {
      "name": "select",
      "description": "Returns one of two parameters based on a conditional.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/select.html",
      "usage": [
        "<type> select(int conditional, <type>a, <type>b)",
        "<type>[] select(int conditional, <type>a[], <type>b[])"
      ]
    },
    {
      "name": "ramp_unpack",
      "description": "Unpacks a string-encoded ramp into a set of arrays.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/ramp_unpack.html",
      "usage": [
        "void  ramp_unpack(string ramp, string &basis[], float &pos[], float &value[])",
        "void  ramp_unpack(string ramp, string &basis[], float &pos[], vector &value[])",
        "void  ramp_unpack(string ramp, string &basis[], float &pos[], vector4 &value[])"
      ]
    },
    {
      "name": "set",
      "description": "Creates a new value based on its arguments, such as creating a vector from its components.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/set.html",
      "usage": [
        "set()",
        "vector2  set(float v1, float v2)",
        "vector  set(float v1, float v2, float v3)",
        "vector4  set(float v1, float v2, float v3, float v4)",
        "matrix2  set(float v1, float v2, float v3, float v4)",
        "matrix3  set(float v1, float v2, float v4, float v4, float v5, float v6, float v7, float v8, float v9)",
        "matrix  set(float v1, float v2, float v3, float v4, float v5, float v6, float v7, float v8, float v9, float v10, float v11, float v12, float v13, float v14, float v15, float v16)",
        "<vector> set(float nums[])",
        "<matrix> set(float nums[])",
        "<vector> set(float|intv)",
        "<matrix> set(float|intv)",
        "matrix2  set(vector2 row1, vector2 row2)",
        "matrix3  set(vector row1, vector row2, vector row3)",
        "matrix  set(vector4 row1, vector4 row2, vector4 row3, vector4 row4)",
        "matrix2  set(vector2 rows[])",
        "matrix3  set(vector rows[])",
        "matrix  set(vector4 rows[])",
        "vector2 [] set(matrix2 m)",
        "vector [] set(matrix3 m)",
        "vector4 [] set(matrix m)",
        "vector  set(vector2 v)",
        "vector4  set(vector2 v)",
        "vector4  set(vector v)",
        "matrix3  set(matrix2 m)",
        "matrix  set(matrix2 m)",
        "matrix  set(matrix3 m)",
        "float  set(vector v)",
        "float  set(vector4 v)",
        "vector2  set(vector4 v)",
        "vector2  set(vector v)",
        "vector  set(vector4 v)",
        "matrix2  set(matrix3 m)",
        "matrix2  set(matrix m)",
        "matrix3  set(matrix m)",
        "float [] set(<vector>v)",
        "float [] set(<matrix>m)",
        "<vector>[] set(float nums[])",
        "<matrix>[] set(float nums[])",
        "int  set(float v)",
        "float  set(int v)",
        "float [] set(int vs[])",
        "int [] set(float vs[])",
        "float [] set(float num)",
        "float  set(float nums[])",
        "dict  set(string key, ...)",
        "<type> set(<type>v)",
        "<type>[] set(<type>v[])",
        "set()"
      ]
    },
    {
      "name": "sleep",
      "description": "Yields processing for a certain number of milliseconds.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/sleep.html",
      "usage": [
        "void  sleep(int milliseconds)"
      ]
    },
    {
      "name": "swizzle",
      "description": "Rearranges the components of a vector.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/swizzle.html",
      "usage": [
        "vector2  swizzle(vector2 v, int i0, int i1)",
        "vector  swizzle(vector v, int i0, int i1, int i2)",
        "vector4  swizzle(vector4 v, int i0, int i1, int i2, int i3)"
      ]
    },
    {
      "name": "unpack_intfromsafefloat",
      "description": "Reverses the packing of pack_inttosafefloat to get back the original integer.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/unpack_intfromsafefloat.html",
      "usage": [
        "int  unpack_intfromsafefloat(float f)"
      ]
    },
    {
      "name": "volumecubicsample",
      "description": "Samples the volume primitive\u2019s value.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumecubicsample.html",
      "usage": [
        "float  volumecubicsample(<geometry>geometry, int primnum, vector pos)",
        "float  volumecubicsample(<geometry>geometry, string volumename, vector pos)",
        "float  volumecubicsample(<geometry>geometry, int primnum, vector pos, vector &grad)",
        "float  volumecubicsample(<geometry>geometry, string volumename, vector pos, vector &grad)",
        "float  volumecubicsample(<geometry>geometry, int primnum, vector pos, vector &grad, matrix3 &hess)",
        "float  volumecubicsample(<geometry>geometry, string volumename, vector pos, vector &grad, matrix3 &hess)"
      ]
    },
    {
      "name": "warning",
      "description": "Reports a custom runtime VEX warning.",
      "category": "Utility",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/warning.html",
      "usage": [
        "void  warning(string format, ...)"
      ]
    },
    {
      "name": "volume",
      "description": "Returns the volume of the microvoxel containing a variable such as P.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volume.html",
      "usage": [
        "float  volume(vector pos, ...)"
      ]
    },
    {
      "name": "volumecubicsamplev",
      "description": "Samples the volume primitive\u2019s value.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumecubicsamplev.html",
      "usage": [
        "vector  volumecubicsamplev(<geometry>geometry, int primnum, vector pos)",
        "vector  volumecubicsamplev(<geometry>geometry, string volumename, vector pos)",
        "vector  volumecubicsamplev(<geometry>geometry, int primnum, vector pos, matrix3 &grad)",
        "vector  volumecubicsamplev(<geometry>geometry, string volumename, vector pos, matrix3 &grad)",
        "vector  volumecubicsamplev(<geometry>geometry, int primnum, vector pos, matrix3 &grad, matrix3 &hessX, matrix3 &hessY, matrix3 &hessZ)",
        "vector  volumecubicsamplev(<geometry>geometry, string volumename, vector pos, matrix3 &grad, matrix3 &hessX, matrix3 &hessY, matrix3 &hessZ)"
      ]
    },
    {
      "name": "volumeindexu",
      "description": "Gets the vector2 value of a specific voxel.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumeindexu.html",
      "usage": [
        "vector2  volumeindexu(<geometry>geometry, int primnum, vector voxel)",
        "vector2  volumeindexu(<geometry>geometry, string volumename, vector voxel)"
      ]
    },
    {
      "name": "volumeindexp",
      "description": "Gets the vector4 value of a specific voxel.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumeindexp.html",
      "usage": [
        "vector4  volumeindexp(<geometry>geometry, int primnum, vector voxel)",
        "vector4  volumeindexp(<geometry>geometry, string volumename, vector voxel)"
      ]
    },
    {
      "name": "volumeindexi",
      "description": "Gets the integer value of a specific voxel.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumeindexi.html",
      "usage": [
        "int  volumeindexi(<geometry>geometry, int primnum, vector voxel)",
        "int  volumeindexi(<geometry>geometry, string volumename, vector voxel)"
      ]
    },
    {
      "name": "volumeindex",
      "description": "Gets the value of a specific voxel.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumeindex.html",
      "usage": [
        "float  volumeindex(<geometry>geometry, int primnum, vector voxel)",
        "float  volumeindex(<geometry>geometry, string volumename, vector voxel)"
      ]
    },
    {
      "name": "volumeindexactive",
      "description": "Gets the active setting of a specific voxel.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumeindexactive.html",
      "usage": [
        "int  volumeindexactive(<geometry>geometry, int primnum, vector voxel)",
        "int  volumeindexactive(<geometry>geometry, string volumename, vector voxel)"
      ]
    },
    {
      "name": "volumeindexorigin",
      "description": "Gets the index of the bottom left of a volume primitive.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumeindexorigin.html",
      "usage": [
        "vector  volumeindexorigin(<geometry>geometry, int primnum)",
        "vector  volumeindexorigin(<geometry>geometry, string volumename)"
      ]
    },
    {
      "name": "volumegradient",
      "description": "Calculates the volume primitive\u2019s gradient.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumegradient.html",
      "usage": [
        "vector  volumegradient(<geometry>geometry, int primnum, vector pos)",
        "vector  volumegradient(<geometry>geometry, string volumename, vector pos)"
      ]
    },
    {
      "name": "volumeindextopos",
      "description": "Converts a volume voxel index into a position.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumeindextopos.html",
      "usage": [
        "vector  volumeindextopos(<geometry>geometry, int primnum, vector voxel)",
        "vector  volumeindextopos(<geometry>geometry, string volumename, vector voxel)"
      ]
    },
    {
      "name": "volumepostoindex",
      "description": "Converts a position into a volume voxel index.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumepostoindex.html",
      "usage": [
        "vector  volumepostoindex(<geometry>geometry, int primnum, vector position)",
        "vector  volumepostoindex(<geometry>geometry, string volumename, vector position)"
      ]
    },
    {
      "name": "volumeindexv",
      "description": "Gets the vector value of a specific voxel.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumeindexv.html",
      "usage": [
        "vector  volumeindexv(<geometry>geometry, int primnum, vector voxel)",
        "vector  volumeindexv(<geometry>geometry, string volumename, vector voxel)"
      ]
    },
    {
      "name": "volumeres",
      "description": "Gets the resolution of a volume primitive.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumeres.html",
      "usage": [
        "vector  volumeres(<geometry>geometry, int primnum)",
        "vector  volumeres(<geometry>geometry, string volumename)"
      ]
    },
    {
      "name": "volumesamplei",
      "description": "Samples the volume primitive\u2019s integer value.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumesamplei.html",
      "usage": [
        "int  volumesamplei(<geometry>geometry, int primnum, vector pos)",
        "int  volumesamplei(<geometry>geometry, string volumename, vector pos)"
      ]
    },
    {
      "name": "volumesamplep",
      "description": "Samples the volume primitive\u2019s vector4 value.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumesamplep.html",
      "usage": [
        "vector4  volumesamplep(<geometry>geometry, int primnum, vector pos)",
        "vector4  volumesamplep(<geometry>geometry, string volumename, vector pos)"
      ]
    },
    {
      "name": "volumesmoothsample",
      "description": "Samples the volume primitive\u2019s value.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumesmoothsample.html",
      "usage": [
        "float  volumesmoothsample(<geometry>geometry, int primnum, vector pos)",
        "float  volumesmoothsample(<geometry>geometry, string volumename, vector pos)",
        "float  volumesmoothsample(<geometry>geometry, int primnum, vector pos, vector &grad)",
        "float  volumesmoothsample(<geometry>geometry, string volumename, vector pos, vector &grad)",
        "float  volumesmoothsample(<geometry>geometry, int primnum, vector pos, vector &grad, matrix3 &hess)",
        "float  volumesmoothsample(<geometry>geometry, string volumename, vector pos, vector &grad, matrix3 &hess)"
      ]
    },
    {
      "name": "volumesample",
      "description": "Samples the volume primitive\u2019s float value.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumesample.html",
      "usage": [
        "float  volumesample(<geometry>geometry, int primnum, vector pos)",
        "float  volumesample(<geometry>geometry, string volumename, vector pos)"
      ]
    },
    {
      "name": "volumesmoothsamplev",
      "description": "Samples the volume primitive\u2019s value.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumesmoothsamplev.html",
      "usage": [
        "vector  volumesmoothsamplev(<geometry>geometry, int primnum, vector pos)",
        "vector  volumesmoothsamplev(<geometry>geometry, string volumename, vector pos)",
        "vector  volumesmoothsamplev(<geometry>geometry, int primnum, vector pos, matrix3 &grad)",
        "vector  volumesmoothsamplev(<geometry>geometry, string volumename, vector pos, matrix3 &grad)",
        "vector  volumesmoothsamplev(<geometry>geometry, int primnum, vector pos, matrix3 &grad, matrix3 &hessX, matrix3 &hessY, matrix3 &hessZ)",
        "vector  volumesmoothsamplev(<geometry>geometry, string volumename, vector pos, matrix3 &grad, matrix3 &hessX, matrix3 &hessY, matrix3 &hessZ)"
      ]
    },
    {
      "name": "volumevoxeldiameter",
      "description": "Computes the approximate diameter of a voxel.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumevoxeldiameter.html",
      "usage": [
        "float  volumevoxeldiameter(<geometry>geometry, int primnum)",
        "float  volumevoxeldiameter(<geometry>geometry, string primname)"
      ]
    },
    {
      "name": "volumetypeid",
      "description": "Gets the typeid of the data of a volume or VDB primitive.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumetypeid.html",
      "usage": [
        "int  volumetypeid(<geometry>geometry, int primnum)",
        "int  volumetypeid(<geometry>geometry, string volumename)"
      ]
    },
    {
      "name": "volumesamplev",
      "description": "Samples the volume primitive\u2019s vector value.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumesamplev.html",
      "usage": [
        "vector  volumesamplev(<geometry>geometry, int primnum, vector pos)",
        "vector  volumesamplev(<geometry>geometry, string volumename, vector pos)"
      ]
    },
    {
      "name": "volumesampleu",
      "description": "Samples the volume primitive\u2019s vector2 value.",
      "category": "volume",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/volumesampleu.html",
      "usage": [
        "vector2  volumesampleu(<geometry>geometry, int primnum, vector pos)",
        "vector2  volumesampleu(<geometry>geometry, string volumename, vector pos)"
      ]
    },
    {
      "name": "weightarrayblend",
      "description": "Blends an existing name/weight array pair with another array or named item.",
      "category": "weightarray",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/weightarrayblend.html",
      "usage": [
        "void  weightarrayblend(string &names[], float &weights[], string newname, float blend)",
        "void  weightarrayblend(string &names[], float &weights[], string newnames[], float newweights[], float blend)"
      ]
    },
    {
      "name": "weightarrayfromname",
      "description": "Initializes an index array and weight array pair with a single named entry.",
      "category": "weightarray",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/weightarrayfromname.html",
      "usage": [
        "void  weightarrayfromname(string &names[], float &weights[], string name)"
      ]
    },
    {
      "name": "weightarraynormalize",
      "description": "Normalizes an array of floats so it sums to 1.0.",
      "category": "weightarray",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/weightarraynormalize.html",
      "usage": [
        "void  weightarraynormalize(float &weights[])"
      ]
    },
    {
      "name": "weightarraythreshold",
      "description": "Discards any weights below a threshold from an name/weight array pair.",
      "category": "weightarray",
      "url": "https://www.sidefx.com/docs/houdini20.5/vex/functions/weightarraythreshold.html",
      "usage": [
        "void  weightarraythreshold(string &names[], float &weights[], float threshold)"
      ]
    }
  ]
}